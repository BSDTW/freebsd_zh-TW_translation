<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40">

	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
		<meta name="ProgId" content="Word.Document">
		<meta name="Generator" content="Microsoft Word 9">
		<meta name="Originator" content="Microsoft Word 9">
		<link rel="File-List" href="Chap_12_files/filelist.xml">
		<!--[if !mso]>
<style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style>
<![endif]-->
		<title>CHAPTER 12</title>
		<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Mike Eddy</o:Author>
  <o:Keywords>{artman 1,M:\SLM\SRC\MASM61\APPS\ART\mpchp12.doc}</o:Keywords>
  <o:Template>MSGRIDA1.DOT</o:Template>
  <o:LastAuthor>Randall Hyde</o:LastAuthor>
  <o:Revision>2</o:Revision>
  <o:TotalTime>736</o:TotalTime>
  <o:LastPrinted>1992-10-29T23:12:00Z</o:LastPrinted>
  <o:Created>2001-09-06T23:34:00Z</o:Created>
  <o:LastSaved>2001-09-06T23:34:00Z</o:LastSaved>
  <o:Pages>15</o:Pages>
  <o:Words>8650</o:Words>
  <o:Characters>57151</o:Characters>
  <o:Company>Dell Computer Corporation</o:Company>
  <o:Version>9.3821</o:Version>
 </o:DocumentProperties>
</xml><![endif]-->
		<!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:PrintFractionalCharacterWidth/>
  <w:HideSpellingErrors/>
  <w:HideGrammaticalErrors/>
  <w:DoNotHyphenateCaps/>
  <w:DrawingGridHorizontalSpacing>6 pt</w:DrawingGridHorizontalSpacing>
  <w:DrawingGridVerticalSpacing>6 pt</w:DrawingGridVerticalSpacing>
  <w:DisplayVerticalDrawingGridEvery>0</w:DisplayVerticalDrawingGridEvery>
  <w:UseMarginsForDrawingGridOrigin/>
  <w:Compatibility>
   <w:PrintColBlack/>
   <w:ShowBreaksInFrames/>
   <w:SuppressSpBfAfterPgBrk/>
   <w:SwapBordersFacingPages/>
   <w:ConvMailMergeEsc/>
   <w:UsePrinterMetrics/>
   <w:FootnoteLayoutLikeWW8/>
   <w:ShapeLayoutLikeWW8/>
   <w:AlignTablesRowByRow/>
   <w:ForgetLastTabAlignment/>
   <w:NoSpaceRaiseLower/>
   <w:LayoutRawTableWidth/>
   <w:LayoutTableRowsApart/>
  </w:Compatibility>
 </w:WordDocument>
</xml><![endif]-->
		<![if !supportAnnotations]>
		<style id="dynCom" type="text/css"><!-- --></style>
		<script language="JavaScript"><!--
function msoCommentShow(anchor_id, com_id)
{
	if(msoBrowserCheck()) 
		{
		c = document.all(com_id);
		if (null != c)
			{
			a = document.all(anchor_id);
			var cw = c.offsetWidth;
			var ch = c.offsetHeight;
			var aw = a.offsetWidth;
			var ah = a.offsetHeight;
			var x  = a.offsetLeft;
			var y  = a.offsetTop;
			var el = a;
			while (el.tagName != "BODY") 
				{
				el = el.offsetParent;
				x = x + el.offsetLeft;
				y = y + el.offsetTop;
				}
			var bw = document.body.clientWidth;
			var bh = document.body.clientHeight;
			var bsl = document.body.scrollLeft;
			var bst = document.body.scrollTop;
			if (x + cw + ah / 2 > bw + bsl && x + aw - ah / 2 - cw >= bsl ) 
				{ c.style.left = x + aw - ah / 2 - cw; }
			else 
				{ c.style.left = x + ah / 2; }
			if (y + ch + ah / 2 > bh + bst && y + ah / 2 - ch >= bst ) 
				{ c.style.top = y + ah / 2 - ch; }
			else 
				{ c.style.top = y + ah / 2; }
			c.style.visibility = "visible";
}	}	}
function msoCommentHide(com_id) 
{
	if(msoBrowserCheck())
		{
		c = document.all(com_id);
		if (null != c)
		{
		c.style.visibility = "hidden";
		c.style.left = -1000;
		c.style.top = -1000;
		} } 
}
function msoBrowserCheck()
{
	ms = navigator.appVersion.indexOf("MSIE");
	vers = navigator.appVersion.substring(ms + 5, ms + 6);
	ie4 = (ms > 0) && (parseInt(vers) >= 4);
	return ie4;
}
if (msoBrowserCheck())
{
	document.styleSheets.dynCom.addRule(".msocomanchor","background: infobackground");
	document.styleSheets.dynCom.addRule(".msocomoff","display: none");
	document.styleSheets.dynCom.addRule(".msocomtxt","visibility: hidden");
	document.styleSheets.dynCom.addRule(".msocomtxt","position: absolute");
	document.styleSheets.dynCom.addRule(".msocomtxt","top: -1000");
	document.styleSheets.dynCom.addRule(".msocomtxt","left: -1000");
	document.styleSheets.dynCom.addRule(".msocomtxt","width: 33%");
	document.styleSheets.dynCom.addRule(".msocomtxt","background: infobackground");
	document.styleSheets.dynCom.addRule(".msocomtxt","color: infotext");
	document.styleSheets.dynCom.addRule(".msocomtxt","border-top: 1pt solid threedlightshadow");
	document.styleSheets.dynCom.addRule(".msocomtxt","border-right: 2pt solid threedshadow");
	document.styleSheets.dynCom.addRule(".msocomtxt","border-bottom: 2pt solid threedshadow");
	document.styleSheets.dynCom.addRule(".msocomtxt","border-left: 1pt solid threedlightshadow");
	document.styleSheets.dynCom.addRule(".msocomtxt","padding: 3pt 3pt 3pt 3pt");
}
// --></script>
		<![endif]>
		<style>
<!--
 /* Font Definitions */
@font-face
	{font-family:Times;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:0;
	mso-generic-font-family:roman;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:Helvetica-Narrow;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:"Arial Narrow";
	panose-1:2 11 5 6 2 2 2 3 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:647 0 0 0 159 0;}
@font-face
	{font-family:"Lucida Sans Typewriter";
	panose-1:2 11 5 9 3 5 4 3 2 4;
	mso-font-charset:0;
	mso-generic-font-family:modern;
	mso-font-pitch:fixed;
	mso-font-signature:3 0 0 0 1 0;}
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
h1
	{mso-style-parent:"";
	mso-style-next:Normal;
	margin-top:10.0pt;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:-1.25in;
	line-height:22.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-outline-level:1;
	font-size:20.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-font-kerning:0pt;
	mso-bidi-font-weight:normal;}
h2
	{mso-style-parent:"Heading 1";
	mso-style-next:Normal;
	margin-top:7.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:-1.25in;
	line-height:19.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-outline-level:2;
	font-size:17.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-bidi-font-weight:normal;}
h3
	{mso-style-parent:"Heading 1";
	mso-style-next:Normal;
	margin-top:4.0pt;
	margin-right:0in;
	margin-bottom:2.0pt;
	margin-left:0in;
	line-height:17.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-outline-level:3;
	font-size:15.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-bidi-font-weight:normal;}
h4
	{mso-style-parent:"Heading 1";
	mso-style-next:Normal;
	margin-top:3.0pt;
	margin-right:0in;
	margin-bottom:2.0pt;
	margin-left:0in;
	line-height:14.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-bidi-font-weight:normal;}
h5
	{mso-style-parent:"Heading 1";
	mso-style-next:Normal;
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:2.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:5;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-bidi-font-weight:normal;}
h6
	{mso-style-parent:"Heading 1";
	mso-style-next:H6p;
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	line-height:11.9pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:6;
	mso-element:frame;
	mso-element-frame-height:12.75pt;
	mso-element-frame-hspace:6.5pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:column;
	mso-element-top:.05pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-bidi-font-weight:normal;}
p.MsoToc1, li.MsoToc1, div.MsoToc1
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:2.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:right dotted 348.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoToc2, li.MsoToc2, div.MsoToc2
	{mso-style-parent:"TOC 1";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:2.0pt;
	margin-left:14.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:right dotted 348.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoToc3, li.MsoToc3, div.MsoToc3
	{mso-style-parent:"TOC 1";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:2.0pt;
	margin-left:28.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:right dotted 348.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoNormalIndent, li.MsoNormalIndent, div.MsoNormalIndent
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:14.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoCommentText, li.MsoCommentText, div.MsoCommentText
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:9.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:green;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{mso-style-parent:"";
	mso-style-next:"header rule";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:-1.25in;
	margin-bottom:.0001pt;
	line-height:10.5pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	tab-stops:right 348.0pt;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	line-height:7.0pt;
	mso-pagination:widow-orphan;
	mso-element:frame;
	mso-element-wrap:around;
	mso-element-anchor-vertical:page;
	mso-element-anchor-horizontal:page;
	mso-element-left:100.0pt;
	mso-element-top:735.15pt;
	mso-height-rule:exactly;
	font-size:5.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
span.MsoCommentReference
	{color:green;}
p.Wh, li.Wh, div.Wh
	{mso-style-name:Wh;
	mso-style-parent:Nh;
	mso-style-next:Np1;
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	line-height:11.9pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-element:frame;
	mso-element-frame-height:11.75pt;
	mso-element-frame-hspace:6.5pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:column;
	mso-element-top:.05pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:blue;
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Ws, li.Ws, div.Ws
	{mso-style-name:Ws;
	mso-style-parent:"";
	mso-style-next:Wh;
	margin-top:2.0pt;
	margin-right:1.5pt;
	margin-bottom:0in;
	margin-left:1.5pt;
	margin-bottom:.0001pt;
	line-height:4.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	border:none;
	mso-border-bottom-alt:double blue 2.25pt;
	padding:0in;
	mso-padding-alt:0in 0in 0in 0in;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:white;}
p.We, li.We, div.We
	{mso-style-name:We;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:1.5pt;
	margin-bottom:0in;
	margin-left:1.5pt;
	margin-bottom:.0001pt;
	line-height:10.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	border:none;
	mso-border-top-alt:double blue 2.25pt;
	padding:0in;
	mso-padding-alt:1.0pt 0in 0in 0in;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:white;}
p.Np1, li.Np1, div.Np1
	{mso-style-name:Np1;
	mso-style-parent:Np2;
	mso-style-next:Ne;
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Nh, li.Nh, div.Nh
	{mso-style-name:Nh;
	mso-style-parent:"";
	mso-style-next:Np1;
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	line-height:11.9pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-element:frame;
	mso-element-frame-height:11.75pt;
	mso-element-frame-hspace:6.5pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:column;
	mso-element-top:.05pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Ne, li.Ne, div.Ne
	{mso-style-name:Ne;
	mso-style-parent:"";
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:1.5pt;
	margin-bottom:2.0pt;
	margin-left:1.5pt;
	line-height:7.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	border:none;
	mso-border-top-alt:solid windowtext .75pt;
	padding:0in;
	mso-padding-alt:1.0pt 0in 0in 0in;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:white;}
p.Ns, li.Ns, div.Ns
	{mso-style-name:Ns;
	mso-style-parent:"";
	mso-style-next:Nh;
	margin-top:0in;
	margin-right:1.5pt;
	margin-bottom:0in;
	margin-left:1.5pt;
	margin-bottom:.0001pt;
	line-height:4.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	border:none;
	mso-border-bottom-alt:solid windowtext .75pt;
	padding:0in;
	mso-padding-alt:0in 0in 1.0pt 0in;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:white;}
p.Nhi, li.Nhi, div.Nhi
	{mso-style-name:Nhi;
	mso-style-parent:Nh;
	mso-style-next:Np1i;
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:14.0pt;
	margin-bottom:.0001pt;
	line-height:11.9pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-element:frame;
	mso-element-frame-height:11.75pt;
	mso-element-frame-hspace:6.5pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:column;
	mso-element-top:.05pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Nsi, li.Nsi, div.Nsi
	{mso-style-name:Nsi;
	mso-style-parent:Ns;
	mso-style-next:Nhi;
	margin-top:0in;
	margin-right:1.5pt;
	margin-bottom:0in;
	margin-left:15.5pt;
	margin-bottom:.0001pt;
	line-height:4.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	border:none;
	mso-border-bottom-alt:solid windowtext .75pt;
	padding:0in;
	mso-padding-alt:0in 0in 1.0pt 0in;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:white;}
p.Np1i, li.Np1i, div.Np1i
	{mso-style-name:Np1i;
	mso-style-parent:Np1;
	mso-style-next:Nei;
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:14.0pt;
	text-indent:-14.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Nei, li.Nei, div.Nei
	{mso-style-name:Nei;
	mso-style-parent:Ne;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:1.5pt;
	margin-bottom:0in;
	margin-left:15.5pt;
	margin-bottom:.0001pt;
	line-height:7.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	border:none;
	mso-border-top-alt:solid windowtext .75pt;
	padding:0in;
	mso-padding-alt:1.0pt 0in 0in 0in;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:white;}
p.Wsi, li.Wsi, div.Wsi
	{mso-style-name:Wsi;
	mso-style-parent:Ws;
	mso-style-next:Whi;
	margin-top:2.0pt;
	margin-right:1.5pt;
	margin-bottom:0in;
	margin-left:15.5pt;
	margin-bottom:.0001pt;
	line-height:4.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	border:none;
	mso-border-bottom-alt:double blue 2.25pt;
	padding:0in;
	mso-padding-alt:0in 0in 0in 0in;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:white;}
p.Whi, li.Whi, div.Whi
	{mso-style-name:Whi;
	mso-style-parent:Nhi;
	mso-style-next:Np1i;
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:14.0pt;
	margin-bottom:.0001pt;
	line-height:11.9pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-element:frame;
	mso-element-frame-height:11.75pt;
	mso-element-frame-hspace:6.5pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:column;
	mso-element-top:.05pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:blue;
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Wei, li.Wei, div.Wei
	{mso-style-name:Wei;
	mso-style-parent:We;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:1.5pt;
	margin-bottom:0in;
	margin-left:15.5pt;
	margin-bottom:.0001pt;
	line-height:7.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	border:none;
	mso-border-top-alt:double blue 2.25pt;
	padding:0in;
	mso-padding-alt:1.0pt 0in 0in 0in;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:white;}
p.Sbre, li.Sbre, div.Sbre
	{mso-style-name:Sbre;
	mso-style-parent:"";
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:-12.0pt;
	line-height:10.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Sbrh, li.Sbrh, div.Sbrh
	{mso-style-name:Sbrh;
	mso-style-parent:"";
	mso-style-next:Sbrp;
	margin-top:3.0pt;
	margin-right:14.0pt;
	margin-bottom:2.0pt;
	margin-left:14.0pt;
	line-height:14.0pt;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	background:#FFFFBA;
	mso-shading:windowtext;
	mso-pattern:gray-40 yellow;
	border:none;
	mso-border-alt:solid white 1.5pt;
	padding:0in;
	mso-padding-alt:14.0pt 14.0pt 14.0pt 14.0pt;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Sbrs, li.Sbrs, div.Sbrs
	{mso-style-name:Sbrs;
	mso-style-parent:"";
	mso-style-next:Sbrh;
	margin-top:0in;
	margin-right:14.0pt;
	margin-bottom:0in;
	margin-left:14.0pt;
	margin-bottom:.0001pt;
	line-height:5.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:4.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Tt, li.Tt, div.Tt
	{mso-style-name:Tt;
	mso-style-parent:"";
	mso-style-next:Th;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Th, li.Th, div.Th
	{mso-style-name:Th;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:12.0pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Tp, li.Tp, div.Tp
	{mso-style-name:Tp;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:12.0pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:14.0pt 28.0pt;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Te, li.Te, div.Te
	{mso-style-name:Te;
	mso-style-next:Normal;
	margin-top:4.0pt;
	margin-right:1.5pt;
	margin-bottom:4.0pt;
	margin-left:1.5pt;
	text-align:right;
	line-height:9.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	border:none;
	mso-border-top-alt:solid windowtext .75pt;
	padding:0in;
	mso-padding-alt:1.0pt 0in 0in 0in;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Le, li.Le, div.Le
	{mso-style-name:Le;
	mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	text-align:right;
	line-height:8.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.H6p, li.H6p, div.H6p
	{mso-style-name:H6p;
	mso-style-next:Normal;
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Ttw, li.Ttw, div.Ttw
	{mso-style-name:Ttw;
	mso-style-parent:Tt;
	mso-style-next:Th;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:-1.25in;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.ih, li.ih, div.ih
	{mso-style-name:ih;
	mso-style-parent:"";
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:21.0pt;
	margin-left:-1.25in;
	line-height:30.0pt;
	mso-line-height-rule:exactly;
	page-break-before:always;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:24.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Ch, li.Ch, div.Ch
	{mso-style-name:Ch;
	mso-style-parent:"";
	mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	line-height:27.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-element:frame;
	mso-element-frame-width:336.0pt;
	mso-element-frame-height:123.0pt;
	mso-element-wrap:no-wrap-beside;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:margin;
	mso-element-left:-1.25in;
	mso-element-top:.05pt;
	mso-height-rule:exactly;
	font-size:24.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Ln1, li.Ln1, div.Ln1
	{mso-style-name:Ln1;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:14.0pt;
	text-indent:-22.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:right 8.0pt left 14.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Lb1, li.Lb1, div.Lb1
	{mso-style-name:Lb1;
	mso-style-parent:Ln1;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:14.0pt;
	text-indent:-14.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:14.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Ex, li.Ex, div.Ex
	{mso-style-name:Ex;
	mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:19.0pt 38.0pt 57.0pt 76.0pt 95.0pt 114.0pt 133.0pt 152.0pt 171.0pt 190.0pt;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Lucida Sans Typewriter";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.Proch, li.Proch, div.Proch
	{mso-style-name:Proch;
	mso-style-parent:"";
	mso-style-next:Ln1;
	margin-top:4.0pt;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:0in;
	text-indent:-.25in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:0in;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Hn1, li.Hn1, div.Hn1
	{mso-style-name:Hn1;
	mso-style-parent:"Heading 1";
	mso-style-next:Normal;
	margin-top:10.0pt;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:-1.25in;
	line-height:22.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-outline-level:1;
	font-size:20.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Hn2, li.Hn2, div.Hn2
	{mso-style-name:Hn2;
	mso-style-parent:"Heading 2";
	mso-style-next:Normal;
	margin-top:7.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:-1.25in;
	line-height:19.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-outline-level:2;
	font-size:17.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Mp, li.Mp, div.Mp
	{mso-style-name:Mp;
	mso-style-parent:"";
	mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-element:frame;
	mso-element-frame-width:78.0pt;
	mso-element-frame-hspace:12.0pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:page;
	mso-element-top:.05pt;
	mso-height-rule:exactly;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.Lp1, li.Lp1, div.Lp1
	{mso-style-name:Lp1;
	mso-style-parent:Ln1;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:14.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:right 8.0pt left 14.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Np2, li.Np2, div.Np2
	{mso-style-name:Np2;
	mso-style-next:Ne;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Erm, li.Erm, div.Erm
	{mso-style-name:Erm;
	mso-style-next:Erp;
	margin-top:5.0pt;
	margin-right:12.0pt;
	margin-bottom:2.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Erp, li.Erp, div.Erp
	{mso-style-name:Erp;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:5.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Cn, li.Cn, div.Cn
	{mso-style-name:Cn;
	mso-style-parent:"";
	mso-style-next:Ch;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:14.0pt;
	margin-left:-1.25in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	text-transform:uppercase;
	letter-spacing:6.0pt;}
p.Lb2, li.Lb2, div.Lb2
	{mso-style-name:Lb2;
	mso-style-parent:Lb1;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:28.0pt;
	text-indent:-14.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:28.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Exl, li.Exl, div.Exl
	{mso-style-name:Exl;
	mso-style-parent:Ex;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:14.0pt;
	margin-bottom:.0001pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:33.0pt 52.0pt 71.0pt 1.25in 109.0pt 128.0pt 147.0pt 166.0pt 185.0pt 204.0pt;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Lucida Sans Typewriter";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.Cap, li.Cap, div.Cap
	{mso-style-name:Cap;
	mso-style-parent:"";
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:12.0pt;
	margin-left:0in;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:14.0pt 28.0pt;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Ln2, li.Ln2, div.Ln2
	{mso-style-name:Ln2;
	mso-style-parent:Ln1;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:28.0pt;
	text-indent:-30.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:right 22.0pt left 28.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Lp2, li.Lp2, div.Lp2
	{mso-style-name:Lp2;
	mso-style-parent:Lp1;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:28.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:right 8.0pt left 14.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Rh1, li.Rh1, div.Rh1
	{mso-style-name:Rh1;
	mso-style-parent:"Heading 1";
	mso-style-next:Rmh;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:13.0pt;
	margin-left:-1.25in;
	line-height:22.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:1;
	font-size:20.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Rmh, li.Rmh, div.Rmh
	{mso-style-name:Rmh;
	mso-style-parent:"";
	mso-style-next:Normal;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-element:frame;
	mso-element-frame-width:78.0pt;
	mso-element-frame-hspace:12.0pt;
	mso-element-frame-vspace:12.0pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:page;
	mso-element-top:.05pt;
	mso-height-rule:exactly;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.headerrule, li.headerrule, div.headerrule
	{mso-style-name:"header rule";
	mso-style-parent:"";
	mso-style-next:Normal;
	margin-top:2.5pt;
	margin-right:1.5pt;
	margin-bottom:0in;
	margin-left:-88.5pt;
	margin-bottom:.0001pt;
	line-height:4.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	border:none;
	mso-border-top-alt:solid blue .75pt;
	padding:0in;
	mso-padding-alt:0in 0in 0in 0in;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Ermn, li.Ermn, div.Ermn
	{mso-style-name:Ermn;
	mso-style-parent:Erm;
	margin-top:1.0pt;
	margin-right:12.0pt;
	margin-bottom:3.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Sbrp, li.Sbrp, div.Sbrp
	{mso-style-name:Sbrp;
	mso-style-parent:"";
	mso-style-next:Sbre;
	margin-top:0in;
	margin-right:14.0pt;
	margin-bottom:8.0pt;
	margin-left:14.0pt;
	line-height:12.0pt;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	background:#FFFFBA;
	mso-shading:windowtext;
	mso-pattern:gray-40 yellow;
	border:none;
	mso-border-alt:solid white 1.5pt;
	padding:0in;
	mso-padding-alt:14.0pt 14.0pt 14.0pt 14.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Hn3, li.Hn3, div.Hn3
	{mso-style-name:Hn3;
	mso-style-parent:"Heading 3";
	mso-style-next:Normal;
	margin-top:4.0pt;
	margin-right:0in;
	margin-bottom:2.0pt;
	margin-left:0in;
	line-height:17.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-outline-level:3;
	font-size:15.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Term1, li.Term1, div.Term1
	{mso-style-name:Term1;
	mso-style-parent:"";
	mso-style-next:Def1;
	margin:0in;
	margin-bottom:.0001pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Lbp, li.Lbp, div.Lbp
	{mso-style-name:Lbp;
	mso-style-parent:Lb1;
	mso-style-next:Le;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:14.0pt;
	text-indent:-14.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:14.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Np2i, li.Np2i, div.Np2i
	{mso-style-name:Np2i;
	mso-style-parent:Np2;
	mso-style-next:Nei;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:14.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Term2, li.Term2, div.Term2
	{mso-style-name:Term2;
	mso-style-parent:Term1;
	mso-style-next:Def2;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:14.0pt;
	margin-bottom:.0001pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Def1, li.Def1, div.Def1
	{mso-style-name:Def1;
	mso-style-next:Term1;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:14.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Def2, li.Def2, div.Def2
	{mso-style-name:Def2;
	mso-style-parent:Def1;
	mso-style-next:Term2;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:28.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Rule, li.Rule, div.Rule
	{mso-style-name:Rule;
	mso-style-parent:"";
	mso-style-next:Rh1;
	margin-top:14.0pt;
	margin-right:1.5pt;
	margin-bottom:8.0pt;
	margin-left:-88.5pt;
	line-height:6.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	border:none;
	mso-border-bottom-alt:solid windowtext .75pt;
	padding:0in;
	mso-padding-alt:0in 0in 0in 0in;
	font-size:4.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:white;}
p.Exw, li.Exw, div.Exw
	{mso-style-name:Exw;
	mso-style-parent:Ex;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:-1.25in;
	margin-bottom:.0001pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:-71.0pt -52.0pt -33.0pt -14.0pt 5.0pt 24.0pt 43.0pt 62.0pt 81.0pt 100.0pt;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Lucida Sans Typewriter";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.Syn, li.Syn, div.Syn
	{mso-style-name:Syn;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:14.0pt 21.0pt 28.0pt 35.0pt 42.0pt 49.0pt 56.0pt 63.0pt 70.0pt 77.0pt 84.0pt 91.0pt 98.0pt 105.0pt 112.0pt 119.0pt 1.75in 133.0pt 140.0pt 147.0pt 154.0pt 161.0pt 168.0pt 175.0pt 182.0pt 189.0pt 196.0pt 203.0pt 210.0pt 217.0pt 224.0pt 231.0pt 238.0pt 245.0pt 3.5in 259.0pt 266.0pt 273.0pt 280.0pt 287.0pt 294.0pt 301.0pt 308.0pt 315.0pt 322.0pt 329.0pt 336.0pt 343.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Synw, li.Synw, div.Synw
	{mso-style-name:Synw;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:-1.25in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:-76.0pt -62.0pt -48.0pt -34.0pt -20.0pt -6.0pt 8.0pt 14.0pt 21.0pt 28.0pt 35.0pt 42.0pt 49.0pt 56.0pt 63.0pt 70.0pt 77.0pt 84.0pt 91.0pt 98.0pt 105.0pt 112.0pt 119.0pt 1.75in 133.0pt 140.0pt 147.0pt 154.0pt 161.0pt 168.0pt 175.0pt 182.0pt 189.0pt 196.0pt 203.0pt 210.0pt 217.0pt 224.0pt 231.0pt 238.0pt 245.0pt 3.5in 259.0pt 266.0pt 273.0pt 280.0pt 287.0pt 294.0pt 301.0pt 308.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Leh, li.Leh, div.Leh
	{mso-style-name:Leh;
	mso-style-parent:Le;
	mso-style-next:"Heading 1";
	margin:0in;
	margin-bottom:.0001pt;
	text-align:right;
	line-height:4.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Lmc, li.Lmc, div.Lmc
	{mso-style-name:Lmc;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Pb, li.Pb, div.Pb
	{mso-style-name:Pb;
	mso-style-parent:"";
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:-14.0pt;
	margin-bottom:.0001pt;
	line-height:4.0pt;
	mso-line-height-rule:exactly;
	page-break-before:always;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-element:frame;
	mso-element-frame-hspace:9.0pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:page;
	mso-element-top:.05pt;
	mso-height-rule:exactly;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Procp, li.Procp, div.Procp
	{mso-style-name:Procp;
	mso-style-next:Ln1;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Tpi, li.Tpi, div.Tpi
	{mso-style-name:Tpi;
	mso-style-parent:Tp;
	mso-style-next:Tp;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:26.0pt;
	text-indent:-14.0pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:26.0pt;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Tpr, li.Tpr, div.Tpr
	{mso-style-name:Tpr;
	mso-style-parent:Tp;
	mso-style-next:Tp;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:12.0pt;
	text-align:right;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Texf, li.Texf, div.Texf
	{mso-style-name:Texf;
	mso-style-parent:Ex;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:19.0pt 38.0pt 57.0pt 76.0pt 95.0pt;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Lucida Sans Typewriter";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.Tf, li.Tf, div.Tf
	{mso-style-name:Tf;
	mso-style-parent:Tp;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:2.0pt;
	margin-left:7.0pt;
	text-indent:-7.0pt;
	line-height:10.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:14.0pt;
	font-size:8.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Tpf, li.Tpf, div.Tpf
	{mso-style-name:Tpf;
	mso-style-parent:Tp;
	mso-style-next:Tp;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:14.0pt 28.0pt;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Tew, li.Tew, div.Tew
	{mso-style-name:Tew;
	mso-style-parent:Te;
	mso-style-next:Normal;
	margin-top:4.0pt;
	margin-right:1.5pt;
	margin-bottom:4.0pt;
	margin-left:-88.5pt;
	text-align:right;
	line-height:9.0pt;
	mso-pagination:widow-orphan lines-together;
	border:none;
	mso-border-top-alt:solid windowtext .75pt;
	padding:0in;
	mso-padding-alt:1.0pt 0in 0in 0in;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Art, li.Art, div.Art
	{mso-style-name:Art;
	mso-style-parent:"";
	mso-style-next:Cap;
	margin-top:4.0pt;
	margin-right:0in;
	margin-bottom:12.0pt;
	margin-left:-1.25in;
	mso-pagination:widow-orphan lines-together;
	tab-stops:0in 14.0pt 28.0pt;
	font-size:14.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Thf, li.Thf, div.Thf
	{mso-style-name:Thf;
	mso-style-parent:Th;
	mso-style-next:Th;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Tpif, li.Tpif, div.Tpif
	{mso-style-name:Tpif;
	mso-style-parent:Tpi;
	mso-style-next:Tp;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:14.0pt;
	text-indent:-14.0pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:14.0pt;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Tr, li.Tr, div.Tr
	{mso-style-name:Tr;
	mso-style-parent:"";
	mso-style-next:Tpf;
	margin:0in;
	margin-bottom:.0001pt;
	text-align:right;
	line-height:1.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	border:none;
	mso-border-top-alt:solid windowtext .75pt;
	padding:0in;
	mso-padding-alt:0in 0in 0in 0in;
	font-size:4.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Ph, li.Ph, div.Ph
	{mso-style-name:Ph;
	mso-style-parent:Ch;
	mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	line-height:32.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-element:frame;
	mso-element-frame-width:336.0pt;
	mso-element-frame-height:123.0pt;
	mso-element-frame-hspace:9.0pt;
	mso-element-wrap:no-wrap-beside;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:margin;
	mso-element-left:-1.25in;
	mso-element-top:.15pt;
	mso-height-rule:exactly;
	font-size:30.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:blue;}
p.index, li.index, div.index
	{mso-style-name:index;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:fuchsia;
	display:none;
	mso-hide:all;}
p.CapSd, li.CapSd, div.CapSd
	{mso-style-name:CapSd;
	mso-style-parent:Cap;
	margin:0in;
	margin-bottom:.0001pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:right 78.0pt;
	mso-element:frame;
	mso-element-frame-width:78.0pt;
	mso-element-frame-hspace:12.0pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:page;
	mso-element-top:.05pt;
	mso-height-rule:exactly;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.ArtSd, li.ArtSd, div.ArtSd
	{mso-style-name:ArtSd;
	mso-style-parent:Art;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:12.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:right 78.0pt;
	mso-element:frame;
	mso-element-frame-width:78.0pt;
	mso-element-frame-hspace:12.0pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:page;
	mso-element-top:.05pt;
	mso-height-rule:exactly;
	font-size:14.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Tex, li.Tex, div.Tex
	{mso-style-name:Tex;
	mso-style-parent:Texf;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:12.0pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:31.0pt 50.0pt 69.0pt 88.0pt 107.0pt;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Lucida Sans Typewriter";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.hb1, li.hb1, div.hb1
	{mso-style-name:*hb1;
	mso-style-parent:"Heading 4";
	mso-style-next:"Heading 4";
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:2.0pt;
	margin-left:0in;
	text-align:center;
	line-height:17.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-outline-level:4;
	background:#9C9CFF;
	mso-shading:windowtext;
	mso-pattern:gray-60 blue;
	mso-element:frame;
	mso-element-frame-width:75.0pt;
	mso-element-frame-hspace:12.0pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:margin;
	mso-element-left:-1.25in;
	mso-element-top:.05pt;
	mso-height-rule:exactly;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:white;
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.hb2, li.hb2, div.hb2
	{mso-style-name:*hb2;
	mso-style-parent:*hb1;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:1.0pt;
	margin-left:0in;
	text-indent:4.0pt;
	line-height:18.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-outline-level:4;
	background:#9C9CFF;
	mso-shading:windowtext;
	mso-pattern:gray-60 blue;
	mso-element:frame;
	mso-element-frame-hspace:12.0pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:margin;
	mso-element-left:right;
	mso-element-top:.1pt;
	mso-height-rule:exactly;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:white;
	mso-text-raise:1.5pt;
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Cbx, li.Cbx, div.Cbx
	{mso-style-name:*Cbx;
	mso-style-parent:"";
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:2.0pt;
	margin-left:8.0pt;
	line-height:10.5pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:22.0pt;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.Cbxe, li.Cbxe, div.Cbxe
	{mso-style-name:*Cbxe;
	mso-style-parent:Te;
	margin-top:0in;
	margin-right:1.5pt;
	margin-bottom:4.0pt;
	margin-left:-9.0pt;
	line-height:10.5pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:lined 348.0pt;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Tart, li.Tart, div.Tart
	{mso-style-name:Tart;
	mso-style-parent:Tp;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan lines-together;
	tab-stops:12.0pt 14.0pt 28.0pt;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Sbrh2, li.Sbrh2, div.Sbrh2
	{mso-style-name:Sbrh2;
	mso-style-parent:"Heading 5";
	mso-style-next:Sbrp;
	margin-top:2.0pt;
	margin-right:14.0pt;
	margin-bottom:2.0pt;
	margin-left:14.0pt;
	line-height:12.0pt;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-outline-level:5;
	background:#FFFFBA;
	mso-shading:windowtext;
	mso-pattern:gray-40 yellow;
	border:none;
	mso-border-alt:solid white 1.5pt;
	padding:0in;
	mso-padding-alt:14.0pt 14.0pt 14.0pt 14.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.SbrLb, li.SbrLb, div.SbrLb
	{mso-style-name:SbrLb;
	mso-style-parent:Lb2;
	margin-top:0in;
	margin-right:14.0pt;
	margin-bottom:4.0pt;
	margin-left:28.0pt;
	text-indent:-14.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:28.0pt;
	background:#FFFFBA;
	mso-shading:windowtext;
	mso-pattern:gray-40 yellow;
	border:none;
	mso-border-alt:solid white 1.5pt;
	padding:0in;
	mso-padding-alt:14.0pt 14.0pt 14.0pt 14.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Tei, li.Tei, div.Tei
	{mso-style-name:Tei;
	margin-top:4.0pt;
	margin-right:1.5pt;
	margin-bottom:4.0pt;
	margin-left:15.5pt;
	text-align:right;
	line-height:9.0pt;
	mso-pagination:widow-orphan lines-together;
	border:none;
	mso-border-top-alt:solid windowtext .75pt;
	padding:0in;
	mso-padding-alt:1.0pt 0in 0in 0in;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.SbrLp, li.SbrLp, div.SbrLp
	{mso-style-name:SbrLp;
	mso-style-parent:SbrLb;
	margin-top:0in;
	margin-right:14.0pt;
	margin-bottom:4.0pt;
	margin-left:28.0pt;
	text-indent:-14.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:28.0pt;
	background:#FFFFBA;
	mso-shading:windowtext;
	mso-pattern:gray-40 yellow;
	border:none;
	mso-border-alt:solid white 1.5pt;
	padding:0in;
	mso-padding-alt:14.0pt 14.0pt 14.0pt 14.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.SbrEx, li.SbrEx, div.SbrEx
	{mso-style-name:SbrEx;
	mso-style-parent:Exl;
	margin-top:0in;
	margin-right:14.0pt;
	margin-bottom:0in;
	margin-left:14.0pt;
	margin-bottom:.0001pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:33.0pt 52.0pt 71.0pt 1.25in 109.0pt 128.0pt 147.0pt 166.0pt 185.0pt 204.0pt;
	background:#FFFFBA;
	mso-shading:windowtext;
	mso-pattern:gray-40 yellow;
	border:none;
	mso-border-alt:solid white 1.5pt;
	padding:0in;
	mso-padding-alt:14.0pt 14.0pt 14.0pt 14.0pt;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Lucida Sans Typewriter";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.Exl2, li.Exl2, div.Exl2
	{mso-style-name:Exl2;
	mso-style-parent:Exl;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:28.0pt;
	margin-bottom:.0001pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:33.0pt 52.0pt 71.0pt 1.25in 109.0pt 128.0pt 147.0pt 166.0pt 185.0pt 204.0pt;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Lucida Sans Typewriter";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.Tes, li.Tes, div.Tes
	{mso-style-name:Tes;
	mso-style-parent:Le;
	mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	text-align:right;
	line-height:8.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Teh, li.Teh, div.Teh
	{mso-style-name:Teh;
	mso-style-parent:Leh;
	mso-style-next:"Heading 1";
	margin:0in;
	margin-bottom:.0001pt;
	text-align:right;
	line-height:4.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.SbrLe, li.SbrLe, div.SbrLe
	{mso-style-name:SbrLe;
	mso-style-parent:Le;
	mso-style-next:Sbrp;
	margin-top:0in;
	margin-right:14.0pt;
	margin-bottom:0in;
	margin-left:14.0pt;
	margin-bottom:.0001pt;
	text-align:right;
	line-height:8.0pt;
	mso-pagination:widow-orphan lines-together;
	background:#FFFFBA;
	mso-shading:windowtext;
	mso-pattern:gray-40 yellow;
	border:none;
	mso-border-alt:solid white 1.5pt;
	padding:0in;
	mso-padding-alt:14.0pt 14.0pt 14.0pt 14.0pt;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Tsyn, li.Tsyn, div.Tsyn
	{mso-style-name:Tsyn;
	mso-style-parent:Syn;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:14.0pt 21.0pt 28.0pt 35.0pt 42.0pt 49.0pt 56.0pt 63.0pt 70.0pt 77.0pt 84.0pt 91.0pt 98.0pt 105.0pt 112.0pt 119.0pt 1.75in 133.0pt 140.0pt 147.0pt 154.0pt 161.0pt 168.0pt 175.0pt 182.0pt 189.0pt 196.0pt 203.0pt 210.0pt 217.0pt 224.0pt 231.0pt 238.0pt 245.0pt 3.5in 259.0pt 266.0pt 273.0pt 280.0pt 287.0pt 294.0pt 301.0pt 308.0pt 315.0pt 322.0pt 329.0pt 336.0pt 343.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
 /* Page Definitions */
@page
	{mso-facing-pages:yes;}
@page Section1
	{size:8.5in 11.0in;
	margin:-127.0pt 76.5pt -115.0pt 166.5pt;
	mso-header-margin:99.35pt;
	mso-footer-margin:.25in;
	mso-gutter-margin:21.0pt;
	mso-page-numbers:307;
	mso-title-page:yes;
	mso-even-header:url("./Chap_12_files/header.htm") eh1;
	mso-header:url("./Chap_12_files/header.htm") h1;
	mso-even-footer:url("./Chap_12_files/header.htm") ef1;
	mso-footer:url("./Chap_12_files/header.htm") f1;
	mso-first-header:url("./Chap_12_files/header.htm") fh1;
	mso-first-footer:url("./Chap_12_files/header.htm") ff1;
	mso-paper-source:1;}
div.Section1
	{page:Section1;}
@page Section2
	{size:8.5in 11.0in;
	margin:-127.0pt 76.5pt -115.0pt 166.5pt;
	mso-header-margin:99.35pt;
	mso-footer-margin:.25in;
	mso-gutter-margin:21.0pt;
	mso-page-numbers:334;
	mso-even-header:url("./Chap_12_files/header.htm") eh2;
	mso-header:url("./Chap_12_files/header.htm") h1;
	mso-even-footer:url("./Chap_12_files/header.htm") ef1;
	mso-footer:url("./Chap_12_files/header.htm") f1;
	mso-first-header:url("./Chap_12_files/header.htm") fh1;
	mso-first-footer:url("./Chap_12_files/header.htm") ff1;
	mso-paper-source:1;}
div.Section2
	{page:Section2;}
-->
</style>
	</head>

	<body lang="EN-US" style="tab-interval:13.7pt">
		<div class="Section1">
			<p class="Cn" style="margin-left:0in">Chapter <span style='mso-field-code:"SEQ CHAPTER \\R 12"'>12</span></p>
			<div style="mso-element:frame;mso-element-wrap:no-wrap-beside">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" width="448" height="164">
					<tr>
						<td valign="top" align="left" height="164" style="padding-top:0in;padding-right:
  0in;padding-bottom:0in;padding-left:0in">
							<p class="Ch">Mixed-Language Programming</p>
						</td>
					</tr>
				</table>
			</div>
			<![if !supportTextWrap]><br clear="ALL">
			<![endif]>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Mixed-language programming:overview&quot;<span style='mso-hide:none'> \z
&quot;MIXEDW.DOC-1001&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Programs:mixed-language&quot;<span
style='mso-hide:none'> \z &quot;MIXEDW.DOC-1002&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Mixed-language programming allows you to combine the unique strengths of Microsoft Basic, C, C++, and FORTRAN with your assembly-language routines. Any one of these languages can call MASM routines, and you can call any of these languages from within your assembly-language programs. This makes virtually all the routines from high-level&#150;language libraries available to a mixed-language program.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;MIXEDW.DOC-1122&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">MASM 6.1 provides mixed-language features similar to those in high-level languages. For example, you can use the <b style="mso-bidi-font-weight:
normal">INVOKE</b> directive to call high-level-language procedures, and the assembler handles the argument-passing details for you. You can also use H2INC to translate C header files to MASM include files, as explained in Chapter 20 of <i style="mso-bidi-font-style:normal">Environment and Tools</i>.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;MIXEDW.DOC-1123&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The mixed-language features of MASM 6.1 do not make older methods of defining mixed-language interfaces obsolete. In most cases, mixed-language programs written with earlier versions of MASM will assemble and link correctly under MASM 6.1. (For more information, see Appendix A.)</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;MIXEDW.DOC-1124&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">This chapter explains how to write assembly routines that can be called from high-level&#150;language modules and how to call high-level language routines from MASM. You should already understand the languages you want to combine and should know how to write, compile, and link multiple-module programs with these languages.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;MIXEDW.DOC-1125&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">This chapter covers only assembly-language interface with C, C++, Basic, and FORTRAN; it does not cover mixed-language programming between high-level languages. The focus here is the Microsoft versions of C, C++, Basic, and FORTRAN, but the same principles apply to other languages and compilers. Many of the techniques used in this chapter are explained in the material in Chapter 7 on writing procedures in assembly language, and in Chapter 8 on multiple-module programming.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;MIXEDW.DOC-1126&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The first section of this chapter discusses naming and calling conventions. The next section, &#147;Writing an Assembly Procedure for a Mixed-Language Program,&#148; provides a template for writing an assembly-language procedure that can be called from another module written in a high-level language. This represents the essence of mixed-language programming. Assembly language is often used for creating fast secondary routines in a large program written in a high-level language.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;MIXEDW.DOC-1127&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The third section describes specific conventions for linking assembly-language procedures with modules in C, C++, Basic, and FORTRAN. These language-specific sections also provide details on how the language manages various data structures so that your MASM programs are compatible with the data from the high-level language.</p>
			<h1 style="margin-left:0in">Naming and Calling Conventions</h1>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;MIXEDW.DOC-1128&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Each language has its own set of conventions, which fall into two categories:</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Mixed-language programming:naming conventions&quot;<span
style='mso-hide:none'> \z &quot;MIXEDW.DOC-1003&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Mixed-language
programming:calling conventions:(list)&quot;<span style='mso-hide:none'> \z
&quot;MIXEDW.DOC-1004&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Naming
conventions:mixed-language programming&quot;<span style='mso-hide:none'> \z
&quot;MIXEDW.DOC-1005&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Calling
conventions:mixed-language programming&quot;<span style='mso-hide:none'> \z
&quot;MIXEDW.DOC-1006&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>The &#147;naming convention&#148; specifies how or if the compiler or assembler alters the name of an identifier before placing it into an object file.<span style="mso-spacerun: yes">&nbsp;&nbsp; </span></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;MIXEDW.DOC-1129&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>The &#147;calling convention&#148; determines how a language implements a call to a procedure and how the procedure returns to the caller.</p>
			<p class="Le"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;Calling conventions:SYSCALL&quot; \z &quot;MIXEDW.DOC-1007&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;SYSCALL calling
convention&quot; \z &quot;MIXEDW.DOC-1008&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;Calling
conventions:FORTRAN&quot; \z &quot;MIXEDW.DOC-1009&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;FORTRAN calling
convention&quot; \z &quot;MIXEDW.DOC-1010&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;Calling conventions:BASIC&quot;
\z &quot;MIXEDW.DOC-1011&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;BASIC calling convention&quot;
\z &quot;MIXEDW.DOC-1012&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Naming conventions:(list)&quot;<span
style='mso-hide:none'> \z &quot;MIXEDW.DOC-1013&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Calling
conventions:(list)&quot;<span style='mso-hide:none'> \z
&quot;MIXEDW.DOC-1014&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;OPTION directive:language
types, specifying&quot;<span style='mso-hide:none'> \z
&quot;MIXEDW.DOC-1015&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;.MODEL directive:language
types, specifying&quot;<span style='mso-hide:none'> \z
&quot;MIXEDW.DOC-1016&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">MASM supports several different conventions. The assembler uses C convention when you specify a language type (<i style="mso-bidi-font-style:
normal">langtype</i>) of <b style="mso-bidi-font-weight:normal">C</b>, and Pascal convention for language types <b style="mso-bidi-font-weight:normal">PASCAL</b>, <b style="mso-bidi-font-weight:normal">BASIC</b>, or <b style="mso-bidi-font-weight:
normal">FORTRAN</b>. To the assembler, the keywords <b style="mso-bidi-font-weight:
normal">BASIC</b>, <b style="mso-bidi-font-weight:normal">PASCAL</b>, and <b style="mso-bidi-font-weight:normal">FORTRAN</b> are synonymous. MASM also supports the <b style="mso-bidi-font-weight:normal">SYSCALL</b> and <b style="mso-bidi-font-weight:normal">STDCALL</b> conventions, which mix elements of the C and Pascal conventions.<span style="mso-spacerun: yes">&nbsp;&nbsp; </span></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;MIXEDW.DOC-1130&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">MASM gives you several ways to set the naming and calling conventions in your assembly-language program. Using <b style="mso-bidi-font-weight:
normal"><span style="font-size:9.0pt">.</span>MODEL</b> with a <i style="mso-bidi-font-style:normal">langtype</i> sets the default for the module. This can also be done with the <b style="mso-bidi-font-weight:normal">OPTION</b> directive. This is equivalent to the /Gc or /Gd option from the command line. Procedure prototypes and declarations can specify a <i style="mso-bidi-font-style:
normal">langtype</i> to override the default.</p>
			<p class="MsoNormal">When you write mixed-language routines, the easiest way to ensure convention compatibility is to adopt the conventions of the called procedure&#146;s language. However, Microsoft languages can change the naming and calling conventions for different procedures. If your program must call a procedure that uses an argument-passing method different from that of the default language, prototype the procedure first with the desired language type. This tells the assembler to override the conventions of the default language and assume the proper conventions for the prototyped procedure. &#147;The MASM/High-Level&#150;Language Interface&#148; section in this chapter explains how to change the default conventions. The following sections provide more detail on the information summarized in Table <span style='mso-field-code:"seq chapter \\c"'>12</span>.1.</p>
			<p class="Ttw" style="margin-left:0in">Table <!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-begin'></span>SEQ
chapter \c<span style='mso-element:field-separator'></span></span><![endif]-->
			<span style="font-family:Times">12</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-end'></span></span><![endif]-->
			 <span style="font-family:Times">.</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-begin'></span>SEQ
table<span style='mso-element:field-separator'></span></span><![endif]-->
			 <span style="font-family:Times">1</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-end'></span></span><![endif]-->
			 <span style="font-family:Helvetica-Narrow;letter-spacing:6.0pt"></span>Naming and Calling Conventions</p>
			<table border="0" cellspacing="0" cellpadding="0" style="margin-left:-89.6pt;
 border-collapse:collapse;mso-padding-alt:0in 0in 0in 0in">
				<tr>
					<td width="584" colspan="7" valign="top" style="width:437.8pt;padding:0in 0in 0in 0in">
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="75" valign="top" style="width:56.05pt;padding:0in 0in 0in 0in">
						<p class="Thf">Convention</p>
						<p class="Thf"></p>
					</td>
					<td width="81" valign="top" style="width:60.5pt;padding:0in 0in 0in 0in">
						<p class="Th">C</p>
						<p class="Th"></p>
					</td>
					<td width="86" valign="top" style="width:64.25pt;padding:0in 0in 0in 0in">
						<p class="Th">SYSCALL</p>
						<p class="Th"></p>
					</td>
					<td width="86" valign="top" style="width:64.25pt;padding:0in 0in 0in 0in">
						<p class="Th">STDCALL</p>
						<p class="Th"></p>
					</td>
					<td width="86" valign="top" style="width:64.25pt;padding:0in 0in 0in 0in">
						<p class="Th">BASIC</p>
						<p class="Th"></p>
					</td>
					<td width="86" valign="top" style="width:64.25pt;padding:0in 0in 0in 0in">
						<p class="Th">FORTRAN</p>
						<p class="Th"></p>
					</td>
					<td width="86" valign="top" style="width:64.25pt;padding:0in 0in 0in 0in">
						<p class="Th">PASCAL</p>
						<p class="Th"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
				</tr>
				<tr>
					<td width="584" colspan="7" valign="top" style="width:437.8pt;padding:0in 0in 0in 0in">
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="75" valign="top" style="width:56.05pt;padding:0in 0in 0in 0in">
						<p class="Tpf">Leading underscore</p>
						<p class="Tpf"></p>
					</td>
					<td width="81" valign="top" style="width:60.5pt;padding:0in 0in 0in 0in">
						<p class="Tp">X</p>
						<p class="Tp"></p>
					</td>
					<td width="86" valign="top" style="width:64.25pt;padding:0in 0in 0in 0in">
						<p class="Tp"></p>
						<p class="Tp"></p>
					</td>
					<td width="86" valign="top" style="width:64.25pt;padding:0in 0in 0in 0in">
						<p class="Tp">X</p>
						<p class="Tp"></p>
					</td>
					<td width="86" valign="top" style="width:64.25pt;padding:0in 0in 0in 0in">
						<p class="Tp"></p>
						<p class="Tp"></p>
					</td>
					<td width="86" valign="top" style="width:64.25pt;padding:0in 0in 0in 0in">
						<p class="Tp"></p>
						<p class="Tp"></p>
					</td>
					<td width="86" valign="top" style="width:64.25pt;padding:0in 0in 0in 0in">
						<p class="Tp"></p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="75" valign="top" style="width:56.05pt;padding:0in 0in 0in 0in">
						<p class="Tpf">Capitalize all</p>
						<p class="Tpf"></p>
					</td>
					<td width="81" valign="top" style="width:60.5pt;padding:0in 0in 0in 0in">
						<p class="Tp"></p>
						<p class="Tp"></p>
					</td>
					<td width="86" valign="top" style="width:64.25pt;padding:0in 0in 0in 0in">
						<p class="Tp"></p>
						<p class="Tp"></p>
					</td>
					<td width="86" valign="top" style="width:64.25pt;padding:0in 0in 0in 0in">
						<p class="Tp"></p>
						<p class="Tp"></p>
					</td>
					<td width="86" valign="top" style="width:64.25pt;padding:0in 0in 0in 0in">
						<p class="Tp">X</p>
						<p class="Tp"></p>
					</td>
					<td width="86" valign="top" style="width:64.25pt;padding:0in 0in 0in 0in">
						<p class="Tp">X</p>
						<p class="Tp"></p>
					</td>
					<td width="86" valign="top" style="width:64.25pt;padding:0in 0in 0in 0in">
						<p class="Tp">X</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="75" valign="top" style="width:56.05pt;padding:0in 0in 0in 0in">
						<p class="Tpf">Arguments pushed left to right</p>
						<p class="Tpf"></p>
					</td>
					<td width="81" valign="top" style="width:60.5pt;padding:0in 0in 0in 0in">
						<p class="Tp"></p>
						<p class="Tp"></p>
					</td>
					<td width="86" valign="top" style="width:64.25pt;padding:0in 0in 0in 0in">
						<p class="Tp"></p>
						<p class="Tp"></p>
					</td>
					<td width="86" valign="top" style="width:64.25pt;padding:0in 0in 0in 0in">
						<p class="Tp"></p>
						<p class="Tp"></p>
					</td>
					<td width="86" valign="top" style="width:64.25pt;padding:0in 0in 0in 0in">
						<p class="Tp">X</p>
						<p class="Tp"></p>
					</td>
					<td width="86" valign="top" style="width:64.25pt;padding:0in 0in 0in 0in">
						<p class="Tp">X</p>
						<p class="Tp"></p>
					</td>
					<td width="86" valign="top" style="width:64.25pt;padding:0in 0in 0in 0in">
						<p class="Tp">X</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="75" valign="top" style="width:56.05pt;padding:0in 0in 0in 0in">
						<p class="Tpf">Arguments pushed right to left</p>
						<p class="Tpf"></p>
					</td>
					<td width="81" valign="top" style="width:60.5pt;padding:0in 0in 0in 0in">
						<p class="Tp">X</p>
						<p class="Tp"></p>
					</td>
					<td width="86" valign="top" style="width:64.25pt;padding:0in 0in 0in 0in">
						<p class="Tp">X</p>
						<p class="Tp"></p>
					</td>
					<td width="86" valign="top" style="width:64.25pt;padding:0in 0in 0in 0in">
						<p class="Tp">X</p>
						<p class="Tp"></p>
					</td>
					<td width="86" valign="top" style="width:64.25pt;padding:0in 0in 0in 0in">
						<p class="Tp"></p>
						<p class="Tp"></p>
					</td>
					<td width="86" valign="top" style="width:64.25pt;padding:0in 0in 0in 0in">
						<p class="Tp"></p>
						<p class="Tp"></p>
					</td>
					<td width="86" valign="top" style="width:64.25pt;padding:0in 0in 0in 0in">
						<p class="Tp"></p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="75" valign="top" style="width:56.05pt;padding:0in 0in 0in 0in">
						<p class="Tpf">Caller stack cleanup</p>
						<p class="Tpf"></p>
					</td>
					<td width="81" valign="top" style="width:60.5pt;padding:0in 0in 0in 0in">
						<p class="Tp">X</p>
						<p class="Tp"></p>
					</td>
					<td width="86" valign="top" style="width:64.25pt;padding:0in 0in 0in 0in">
						<p class="Tp">X</p>
						<p class="Tp"></p>
					</td>
					<td width="86" valign="top" style="width:64.25pt;padding:0in 0in 0in 0in">
						<p class="Tp">*</p>
						<p class="Tp"></p>
					</td>
					<td width="86" valign="top" style="width:64.25pt;padding:0in 0in 0in 0in">
						<p class="Tp"></p>
						<p class="Tp"></p>
					</td>
					<td width="86" valign="top" style="width:64.25pt;padding:0in 0in 0in 0in">
						<p class="Tp"></p>
						<p class="Tp"></p>
					</td>
					<td width="86" valign="top" style="width:64.25pt;padding:0in 0in 0in 0in">
						<p class="Tp"></p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="75" valign="top" style="width:56.05pt;padding:0in 0in 0in 0in">
						<p class="Tpf">:VARARG allowed</p>
						<p class="Tpf"></p>
					</td>
					<td width="81" valign="top" style="width:60.5pt;padding:0in 0in 0in 0in">
						<p class="Tp">X</p>
						<p class="Tp"></p>
					</td>
					<td width="86" valign="top" style="width:64.25pt;padding:0in 0in 0in 0in">
						<p class="Tp">X</p>
						<p class="Tp"></p>
					</td>
					<td width="86" valign="top" style="width:64.25pt;padding:0in 0in 0in 0in">
						<p class="Tp">X</p>
						<p class="Tp"></p>
					</td>
					<td width="86" valign="top" style="width:64.25pt;padding:0in 0in 0in 0in">
						<p class="Tp"></p>
						<p class="Tp"></p>
					</td>
					<td width="86" valign="top" style="width:64.25pt;padding:0in 0in 0in 0in">
						<p class="Tp"></p>
						<p class="Tp"></p>
					</td>
					<td width="86" valign="top" style="width:64.25pt;padding:0in 0in 0in 0in">
						<p class="Tp"></p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="584" colspan="7" valign="top" style="width:437.8pt;padding:0in 0in 0in 0in">
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
			</table>
			<p class="Tf"><span style="font-size:9.5pt"><span style="mso-spacerun:
yes">&nbsp;</span></span>* The STDCALL language type uses caller stack cleanup if the :VARARG parameter is used. Otherwise, the called routine must clean up the stack.</p>
			<h2 style="margin-left:0in">Naming Conventions</h2>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;Calling conventions:SYSCALL&quot; \z &quot;MIXEDW.DOC-1017&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;SYSCALL calling
convention&quot; \z &quot;MIXEDW.DOC-1018&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;Calling
conventions:FORTRAN&quot; \z &quot;MIXEDW.DOC-1019&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;FORTRAN calling
convention&quot; \z &quot;MIXEDW.DOC-1020&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Mixed-language
programming:naming conventions&quot;<span style='mso-hide:none'> \z
&quot;MIXEDW.DOC-1021&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Calling
conventions:mixed-language programming&quot;<span style='mso-hide:none'> \z
&quot;MIXEDW.DOC-1022&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Naming
conventions:mixed-language programming&quot;<span style='mso-hide:none'> \z
&quot;MIXEDW.DOC-1023&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;SYSCALL convention&quot;<span
style='mso-hide:none'> \z &quot;MIXEDW.DOC-1024&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">&#147;Naming convention&#148; refers to the way a compiler or assembler stores the names of&nbsp;identifiers. The first two rows of Table <span style='mso-field-code:"seq chapter \\c"'>12</span>.1 show how each language type affects symbol names. <b style="mso-bidi-font-weight:normal">SYSCALL</b> leaves symbol names as they appear in the source code, but <b style="mso-bidi-font-weight:
normal">C</b> and <b style="mso-bidi-font-weight:normal">STDCALL</b> add an underscore prefix. <b style="mso-bidi-font-weight:normal">PASCAL</b>, <b style="mso-bidi-font-weight:normal">BASIC</b>, and <b style="mso-bidi-font-weight:
normal">FORTRAN</b> change symbols to all uppercase.<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span></p>
			<p class="MsoNormal">The following list describes how these naming conventions affect a variable called<b style="mso-bidi-font-weight:normal"> </b><span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>Big Time</span><b style="mso-bidi-font-weight:normal"> </b>in your source code:</p>
			<table border="0" cellspacing="0" cellpadding="0" style="margin-left:.4pt;border-collapse:
 collapse;mso-padding-alt:0in 0in 0in 0in">
				<tr>
					<td width="139" valign="top" style="width:104.35pt;padding:0in 0in 0in 0in">
						<p class="Thf">Langtype Specified</p>
						<p class="Thf"></p>
					</td>
					<td width="325" valign="top" style="width:243.55pt;padding:0in 0in 0in 0in">
						<p class="Th">Characteristics</p>
						<p class="Th"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="464" colspan="2" valign="top" style="width:347.9pt;padding:0in 0in 0in 0in">
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="139" valign="top" style="width:104.35pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">SYSCALL</span></b><span style="mso-spacerun: yes">&nbsp; </span></p>
						<p class="Tpf"></p>
					</td>
					<td width="325" valign="top" style="width:243.55pt;padding:0in 0in 0in 0in">
						<p class="Tp">Leaves the name unmodified. The linker sees the variable as<b style="mso-bidi-font-weight:normal"> </b><b style="mso-bidi-font-weight:normal"><span style='font-size:8.5pt;font-family:"Lucida Sans Typewriter"'><span style="mso-spacerun: yes">&nbsp;</span></span></b><span style='font-size:8.5pt;
  font-family:"Lucida Sans Typewriter"'>Big Time</span>.</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
				</tr>
				<tr>
					<td width="139" valign="top" style="width:104.35pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">C</span></b>, <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">STDCALL</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="325" valign="top" style="width:243.55pt;padding:0in 0in 0in 0in">
						<p class="Tp">The assembler (or compiler) adds a leading underscore to the name, but does not change case. The linker sees the variable as<span style="mso-spacerun: yes">&nbsp; </span><span style='font-size:8.5pt;font-family:
  "Lucida Sans Typewriter"'>_Big Time</span>.</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="139" valign="top" style="width:104.35pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">PASCAL</span></b>, <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">FORTRAN</span></b>, <b style="mso-bidi-font-weight:
  normal"><span style="font-size:9.0pt">BASIC</span></b><span style="mso-spacerun: yes">&nbsp;&nbsp; </span></p>
						<p class="Tpf"></p>
					</td>
					<td width="325" valign="top" style="width:243.55pt;padding:0in 0in 0in 0in">
						<p class="Tp">Converts all names to uppercase. The linker sees the variable as <span style='font-size:8.5pt;font-family:"Lucida Sans Typewriter"'><span style="mso-spacerun: yes">&nbsp;</span>Big Time</span>.</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
			</table>
			<p class="Le"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<h2 style="margin-left:0in">The C Calling Convention</h2>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Naming conventions:mixed-language programming&quot;<span
style='mso-hide:none'> \z &quot;MIXEDW.DOC-1025&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Calling conventions:C&quot;<span
style='mso-hide:none'> \z &quot;MIXEDW.DOC-1026&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;C convention&quot;<span
style='mso-hide:none'> \z &quot;MIXEDW.DOC-1027&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Specify the C language type for assembly-language procedures called from programs that assume the C calling convention. Note that such programs are not necessarily written in C, since other languages can mimic C conventions.<span style="mso-spacerun: yes">&nbsp;&nbsp; </span></p>
			<h4>Argument Passing</h4>
			<p class="MsoNormal">With the C calling convention, the caller pushes arguments from right to left as they appear in the caller&#146;s argument list. The called procedure returns without removing the arguments from the stack. It is the caller&#146;s responsibility to clean the stack after the call, either by popping the arguments or by adding an appropriate value to the stack pointer SP.</p>
			<h4>Register Preservation</h4>
			<p class="MsoNormal">The called routine must return with the original values in BP, SI, DI, DS, and SS. It must also preserve the direction flag.</p>
			<h4>Varying Number of Arguments</h4>
			<p class="MsoNormal">The additional overhead of cleaning the stack after each call has compensations. It frees the caller from having to pass a set number of arguments to the called procedure each time. Because the first argument in the list is always the last one pushed, it is always on the top of the stack. Thus, it has the same address relative to the frame pointer, regardless of how many arguments were actually passed.</p>
			<p class="MsoNormal">For example, consider the C library function <b style="mso-bidi-font-weight:normal">printf</b>, which accepts different numbers of arguments. A C program calls the function like this:</p>
			<p class="Ex">printf( &quot;Numbers:<span style="mso-spacerun: yes">&nbsp; </span>%f<span style="mso-spacerun: yes">&nbsp; </span>%f<span style="mso-spacerun:
yes">&nbsp; </span>%.2f\n&quot;, n1, n2, n3 );<br>
			printf( &quot;Also:<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>%f&quot;, n4 );<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="MsoNormal">The first line passes four arguments (including the string in quotes) and the second line passes only two arguments. Notice that <b style="mso-bidi-font-weight:normal">printf</b> has no reliable way of determining how many arguments the caller has pushed. Therefore, the function returns without adjusting the stack. The C calling convention requires the caller to take responsibility for removing the arguments from the stack, since only the caller knows how many arguments it passed.</p>
			<p class="MsoNormal">Use <b style="mso-bidi-font-weight:normal">INVOKE</b> to call a C-callable function from your assembly-language program, since <b style="mso-bidi-font-weight:normal">INVOKE</b> automatically generates the necessary stack-cleaning code after the call. You must also prototype the function with the <b style="mso-bidi-font-weight:normal">VARARG</b> keyword if appropriate, as explained in &#147;Procedures,&#148; Chapter 7. Similarly, when you write a C-callable procedure that accepts a varying number of arguments, include <b style="mso-bidi-font-weight:normal">VARARG</b> in the procedure&#146;s <b style="mso-bidi-font-weight:normal">PROC</b> statement.</p>
			<h2 style="margin-left:0in">The Pascal Calling Convention</h2>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;Calling conventions:BASIC&quot; \z &quot;MIXEDW.DOC-1028&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;BASIC calling convention&quot;
\z &quot;MIXEDW.DOC-1029&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;Calling
conventions:FORTRAN&quot; \z &quot;MIXEDW.DOC-1030&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;FORTRAN calling
convention&quot; \z &quot;MIXEDW.DOC-1031&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Mixed-language
programming:calling conventions:Pascal&quot;<span style='mso-hide:none'> \z
&quot;MIXEDW.DOC-1032&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Mixed-language
programming:calling conventions:Basic&quot;<span style='mso-hide:none'> \z
&quot;MIXEDW.DOC-1033&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Mixed-language
programming:calling conventions:FORTRAN&quot;<span style='mso-hide:none'> \z
&quot;MIXEDW.DOC-1034&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Calling
conventions:Pascal&quot;<span style='mso-hide:none'> \z
&quot;MIXEDW.DOC-1035&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Pascal convention&quot;<span
style='mso-hide:none'> \z &quot;MIXEDW.DOC-1036&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">By default, the <i style="mso-bidi-font-style:normal">langtype</i> for <b style="mso-bidi-font-weight:normal">FORTRAN</b>, <b style="mso-bidi-font-weight:
normal">BASIC</b>, and <b style="mso-bidi-font-weight:normal">PASCAL</b> selects the Pascal calling convention. This convention pushes arguments left to right so that the last argument is lowest on the stack, and it requires that the called routine remove arguments from the stack.</p>
			<h4>Argument Passing</h4>
			<p class="MsoNormal">Arguments are placed on the stack in the same order in which they appear in the source code. The first argument is highest in memory (because it is also the first argument to be placed on the stack), and the stack grows downward.</p>
			<h4>Register Preservation</h4>
			<p class="MsoNormal">A routine that uses the Pascal calling convention must preserve SI, DI, BP, DS, and SS. For 32-bit code, the EBX, ES, FS, and GS registers must be preserved as well as EBP, ESI, and EDI. The direction flag is also cleared upon entry and must be preserved.</p>
			<h4>Varying Number of Arguments</h4>
			<p class="MsoNormal">Passing a variable number of arguments is not possible with the Pascal calling convention.</p>
			<h2 style="margin-left:0in">The STDCALL and SYSCALL Calling Conventions</h2>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;Calling conventions:SYSCALL&quot; \z &quot;MIXEDW.DOC-1037&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;SYSCALL calling
convention&quot; \z &quot;MIXEDW.DOC-1038&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Mixed-language
programming:calling conventions:STDCALL&quot;<span style='mso-hide:none'> \z
&quot;MIXEDW.DOC-1039&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Calling
conventions:STDCALL&quot;<span style='mso-hide:none'> \z
&quot;MIXEDW.DOC-1040&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Mixed-language
programming:calling conventions:SYSCALL&quot;<span style='mso-hide:none'> \z
&quot;MIXEDW.DOC-1041&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Calling
conventions:SYSCALL&quot;<span style='mso-hide:none'> \z
&quot;MIXEDW.DOC-1042&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;SYSCALL convention&quot;<span
style='mso-hide:none'> \z &quot;MIXEDW.DOC-1043&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;STDCALL convention&quot;<span
style='mso-hide:none'> \z &quot;MIXEDW.DOC-1044&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">A <b style="mso-bidi-font-weight:normal">STDCALL</b> procedure adopts the C name and calling conventions when prototyped with the <b style="mso-bidi-font-weight:normal">VARARG</b> keyword. Refer to the section &#147;Declaring Parameters with the PROC Directive&#148; in Chapter 7. Without <b style="mso-bidi-font-weight:normal">VARARG</b>, the procedure uses the C naming and Pascal calling conventions. <b style="mso-bidi-font-weight:normal">STDCALL</b> provides compatibility with 32-bit versions of Microsoft compilers.<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
			<p class="MsoNormal">As Table <span style='mso-field-code:"seq chapter \\c"'>12</span>.1 shows, <b style="mso-bidi-font-weight:normal">SYSCALL</b> is identical to the C calling convention, but does not add an underscore prefix to symbols.</p>
			<h4>Argument Passing</h4>
			<p class="MsoNormal">Argument passing order for both <b style="mso-bidi-font-weight:
normal">STDCALL</b> and <b style="mso-bidi-font-weight:normal">SYSCALL</b> is the same as the C calling convention. The caller pushes the arguments from right to left and must remove the parameters from the stack after the call. However, <b style="mso-bidi-font-weight:normal">STDCALL</b> requires the called procedure to clean the stack if the procedure does not accept a variable number of arguments.</p>
			<h4>Register Preservation</h4>
			<p class="MsoNormal">Both conventions require the called procedure to preserve the registers BP, SI, DI, DS, and SS. Under <b style="mso-bidi-font-weight:
normal">STDCALL</b>, the direction flag is clear on entry and must be returned clear.</p>
			<h4>Varying Number of Arguments</h4>
			<p class="index"><!--[if supportFields]><span style='font-size:10.5pt;font-family:
"Times New Roman"'><span style='mso-element:field-begin'></span>xe
&quot;Calling conventions:SYSCALL&quot; \z &quot;MIXEDW.DOC-1045&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='font-size:10.5pt;font-family:"Times New Roman"'><span style='mso-element:
field-end'></span></span><![endif]-->
			<!--[if supportFields]><span
style='font-size:10.5pt;font-family:"Times New Roman"'><span style='mso-element:
field-begin'></span>xe &quot;SYSCALL calling convention&quot; \z
&quot;MIXEDW.DOC-1046&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='font-size:10.5pt;font-family:"Times New Roman"'><span style='mso-element:
field-end'></span></span><![endif]-->
			<!--[if supportFields]><span
style='font-size:10.5pt;font-family:"Times New Roman"'><span style='mso-element:
field-begin'></span>XE &quot;Calling conventions:STDCALL&quot;</span><span
style='font-size:10.5pt;font-family:"Times New Roman";mso-hide:none'> \z
&quot;MIXEDW.DOC-1047&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='font-size:10.5pt;font-family:"Times New Roman"'><span style='mso-element:
field-end'></span></span><![endif]-->
			<!--[if supportFields]><span
style='font-size:10.5pt;font-family:"Times New Roman"'><span style='mso-element:
field-begin'></span>XE &quot;STDCALL convention&quot;</span><span
style='font-size:10.5pt;font-family:"Times New Roman";mso-hide:none'> \z
&quot;MIXEDW.DOC-1048&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='font-size:10.5pt;font-family:"Times New Roman"'><span style='mso-element:
field-end'></span></span><![endif]-->
			<span style='font-size:10.5pt;font-family:
"Times New Roman"'><o:p></o:p></span></p>
			<p class="MsoNormal"><b style="mso-bidi-font-weight:normal">SYSCALL</b> allows a variable number of arguments in the same way as the C calling convention. <b style="mso-bidi-font-weight:normal">STDCALL</b> also mimics the C convention when <b style="mso-bidi-font-weight:normal">VARARG</b> appears in the called procedure&#146;s declaration or definition. It allows a varying number of arguments and requires the caller to clean the stack. If not declared or defined with <b style="mso-bidi-font-weight:normal">VARARG</b>, the called procedure does not accept a variable argument list and must clean the stack before it returns.</p>
			<h1 style="margin-left:0in">Writing an Assembly Procedure<br>
			For a Mixed-Language Program</h1>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Mixed-language programming:assembly procedures&quot;<span
style='mso-hide:none'> \z &quot;MIXEDW.DOC-1049&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE
&quot;Assembly:language:mixed-language programs&quot;<span style='mso-hide:
none'> \z &quot;MIXEDW.DOC-1050&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;PROTO directive:procedure
prototypes, writing&quot;<span style='mso-hide:none'> \z
&quot;MIXEDW.DOC-1051&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;INVOKE directive:mixed-language
programs&quot;<span style='mso-hide:none'> \z &quot;MIXEDW.DOC-1052&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe Directives:PROTO \t &quot;See PROTO
directive&quot;<span style='mso-hide:none'> \z &quot;MIXEDW.DOC-1053&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Directives:PROC&quot;<span
style='mso-hide:none'> \z &quot;MIXEDW.DOC-1054&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;PROC directive&quot;<span
style='mso-hide:none'> \z &quot;MIXEDW.DOC-1055&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Mixed-language
programming:INVOKE, using&quot;<span style='mso-hide:none'> \z
&quot;MIXEDW.DOC-1056&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">MASM 6.1 simplifies the coding required for linking MASM routines to high-level&#150;<span style="letter-spacing:-1.75pt"> </span>language routines. You can use the <b style="mso-bidi-font-weight:normal">PROTO</b> directive to write procedure prototypes, and the <b style="mso-bidi-font-weight:
normal">INVOKE</b> directive to call external routines. MASM simplifies procedure-related tasks in the following ways:<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;MIXEDW.DOC-1131&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>The <b style="mso-bidi-font-weight:normal">PROTO</b> directive improves error checking on argument types.</p>
			<p class="index"><!--[if supportFields]><b style='mso-bidi-font-weight:normal'><span
style='font-size:9.0pt'><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;MIXEDW.DOC-1132&quot;</span></b><![endif]-->
			<!--[if supportFields]><b
style='mso-bidi-font-weight:normal'><span style='font-size:9.0pt'><span
style='mso-element:field-end'></span></span></b><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><b style='mso-bidi-font-weight:normal'><span
style='font-size:9.5pt'><span style='mso-element:field-begin'></span>SYMBOL 117
\f &quot;MSIcons&quot; \s 9.5 \h </span></b><![endif]-->
			<!--[if supportFields]><b
style='mso-bidi-font-weight:normal'><span style='font-size:9.5pt'><span
style='mso-element:field-end'></span></span></b><![endif]-->
			<b style="mso-bidi-font-weight:normal"><span style="font-size:9.5pt"><span style="mso-tab-count:1">&nbsp; </span></span>INVOKE</b> pushes arguments onto the stack and converts argument types to types expected when possible. These arguments can be referenced by their parameter label, rather than as offsets of the stack pointer.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;MIXEDW.DOC-1133&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>The <b style="mso-bidi-font-weight:normal">LOCAL</b> directive following the <b style="mso-bidi-font-weight:normal">PROC</b> statement saves places on the stack for local variables. These variables can also be referenced by name, rather than as offsets of the stack pointer.</p>
			<p class="index"><!--[if supportFields]><b style='mso-bidi-font-weight:normal'><span
style='font-size:9.0pt'><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;MIXEDW.DOC-1134&quot;</span></b><![endif]-->
			<!--[if supportFields]><b
style='mso-bidi-font-weight:normal'><span style='font-size:9.0pt'><span
style='mso-element:field-end'></span></span></b><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><b style='mso-bidi-font-weight:normal'><span
style='font-size:9.5pt'><span style='mso-element:field-begin'></span>SYMBOL 117
\f &quot;MSIcons&quot; \s 9.5 \h </span></b><![endif]-->
			<!--[if supportFields]><b
style='mso-bidi-font-weight:normal'><span style='font-size:9.5pt'><span
style='mso-element:field-end'></span></span></b><![endif]-->
			<b style="mso-bidi-font-weight:normal"><span style="font-size:9.5pt"><span style="mso-tab-count:1">&nbsp; </span></span>PROC</b> sets up the appropriate stack frame according to the processor mode.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;MIXEDW.DOC-1135&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>The <b style="mso-bidi-font-weight:normal">USES</b> keyword preserves registers given as arguments.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;MIXEDW.DOC-1136&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>The C calling conventions specified in the <b style="mso-bidi-font-weight:
normal">PROC</b> syntax allow for a variable number of arguments to be passed to the procedure.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;MIXEDW.DOC-1137&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>The <b style="mso-bidi-font-weight:normal">RET</b> keyword adjusts the stack upward by the number of bytes in the argument list, removes local variables from the stack, and pops saved registers.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;MIXEDW.DOC-1138&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>The <b style="mso-bidi-font-weight:normal">PROC</b> statement lists parameter names and types. The parameters can be referenced by name inside the procedure.</p>
			<p class="Le"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<p class="MsoNormal">The complete syntax and parameter descriptions for these procedure directives are explained in &#147;Procedures&#148; in Chapter 7. This section provides a template that you can use for writing a MASM routine to be called from a high-level language.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Mixed-language programming:assembly procedures&quot;<span
style='mso-hide:none'> \z &quot;MIXEDW.DOC-1057&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The template looks like this:</p>
			<p class="MsoNormal"><i style="mso-bidi-font-style:normal">Label<span style="mso-tab-count:1"> </span></i><b style="mso-bidi-font-weight:normal">PROC</b> <span style="font-family:Times;letter-spacing:-1.5pt">[</span><span style="font-family:Times">[</span><i style="mso-bidi-font-style:normal">distance langtype visibility</i> &lt;<i style="mso-bidi-font-style:normal">prologueargs</i>&gt; <b style="mso-bidi-font-weight:normal">USES</b> <i style="mso-bidi-font-style:
normal">reglist parmlist</i><span style="font-family:Times;letter-spacing:-1.5pt">]</span><span style="font-family:Times">]</span><i style="mso-bidi-font-style:normal"><br>
			<span style="mso-tab-count:2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></i><b style="mso-bidi-font-weight:
normal">LOCAL</b> <i style="mso-bidi-font-style:normal">varlist</i><br>
			<span style="mso-tab-count:2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-tab-count:2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-tab-count:2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-tab-count:2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><b style="mso-bidi-font-weight:
normal">RET</b><br>
			<i style="mso-bidi-font-style:normal">Label<span style="mso-tab-count:1"> </span></i><b style="mso-bidi-font-weight:normal">ENDP</b></p>
			<p class="MsoNormal">Replace the italicized words with appropriate keywords, registers, or variables as defined by the syntax in &#147;Declaring Parameters with the <b style="mso-bidi-font-weight:normal">PROC</b> Directive&#148; in Chapter 7.</p>
			<p class="MsoNormal">The <i style="mso-bidi-font-style:normal">distance</i> (<b style="mso-bidi-font-weight:normal">NEAR</b> or <b style="mso-bidi-font-weight:
normal">FAR</b>) and <i style="mso-bidi-font-style:normal">visibility</i> (<b style="mso-bidi-font-weight:normal">PUBLIC</b>, <b style="mso-bidi-font-weight:
normal">PRIVATE</b>, or <b style="mso-bidi-font-weight:normal">EXPORT</b>) that you give in the procedure declaration override the current defaults. In some languages, the model can also be specified with command-line options.</p>
			<p class="MsoNormal">The <i style="mso-bidi-font-style:normal">langtype</i> determines the calling convention for accessing arguments and restoring the stack. For information on calling conventions, see &#147;Naming and Calling Conventions&#148; earlier in this chapter.</p>
			<p class="MsoNormal">The types for the parameters listed in the <i style="mso-bidi-font-style:normal">parmlist</i> must be given. Also, if any of the parameters are pointers, the assembler does not generate code to get the value of the pointer references. You must write this code yourself. An example of how to write such code is provided in &#147;Declaring Parameters with the PROC Directive&#148; in Chapter 7.</p>
			<p class="MsoNormal">If you need to code your own stack-frame setup manually, or if you do not want the assembler to generate the standard stack setup and cleanup, see &#147;Passing Arguments on the Stack&#148; and &#147;User-Defined Prologue and Epilogue Code&#148; in Chapter 7.</p>
			<h1 style="margin-left:0in">The MASM/High-Level&#150;Language Interface</h1>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Mixed-language programming:initialization code&quot;<span
style='mso-hide:none'> \z &quot;MIXEDW.DOC-1058&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Since high-level&#150;language programs require initialization, you must write the main routine of a mixed-language program in the high-level language, or link with the startup code supplied by the high-level&#150;language compiler. This gives the assembly code access to high-level routines or library functions. The next section explains how to link an assembly-language program with C-language startup code.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Mixed-language programming:INVOKE, using&quot;<span style='mso-hide:none'>
\z &quot;MIXEDW.DOC-1059&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">For procedures with prototypes, <b style="mso-bidi-font-weight:
normal">INVOKE</b> makes calls from MASM to high-level&#150;<br>
			language programs, much like procedure or function calls in the high-level language. <b style="mso-bidi-font-weight:normal">INVOKE</b> calls procedures and generates the code to push arguments in the order specified by the procedure&#146;s calling convention, and to remove arguments from the stack at the end of the procedure.</p>
			<p class="MsoNormal"><b style="mso-bidi-font-weight:normal">INVOKE</b> can also do type checking and data conversion for the argument types so that the procedure receives compatible data. For explanations of how to write procedure prototypes and several examples of procedure declarations and the corresponding prototypes, see &#147;Declaring Procedure Prototypes&#148; in Chapter 7.</p>
			<p class="MsoNormal">For programs that mix assembly language and C, the H2INC utility makes it easy to write prototypes and data declarations for the C procedures you want to call from MASM. H2INC translates the C prototypes and declarations into the corresponding MASM prototypes and declarations, which <b style="mso-bidi-font-weight:normal">INVOKE</b> can use to call the procedure. The use of H2INC is explained in Chapter 20 in <i style="mso-bidi-font-style:
normal">Environment and Tools</i>.</p>
			<p class="MsoNormal">Mixed-language programming also allows the main program or a routine to use external data<span style="letter-spacing:-1.75pt"> </span>&#151;<span style="letter-spacing:-1.75pt"> </span>data defined in the other module. External data is the data that is stored in a set place in memory (unlike dynamic and local data, which is allocated on the stack and heap) and is visible to other modules.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Mixed-language programming:external data&quot;<span style='mso-hide:none'>
\z &quot;MIXEDW.DOC-1060&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">External data is shared by all routines. One of the modules must define the static data, which causes the compiler to allocate storage for the data. The other modules that access the data must declare the data as external.</p>
			<h4>Argument Passing</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Mixed-language programming:argument passing&quot;<span style='mso-hide:
none'> \z &quot;MIXEDW.DOC-1061&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Arguments:mixed-language
programs, passing in&quot;<span style='mso-hide:none'> \z &quot;MIXEDW.DOC-1062&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Each language has its own convention for how an argument is actually passed. If the argument-passing conventions of your routines do not agree, then a called routine receives bad data. Microsoft languages support three different methods for passing an argument:<span style="mso-spacerun:
yes">&nbsp; </span></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;MIXEDW.DOC-1139&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>Near reference. Passes a variable&#146;s near (offset) address, expressed as an offset from the default data segment. This method gives the called routine direct access to the variable itself. Any change the routine makes to the parameter is reflected in the calling routine.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;MIXEDW.DOC-1140&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>Far reference. Passes a variable&#146;s far (segmented) address. Though slower than passing a near reference, this method is necessary for passing data that lies outside the default data segment. (This is not an issue in Basic unless you have specifically requested far memory.)</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;MIXEDW.DOC-1141&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>Value. Passes only a copy of the variable, not its address. With this method, the called routine gets a copy of the argument on the stack, but has no access to the original variable. The copy is discarded when the routine returns, and the variable retains its original value.</p>
			<p class="Le"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<p class="MsoNormal">When you pass arguments between routines written in different languages, you must ensure that the caller and the called routine use the same conventions for passing and receiving arguments. In most cases, you should check the argument-passing defaults used by each language and make any necessary adjustments. Most languages have features that allow you to change argument-passing methods.</p>
			<h4>Register Preservation</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Mixed-language programming:register preservation&quot;<span
style='mso-hide:none'> \z &quot;MIXEDW.DOC-1063&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">A procedure called from any high-level language should preserve the direction flag and the values of BP, SI, DI, SS, and DS. Routines called from MASM must not alter SI, DI, SS, DS, or BP.</p>
			<h4>Pushing Addresses</h4>
			<p class="MsoNormal">Microsoft high-level languages push segment addresses before offsets. This lets the called routine use the <b style="mso-bidi-font-weight:
normal">LES</b> and <b style="mso-bidi-font-weight:normal">LDS</b> instructions to read far addresses from the stack. Furthermore, each word of an argument is placed on the stack in order of significance. Thus, the high word of a long integer is pushed first, followed by the low word.</p>
			<h4>Array Storage</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Mixed-language programming:row-major order&quot;<span style='mso-hide:
none'> \z &quot;MIXEDW.DOC-1064&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Mixed-language
programming:column-major order&quot;<span style='mso-hide:none'> \z
&quot;MIXEDW.DOC-1065&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Most high-level-language compilers store arrays in row-major order. This means that all elements of a row are stored consecutively. The first five elements of an array with four rows and three columns are stored in row-major order as</p>
			<p class="Ex">A[1, 1], A[1, 2], A[1, 3], A[2, 1], A[2, 2]<br style="mso-special-character:
line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="MsoNormal">In column-major order, the column elements are stored consecutively. For example, this same array would be stored in column-major order as</p>
			<p class="Ex">A[1, 1], A[2, 1], A[3, 1], A[4, 1], A[1, 2], A[2, 2]<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<h2 style="margin-left:0in">The C/MASM Interface</h2>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Mixed-language programming:C/MASM programs&quot;<span style='mso-hide:
none'> \z &quot;MIXEDW.DOC-1066&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;C/MASM programs&quot;<span
style='mso-hide:none'> \z &quot;MIXEDW.DOC-1067&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">This section summarizes the characteristics of the interface between MASM and Microsoft C and QuickC compilers. With the default naming and calling convention, the assembler (or compiler) pushes arguments right to left and adds a leading underscore to routine names.</p>
			<h4>Compatible Data Types</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Mixed-language programming:compatible data types:C (list)&quot;<span
style='mso-hide:none'> \z &quot;MIXEDW.DOC-1068&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">This list shows the 16-bit C data types and equivalent data types in MASM 6.1. For 32-bit C compilers, <b style="mso-bidi-font-weight:normal">int</b> and <b style="mso-bidi-font-weight:normal">unsigned int</b> are equivalent to the MASM types <b style="mso-bidi-font-weight:normal">SDWORD</b> and <b style="mso-bidi-font-weight:normal">DWORD</b>, respectively.</p>
			<table border="0" cellspacing="0" cellpadding="0" style="margin-left:.4pt;border-collapse:
 collapse;mso-padding-alt:0in 0in 0in 0in">
				<tr>
					<td width="167" valign="top" style="width:125.3pt;padding:0in 0in 0in 0in">
						<p class="Thf">C Type</p>
						<p class="Thf"></p>
					</td>
					<td width="297" valign="top" style="width:222.7pt;padding:0in 0in 0in 0in">
						<p class="Th">Equivalent MASM Type</p>
						<p class="Th"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="464" colspan="2" valign="top" style="width:348.0pt;padding:0in 0in 0in 0in">
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"><span style="font-size:9.0pt"><o:p></o:p></span></p>
						</div>
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"><span style="font-size:9.0pt"><o:p></o:p></span></p>
						</div>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
				</tr>
				<tr>
					<td width="167" valign="top" style="width:125.3pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">unsigned char</b></p>
						<p class="Tpf"></p>
					</td>
					<td width="297" valign="top" style="width:222.7pt;padding:0in 0in 0in 0in">
						<p class="Tp"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">BYTE</span></b></p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
				</tr>
				<tr>
					<td width="167" valign="top" style="width:125.3pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">char</b></p>
						<p class="Tpf"></p>
					</td>
					<td width="297" valign="top" style="width:222.7pt;padding:0in 0in 0in 0in">
						<p class="Tp"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">SBYTE</span></b></p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="167" valign="top" style="width:125.3pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">unsigned short</b>, <b style="mso-bidi-font-weight:normal">unsigned int</b></p>
						<p class="Tpf"></p>
					</td>
					<td width="297" valign="top" style="width:222.7pt;padding:0in 0in 0in 0in">
						<p class="Tp"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">WORD</span></b></p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="167" valign="top" style="width:125.3pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">int</b>, <b style="mso-bidi-font-weight:normal">short</b></p>
						<p class="Tpf"></p>
					</td>
					<td width="297" valign="top" style="width:222.7pt;padding:0in 0in 0in 0in">
						<p class="Tp"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">SWORD</span></b></p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="167" valign="top" style="width:125.3pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">unsigned long</b></p>
						<p class="Tpf"></p>
					</td>
					<td width="297" valign="top" style="width:222.7pt;padding:0in 0in 0in 0in">
						<p class="Tp"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">DWORD</span></b></p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="167" valign="top" style="width:125.3pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">long</b></p>
						<p class="Tpf"></p>
					</td>
					<td width="297" valign="top" style="width:222.7pt;padding:0in 0in 0in 0in">
						<p class="Tp"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">SDWORD</span></b></p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="167" valign="top" style="width:125.3pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">float</b></p>
						<p class="Tpf"></p>
					</td>
					<td width="297" valign="top" style="width:222.7pt;padding:0in 0in 0in 0in">
						<p class="Tp"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">REAL4</span></b></p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="167" valign="top" style="width:125.3pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">double</b></p>
						<p class="Tpf"></p>
					</td>
					<td width="297" valign="top" style="width:222.7pt;padding:0in 0in 0in 0in">
						<p class="Tp"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">REAL8</span></b></p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="167" valign="top" style="width:125.3pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">long double</b></p>
						<p class="Tpf"></p>
					</td>
					<td width="297" valign="top" style="width:222.7pt;padding:0in 0in 0in 0in">
						<p class="Tp"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">REAL10</span></b></p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
			</table>
			<p class="Tes"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<h4>Naming Restrictions</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;C/MASM programs&quot;<span style='mso-hide:none'> \z
&quot;MIXEDW.DOC-1069&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">C is case-sensitive and does not convert names to uppercase. Since C normally links with the /NOI command-line option, you should assemble MASM modules with the /Cx or /Cp option to prevent the assembler from converting names to uppercase.</p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<h4>Argument-Passing Defaults</h4>
			<p class="MsoNormal">C always passes arrays by reference and all other variables (including structures) by value. C programs in tiny, small, and medium model pass near addresses for arrays, unless another distance is specified. Compact-, large-, and huge-model programs pass far addresses by default. To pass by reference a variable type other than array, use the C-language address-of operator (<b style="mso-bidi-font-weight:normal"><span style="font-size:9.5pt">&amp;</span></b>).</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Arrays:referencing&quot;<span style='mso-hide:none'> \z
&quot;MIXEDW.DOC-1070&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">If you need to pass an array by value, declare the array as a structure member and pass a copy of the entire structure. However, this practice is rarely necessary and usually impractical except for very small arrays, since it can make substantial demands on stack space. If your program must maintain an array through a procedure call, create a temporary copy of the array in heap and provide the copy to the procedure by reference.</p>
			<h4>Changing the Calling Convention</h4>
			<p class="MsoNormal">Put <b style="mso-bidi-font-weight:normal">_pascal</b> or <b style="mso-bidi-font-weight:normal">_fortran</b> in the C function declaration to specify the Pascal calling convention.</p>
			<h4>Array Storage</h4>
			<p class="MsoNormal">Array declarations give the number of elements. <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>A1[a][b]</span> declares a two-dimensional array in C with <span style='font-size:9.5pt;
font-family:"Lucida Sans Typewriter"'>a</span> rows and <span style='font-size:
9.5pt;font-family:"Lucida Sans Typewriter"'>b</span> columns. By default, the array&#146;s lower bound is zero. Arrays are stored by the compiler in row-major order. By default, passing arrays from C passes a pointer to the first element of the array.</p>
			<h4>String Format</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Mixed-language programming:C/MASM programs&quot;<span style='mso-hide:
none'> \z &quot;MIXEDW.DOC-1071&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">C stores strings as arrays of bytes and uses a null character as the end-of-string delimiter. For example, consider the string declared as follows:</p>
			<p class="Ex">char msg[] = &quot;string of text&quot;<br style="mso-special-character:
line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="MsoNormal">The string occupies 15 bytes of memory as:</p>
			<p class="Art" style="margin-left:0in"><span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp; </span><span style='mso-field-code:"include M\:\\\\SLM\\\\SRC\\\\MASM61\\\\APPS\\\\ART\\\\mpchp12\.doc art_mp1201_eps  \\\\* mergeformat"'><a name="art_mp1201_eps"></a><a name="space_mp1201_eps"><span style="mso-bookmark:
art_mp1201_eps"></span></a><!--[if supportFields]><span style='mso-bookmark:
space_mp1201_eps'><span style='mso-bookmark:art_mp1201_eps'></span></span><span
style='mso-element:field-begin'></span><span style='mso-bookmark:space_mp1201_eps'><span
style='mso-bookmark:art_mp1201_eps'>IMPORT
M:\\SLM\\SRC\\MASM61\\APPS\\ART\\MP1201.EPS \* mergeformat<span
style='mso-element:field-separator'></span></span></span><![endif]-->
			<span style="mso-bookmark:space_mp1201_eps"><span style="mso-bookmark:art_mp1201_eps"><!--[if gte vml 1]><v:shapetype
 id="_x0000_t75" coordsize="21600,21600" o:spt="75" o:preferrelative="t"
 path="m@4@5l@4@11@9@11@9@5xe" filled="f" stroked="f">
 <v:stroke joinstyle="miter"/>
 <v:formulas>
  <v:f eqn="if lineDrawn pixelLineWidth 0"/>
  <v:f eqn="sum @0 1 0"/>
  <v:f eqn="sum 0 0 @1"/>
  <v:f eqn="prod @2 1 2"/>
  <v:f eqn="prod @3 21600 pixelWidth"/>
  <v:f eqn="prod @3 21600 pixelHeight"/>
  <v:f eqn="sum @0 0 1"/>
  <v:f eqn="prod @6 1 2"/>
  <v:f eqn="prod @7 21600 pixelWidth"/>
  <v:f eqn="sum @8 21600 0"/>
  <v:f eqn="prod @7 21600 pixelHeight"/>
  <v:f eqn="sum @10 21600 0"/>
 </v:formulas>
 <v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"/>
 <o:lock v:ext="edit" aspectratio="t"/>
</v:shapetype><v:shape id="_x0000_i1025" type="#_x0000_t75" style='width:231pt;
 height:24pt'>
 <v:imagedata src="./Chap_12_files/image001.wmz" o:href="file:///M:/SLM/SRC/MASM61/APPS/ART/MP1201.EPS"/>
</v:shape><![endif]-->
			<![if !vml]><img width="308" height="32" src="Chap_12_files/image002.gif" v:shapes="_x0000_i1025"><![endif]></span></span><!--[if supportFields]><span
style='mso-bookmark:space_mp1201_eps'><span style='mso-bookmark:art_mp1201_eps'></span></span><span
style='mso-element:field-end'></span><![endif]-->
			 <span style="mso-bookmark:
space_mp1201_eps"><span style="mso-bookmark:art_mp1201_eps"></span></span></span></p>
			<p class="Cap">Figure <span style='mso-field-code:"SEQ chapter \\c"'>12</span>.<span style='mso-field-code:"SEQ figure"'>1</span><span style="font-family:Helvetica-Narrow;
letter-spacing:-1.75pt"> </span><span style="font-family:Helvetica-Narrow"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;</span></span><span style="mso-spacerun:
yes">&nbsp;</span>C String Format</p>
			<p class="MsoNormal">Since <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>msg</span> is an array of characters, it is passed by reference.</p>
			<h4>External Data</h4>
			<p class="MsoNormal">In C, the <b style="mso-bidi-font-weight:normal">extern</b> keyword tells the compiler that the data or function is external. You can define a static data object in a C module by defining a data object outside all functions and subroutines. Do not use the <b style="mso-bidi-font-weight:normal">static</b> keyword in C with a data object that you want to be public.</p>
			<h4>Structure Alignment</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;C/MASM programs&quot;<span style='mso-hide:none'> \z
&quot;MIXEDW.DOC-1072&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">By default, C uses word alignment (unpacked storage) for all data objects longer than 1 byte. This storage method specifies that occasional bytes may be added as padding, so that word and doubleword objects start on an even boundary. In addition, all nested structures and records start on a word boundary. MASM aligns on byte boundaries by default.</p>
			<p class="MsoNormal">When converting .H files with H2INC, you can use the /Zp command-line option to specify structure alignment. If you do not specify the /Zp option, H2INC uses word-alignment. Without H2INC, set the alignment to 2 when declaring the MASM structure, compile the C module with /Zp1, or assemble the MASM module with /Zp2.</p>
			<h4>Compiling and Linking</h4>
			<p class="MsoNormal">Use the same memory model for both C and MASM.</p>
			<h4>Returning Values</h4>
			<p class="MsoNormal">The assembler returns simple data types in registers. Table 12.2 shows the register conventions for returning simple data types to a C program.</p>
			<table border="0" cellspacing="0" cellpadding="0" style="margin-left:.4pt;border-collapse:
 collapse;mso-padding-alt:0in 0in 0in 0in">
				<tr>
					<td width="409" colspan="2" valign="top" style="width:306.9pt;padding:0in 0in 0in 0in">
						<p class="Tt">Table <!--[if supportFields]><span style='font-family:Times'><span
  style='mso-element:field-begin'></span>SEQ chapter \c<span style='mso-element:
  field-separator'></span></span><![endif]-->
						<span style="font-family:Times">12</span><!--[if supportFields]><span
  style='font-family:Times'><span style='mso-element:field-end'></span></span><![endif]-->
						 <span style="font-family:Times">.</span><!--[if supportFields]><span
  style='font-family:Times'><span style='mso-element:field-begin'></span>SEQ
  table<span style='mso-element:field-separator'></span></span><![endif]-->
						 <span style="font-family:Times">2</span><!--[if supportFields]><span
  style='font-family:Times'><span style='mso-element:field-end'></span></span><![endif]-->
						 <span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp;&nbsp; </span>Register Conventions for Simple Return Values</p>
						<p class="Tt"></p>
					</td>
					<td width="55" valign="top" style="width:40.9pt;padding:0in 0in 0in 0in">
						<p class="Tp"></p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="464" colspan="3" valign="top" style="width:347.8pt;padding:0in 0in 0in 0in">
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="136" valign="top" style="width:102.3pt;padding:0in 0in 0in 0in">
						<p class="Thf">Data Type</p>
						<p class="Thf"></p>
					</td>
					<td width="273" valign="top" style="width:204.6pt;padding:0in 0in 0in 0in">
						<p class="Th">Registers</p>
						<p class="Th"></p>
					</td>
					<td width="55" valign="top" style="width:40.9pt;padding:0in 0in 0in 0in">
						<p class="Tp"></p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="464" colspan="3" valign="top" style="width:347.8pt;padding:0in 0in 0in 0in">
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="136" valign="top" style="width:102.3pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">char</b></p>
						<p class="Tpf"></p>
					</td>
					<td width="273" valign="top" style="width:204.6pt;padding:0in 0in 0in 0in">
						<p class="Tp">AL</p>
						<p class="Tp"></p>
					</td>
					<td width="55" valign="top" style="width:40.9pt;padding:0in 0in 0in 0in">
						<p class="Tp"></p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="136" valign="top" style="width:102.3pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">short</b>, <b style="mso-bidi-font-weight:normal">near</b>, <b style="mso-bidi-font-weight:
  normal">int</b> (16-bit)</p>
						<p class="Tpf"></p>
					</td>
					<td width="273" valign="top" style="width:204.6pt;padding:0in 0in 0in 0in">
						<p class="Tp">AX</p>
						<p class="Tp"></p>
					</td>
					<td width="55" valign="top" style="width:40.9pt;padding:0in 0in 0in 0in">
						<p class="Tp"></p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="136" valign="top" style="width:102.3pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">short</b>, <b style="mso-bidi-font-weight:normal">near</b>, <b style="mso-bidi-font-weight:
  normal">int</b> (32-bit)<b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
					</td>
					<td width="273" valign="top" style="width:204.6pt;padding:0in 0in 0in 0in">
						<p class="Tp">EAX</p>
						<p class="Tp"></p>
					</td>
					<td width="55" valign="top" style="width:40.9pt;padding:0in 0in 0in 0in">
						<p class="Tp"></p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="136" valign="top" style="width:102.3pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">long</b>, <b style="mso-bidi-font-weight:normal">far</b> (16-bit)<b style="mso-bidi-font-weight:
  normal"><o:p></o:p></b></p>
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
					</td>
					<td width="273" valign="top" style="width:204.6pt;padding:0in 0in 0in 0in">
						<p class="Tp">High-order portion (or segment address) in DX;<br>
						low-order portion (or offset address) in AX</p>
						<p class="Tp"></p>
					</td>
					<td width="55" valign="top" style="width:40.9pt;padding:0in 0in 0in 0in">
						<p class="Tp"></p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="136" valign="top" style="width:102.3pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">long</b>, <b style="mso-bidi-font-weight:normal">far</b> (32-bit)</p>
						<p class="Tpf"></p>
					</td>
					<td width="273" valign="top" style="width:204.6pt;padding:0in 0in 0in 0in">
						<p class="Tp">High-order portion (or segment address) in EDX;<br>
						low-order portion (or offset address) in EAX</p>
						<p class="Tp"></p>
					</td>
					<td width="55" valign="top" style="width:40.9pt;padding:0in 0in 0in 0in">
						<p class="Tp"></p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
			</table>
			<div style="border:none;border-top:solid windowtext .75pt;padding:1.0pt 0in 0in 0in">
				<p class="Te"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			</div>
			<p class="MsoNormal">Procedures using the C calling convention and returning type <b style="mso-bidi-font-weight:normal">float</b> or type <b style="mso-bidi-font-weight:
normal">double</b> store their return values into static variables. In multi-threaded programs, this could mean that the return value may be overwritten. You can avoid this by using the Pascal calling convention for multi-threaded programs so <b style="mso-bidi-font-weight:normal">float</b> or <b style="mso-bidi-font-weight:normal">double</b> values are passed on the stack.</p>
			<p class="MsoNormal">Structures less than 4 bytes long are returned in DX:AX. To return a longer structure from a procedure that uses the C calling convention, you must copy the structure to a global variable and then return a pointer to that variable in the AX register (DX:AX, if you compiled in compact, large, or huge model or if the variable is declared as a far pointer).</p>
			<h4>Structures, Records, and User-Defined Data Types</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Mixed-language programming:C/MASM programs&quot;<span style='mso-hide:
none'> \z &quot;MIXEDW.DOC-1073&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Mixed-language programming:C
prototypes, converting with H2INC&quot;<span style='mso-hide:none'> \z
&quot;MIXEDW.DOC-1074&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">You can pass structures, records, and user-defined types as arguments by value or by reference.</p>
			<h4>Writing Procedure Prototypes</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;H2INC:function prototypes, writing&quot;<span style='mso-hide:none'> \z
&quot;MIXEDW.DOC-1075&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;C/MASM programs&quot;<span
style='mso-hide:none'> \z &quot;MIXEDW.DOC-1076&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The H2INC utility simplifies the task of writing prototypes for the C functions you want to call from MASM. The C prototype converted by H2INC into a MASM prototype allows <b style="mso-bidi-font-weight:normal">INVOKE</b> to correctly call the C function. Here are some examples of C functions and the MASM prototypes created with H2INC.</p>
			<p class="Ex">/* Function Prototype Declarations to Convert with H2INC */<br>
			<br>
			long checktypes (<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>char *name,<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>unsigned char a,<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>int b,<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>float d,<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>unsigned int *num );<br>
			<br>
			my_func (float fNum, unsigned int x);<br>
			<br>
			extern my_func1 (char *argv[]);<br>
			<br>
			struct videoconfig _far * _far pascal my_func2 (int, scri );<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="MsoNormal">For these C prototypes, H2INC generates this code:</p>
			<p class="Ex">@proto_0<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>TYPEDEF<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>PROTO C :PTR SBYTE, :BYTE,<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>:SWORD, :REAL4, :PTR WORD<br>
			checktypes<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>PROTO<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>@proto_0<br>
			<br>
			@proto_1<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>TYPEDEF<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>PROTO C :REAL4, :WORD<br>
			my_func<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>PROTO<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>@proto_1<br>
			<br>
			@proto_2<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>TYPEDEF<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>PROTO C :PTR PTR SBYTE<br>
			my_func1<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>PROTO<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>@proto_2<br>
			<br>
			@proto_3<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>TYPEDEF<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>PROTO FAR PASCAL :SWORD, :scri<br>
			my_func2<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>PROTO<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>@proto_3<br style="mso-special-character:
line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<h4>Example</h4>
			<p class="MsoNormal">As shown in the following short example, the main module (written in C) calls an assembly routine, <span style='font-size:9.5pt;
font-family:"Lucida Sans Typewriter"'>Power2</span>.</p>
			<p class="Ex" style="page-break-after:auto">#include &lt;stdio.h&gt;<br>
			<br>
			extern int Power2( int factor, int power );<br>
			<br>
			void main()<br>
			{<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>printf( &quot;3 times 2 to the power of 5 is %d\n&quot;, Power2( 3, 5 ) );<br>
			}<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<p class="MsoNormal">Figure 12.2 shows how functions that observe the C calling convention use the stack frame.</p>
			<p class="Art" style="margin-left:0in"><span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp; </span><span style='mso-field-code:"include M\:\\\\SLM\\\\SRC\\\\MASM61\\\\APPS\\\\ART\\\\mpchp12\.doc art_mp1202_eps  \\\\* mergeformat"'><a name="art_mp1202_eps"></a><a name="space_mp1202_eps"><span style="mso-bookmark:
art_mp1202_eps"></span></a><!--[if supportFields]><span style='mso-bookmark:
space_mp1202_eps'><span style='mso-bookmark:art_mp1202_eps'></span></span><span
style='mso-element:field-begin'></span><span style='mso-bookmark:space_mp1202_eps'><span
style='mso-bookmark:art_mp1202_eps'>IMPORT
M:\\SLM\\SRC\\MASM61\\APPS\\ART\\MP1202.EPS \* mergeformat<span
style='mso-element:field-separator'></span></span></span><![endif]-->
			<span style="mso-bookmark:space_mp1202_eps"><span style="mso-bookmark:art_mp1202_eps"><!--[if gte vml 1]><v:shape
 id="_x0000_i1026" type="#_x0000_t75" style='width:281.25pt;height:447.75pt'>
 <v:imagedata src="./Chap_12_files/image003.wmz" o:href="file:///M:/SLM/SRC/MASM61/APPS/ART/MP1202.EPS"/>
</v:shape><![endif]-->
			<![if !vml]><img width="375" height="597" src="Chap_12_files/image004.gif" v:shapes="_x0000_i1026"><![endif]></span></span><!--[if supportFields]><span
style='mso-bookmark:space_mp1202_eps'><span style='mso-bookmark:art_mp1202_eps'></span></span><span
style='mso-element:field-end'></span><![endif]-->
			 <span style="mso-bookmark:
space_mp1202_eps"><span style="mso-bookmark:art_mp1202_eps"></span></span></span></p>
			<p class="Cap">Figure <!--[if supportFields]><span style='font-family:Times'><span
style='mso-element:field-begin'></span>SEQ chapter \c<span style='mso-element:
field-separator'></span></span><![endif]-->
			<span style="font-family:Times">12</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-end'></span></span><![endif]-->
			 <span style="font-family:Times">.</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-begin'></span>SEQ
figure<span style='mso-element:field-separator'></span></span><![endif]-->
			 <span style="font-family:Times">2</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-end'></span></span><![endif]-->
			 <span style="font-family:Helvetica-Narrow"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span></span>C Stack Frame</p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Mixed-language programming:C/MASM programs&quot;<span style='mso-hide:
none'> \z &quot;MIXEDW.DOC-1077&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The MASM module that contains the<b style="mso-bidi-font-weight:
normal"> </b><span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>Power2</span><b style="mso-bidi-font-weight:normal"> </b>routine looks like this:</p>
			<p class="Ex"><span style="mso-tab-count:2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.MODEL<span style="mso-spacerun: yes">&nbsp; </span>small, c<br>
			<br>
			Power2<span style="mso-spacerun: yes">&nbsp; </span>PROTO C factor:SWORD, power:SWORD<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.CODE<br>
			<br>
			Power2<span style="mso-spacerun: yes">&nbsp; </span>PROC<span style="mso-spacerun:
yes">&nbsp; </span>C factor:SWORD, power:SWORD<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, factor<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>; Load Arg1 into AX<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>cx, power<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>; Load Arg2 into CX<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>shl<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, cl<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; AX = AX * (2 to power of CX)<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Leave return value in AX<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>ret<br>
			Power2<span style="mso-spacerun: yes">&nbsp; </span>ENDP<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>END<br style="mso-special-character:
line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;C/MASM programs&quot;<span style='mso-hide:none'> \z
&quot;MIXEDW.DOC-1078&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The MASM procedure declaration for the<b style="mso-bidi-font-weight:
normal"> </b><span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>Power2</span><b style="mso-bidi-font-weight:normal"> </b>routine specifies the C<br>
			<i style="mso-bidi-font-style:normal">langtype</i> and the parameters expected by the procedure. The <i style="mso-bidi-font-style:normal">langtype</i> specifies the calling and naming conventions for the interface between MASM and C. The routine is public by default. When the C module calls<b style="mso-bidi-font-weight:normal"> </b><span style='font-size:9.5pt;
font-family:"Lucida Sans Typewriter"'>Power2</span>, it passes two arguments, <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>3</span> and <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>5</span> by value.</p>
			<h3>Using the C Startup Code</h3>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Mixed-language programming:initialization code&quot;<span
style='mso-hide:none'> \z &quot;MIXEDW.DOC-1079&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">This section explains how to write an assembly-language program that can call C library functions. It links with the C startup module, which performs the necessary initialization required by the library functions.</p>
			<p class="MsoNormal">You must follow these steps when writing such a program:</p>
			<p class="Ln1" style="margin-left:22.0pt"><span style="mso-tab-count:1"></span>1.<span style="mso-tab-count:1">&nbsp; </span>Specify the C convention in the <b style="mso-bidi-font-weight:normal">.MODEL</b> statement.</p>
			<p class="Ln1" style="margin-left:22.0pt"><span style="mso-tab-count:1"></span>2.<span style="mso-tab-count:1">&nbsp; </span>Include the following (optional) statement to note linkage with the C startup module:</p>
			<p class="Ex"><span style="mso-tab-count:2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>EXTERN<span style="mso-spacerun: yes">&nbsp; </span>_acrtused:abs<br style="mso-special-character:
line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="Ln1" style="margin-left:22.0pt"><span style="mso-tab-count:1"></span>3.<span style="mso-tab-count:1">&nbsp; </span>Prototype or declare as external all C functions the program references.</p>
			<p class="Ln1" style="margin-left:22.0pt"><span style="mso-tab-count:1"></span>4.<span style="mso-tab-count:1">&nbsp; </span>Include a public procedure called <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>main</span> in your assembly-language module. The C startup code calls _<span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>main</span> (which is why all C programs begin with a <span style='font-size:9.5pt;font-family:
"Lucida Sans Typewriter"'>main</span> function). This procedure serves as the effective entry point for your program.</p>
			<p class="Ln1" style="margin-left:22.0pt"><span style="mso-tab-count:1"></span>5.<span style="mso-tab-count:1">&nbsp; </span>Omit an entry point in the program&#146;s <b style="mso-bidi-font-weight:normal">END</b> directive. The C startup code serves as the true entry point when the program runs.</p>
			<p class="Ln1" style="margin-left:22.0pt"><span style="mso-tab-count:1"></span>6.<span style="mso-tab-count:1">&nbsp; </span>Assemble with ML&#146;s /Cx switch to preserve the case of nonlocal names.</p>
			<p class="Le"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<p class="MsoNormal">The following example serves as a template for these steps. The program calls the C run-time function <b style="mso-bidi-font-weight:normal">printf</b> to display two variables.</p>
			<p class="Ex">.MODEL<span style="mso-spacerun: yes">&nbsp; </span>small, c<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Step 1: declare C conventions<br>
			EXTERN<span style="mso-spacerun: yes">&nbsp; </span>_acrtused:abs<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Step 2: bring in C startup<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			printf<span style="mso-spacerun: yes">&nbsp; </span>PROTO<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>NEAR,<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Step 3: prototype<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>pstring:NEAR PTR BYTE,<span style="mso-spacerun: yes">&nbsp; </span>;<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>external C<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>num1:WORD, num2:VARARG<span style="mso-spacerun: yes">&nbsp; </span>;<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>routines<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.DATA<br>
			format<span style="mso-spacerun: yes">&nbsp; </span>BYTE<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>'%i<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>%i', 13, 0<br>
			<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.CODE<br>
			<br>
			main <span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;</span>PROC<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>PUBLIC<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Step 4: C startup calls here<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>INVOKE<span style="mso-spacerun:
yes">&nbsp; </span>printf, OFFSET format, ax, bx<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>END<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Step 5: no label on END<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<h2 style="margin-left:0in">The C++/MASM Interface</h2>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Linkage specification&quot;<span style='mso-hide:none'> \z
&quot;MIXEDW.DOC-1080&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Mixed-language
programming:C++/MASM programs&quot;<span style='mso-hide:none'> \z
&quot;MIXEDW.DOC-1081&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;C++/MASM programs&quot;<span
style='mso-hide:none'> \z &quot;MIXEDW.DOC-1082&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">C++ can apply a protocol called a &#147;linkage specification&#148; to mixed-language procedures. This lets you link C++ code in the same way as C code. All information in the preceding section applies when linking assembly-language and C++ routines through the C linkage specification.<span style="mso-spacerun: yes">&nbsp; </span></p>
			<p class="MsoNormal">The C linkage specification forces the C++ compiler to adopt C conventions<a name="CurrentCell"></a><span style="letter-spacing:-1.75pt"> </span>&#151;<span style="letter-spacing:-1.75pt"> </span>which are not the same as C++ conventions<span style="letter-spacing:-1.75pt"> </span>&#151;<span style="letter-spacing:-1.75pt"> </span>for listed routines. Since MASM does not specifically support C++ conventions, set the C linkage specification in your C++ code for all mixed-language routines, as shown here:</p>
			<p class="Syn"><b style="mso-bidi-font-weight:normal">extern</b><b style="mso-bidi-font-weight:normal"><span style="font-size:9.5pt"> &#147;C&#148;</span></b> <i style="mso-bidi-font-style:normal">declaration</i></p>
			<p class="MsoNormal">where <i style="mso-bidi-font-style:normal">declaration</i> is the prototype of an exported C++ function or an imported assembly-language procedure. You can bracket a list of declarations:</p>
			<p class="Ex">extern &quot;C&quot;<br>
			{<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>int<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>WriteLine( short attr, char *string );<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>void<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>GoExit( int err );<br>
			}<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-element-top:0in;
mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in;mso-element:frame;mso-element-wrap:around;
  mso-element-top:0in;mso-height-rule:exactly"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<p class="MsoNormal">or apply the specification to individual prototypes:</p>
			<p class="Ex">extern &quot;C&quot; int<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>WriteLine( short attr, char *string );<br>
			extern &quot;C&quot; void<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>GoExit( int err );<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Linkage specification&quot;<span style='mso-hide:none'> \z
&quot;MIXEDW.DOC-1083&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Mixed-language
programming:C++/MASM programs&quot;<span style='mso-hide:none'> \z &quot;MIXEDW.DOC-1084&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;C++/MASM programs&quot;<span
style='mso-hide:none'> \z &quot;MIXEDW.DOC-1085&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Note the syntax remains the same whether <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>WriteLine</span> and <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>GoExit</span> are exported C++ functions or imported assembly-language routines. The linkage specification applies only to called routines, not to external variables. Use the <b style="mso-bidi-font-weight:normal">extern</b> keyword (without the <b style="mso-bidi-font-weight:normal">&#147;C&#148;</b>) as you normally would when identifying objects external to the C++ module.<span style="mso-spacerun:
yes">&nbsp; </span></p>
			<h2 style="margin-left:0in">The FORTRAN/MASM Interface</h2>
			<p class="MsoNormal">This section summarizes the specific details important to calling FORTRAN procedures or receiving arguments from FORTRAN routines that call MASM routines. It includes a sample MASM and FORTRAN module.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Mixed-language programming:FORTRAN/MASM programs&quot;<span
style='mso-hide:none'> \z &quot;MIXEDW.DOC-1086&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;FORTRAN/MASM programs&quot;<span
style='mso-hide:none'> \z &quot;MIXEDW.DOC-1087&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">A FORTRAN procedure follows the Pascal calling convention by default. This convention passes arguments in the order listed, and the calling procedure removes the arguments from the stack. The naming convention converts all exported names to uppercase.</p>
			<h4>Compatible Data Types</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Mixed-language programming:compatible data types:FORTRAN (list)&quot;<span
style='mso-hide:none'> \z &quot;MIXEDW.DOC-1088&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;FORTRAN/MASM programs&quot;<span
style='mso-hide:none'> \z &quot;MIXEDW.DOC-1089&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">This list shows the FORTRAN data types that are equivalent to the MASM 6.1 data types.<span style="mso-spacerun: yes">&nbsp; </span></p>
			<table border="0" cellspacing="0" cellpadding="0" style="margin-left:.4pt;border-collapse:
 collapse;mso-padding-alt:0in 0in 0in 0in">
				<tr>
					<td width="188" valign="top" style="width:141.0pt;padding:0in 0in 0in 0in">
						<p class="Thf">FORTRAN Type</p>
						<p class="Thf"></p>
					</td>
					<td width="276" valign="top" style="width:207.0pt;padding:0in 0in 0in 0in">
						<p class="Th">Equivalent MASM Type</p>
						<p class="Th"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="464" colspan="2" valign="top" style="width:348.0pt;padding:0in 0in 0in 0in">
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
							<p class="Tr"></p>
						</div>
					</td>
					<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
						<p class="Tr"></p>
					</div>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
				</tr>
				<tr>
					<td width="188" valign="top" style="width:141.0pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">CHARACTER*1</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="276" valign="top" style="width:207.0pt;padding:0in 0in 0in 0in">
						<p class="Tp"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">BYTE</span></b></p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
				</tr>
				<tr>
					<td width="188" valign="top" style="width:141.0pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">INTEGER*1</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="276" valign="top" style="width:207.0pt;padding:0in 0in 0in 0in">
						<p class="Tp"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">SBYTE</span></b></p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="188" valign="top" style="width:141.0pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">INTEGER*2</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="276" valign="top" style="width:207.0pt;padding:0in 0in 0in 0in">
						<p class="Tp"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">SWORD</span></b></p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="188" valign="top" style="width:141.0pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">REAL*4</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="276" valign="top" style="width:207.0pt;padding:0in 0in 0in 0in">
						<p class="Tp"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">REAL4</span></b></p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="188" valign="top" style="width:141.0pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">INTEGER*4</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="276" valign="top" style="width:207.0pt;padding:0in 0in 0in 0in">
						<p class="Tp"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">SDWORD</span></b></p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="188" valign="top" style="width:141.0pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">REAL*8</span></b>, <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">DOUBLE PRECISION</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="276" valign="top" style="width:207.0pt;padding:0in 0in 0in 0in">
						<p class="Tp"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">REAL8</span></b></p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
			</table>
			<p class="Tes"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<h4>Naming Restrictions</h4>
			<p class="MsoNormal">FORTRAN allows 31 characters for identifier names. A digit or an underscore cannot be the first character in an identifier name.</p>
			<h4>Argument-Passing Defaults</h4>
			<p class="MsoNormal">By default, FORTRAN passes arguments by reference as far addresses if the FORTRAN module is compiled in large or huge memory model. It passes them as near addresses if the FORTRAN module is compiled in medium model. Versions of FORTRAN prior to Version 4.0 always require large model.</p>
			<p class="MsoNormal">The FORTRAN compiler passes an argument by value when declared with the <b style="mso-bidi-font-weight:normal">VALUE</b> attribute. This declaration can occur either in a FORTRAN <b style="mso-bidi-font-weight:
normal">INTERFACE </b>block (which determines how to pass an argument) or in a function or subroutine declaration (which determines how to receive an argument).</p>
			<p class="MsoNormal">In FORTRAN you can apply the <b style="mso-bidi-font-weight:
normal">NEAR</b> (or <b style="mso-bidi-font-weight:normal">FAR</b>) attribute to reference parameters. These keywords override the default. They have no effect when they specify the same method as the default.</p>
			<h4>Changing the Calling Convention</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Mixed-language programming:FORTRAN/MASM programs&quot;<span
style='mso-hide:none'> \z &quot;MIXEDW.DOC-1090&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">A call to a FORTRAN function or subroutine declared with the <b style="mso-bidi-font-weight:normal">PASCAL</b> or <b style="mso-bidi-font-weight:
normal">C</b> attribute passes all arguments by value in the parameter list (except for parameters declared with the <b style="mso-bidi-font-weight:normal">REFERENCE</b> attribute). This change in default passing method applies to function and subroutine definitions as well as to the functions and subroutines described by <b style="mso-bidi-font-weight:normal">INTERFACE</b> blocks.</p>
			<h4>Array Storage</h4>
			<p class="MsoNormal">When you declare FORTRAN arrays, you can specify any integer for the lower bound (the default is 1). The FORTRAN compiler stores all arrays in column-major order<span style="letter-spacing:-1.75pt"> </span>&#151;<span style="letter-spacing:-1.75pt"> </span>that is, the leftmost subscript increments most rapidly. For example, the first seven elements of an array defined as <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>A[3,4]</span> are stored as</p>
			<p class="Ex">A[1,1], A[2,1], A[3,1], A[1,2], A[2,2], A[3,2], A[1,3]<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<h4>String Format</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;FORTRAN/MASM programs&quot;<span style='mso-hide:none'> \z
&quot;MIXEDW.DOC-1091&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">FORTRAN stores strings as a series of bytes at a fixed location in memory, with no delimiter at the end of the string. When passing a variable-length FORTRAN string to another language, you need to devise a method by which the target routine can find the end of the string.</p>
			<p class="MsoNormal">Consider the string declared as</p>
			<p class="Ex">CHARACTER*14 MSG<br>
			MSG = 'String of text'<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="MsoNormal">The string is stored in 14 bytes of memory like this:</p>
			<p class="Art" style="margin-left:0in"><span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp; </span><span style='mso-field-code:"include M\:\\\\SLM\\\\SRC\\\\MASM61\\\\APPS\\\\ART\\\\mpchp12\.doc art_mp1203_eps  \\\\* mergeformat"'><a name="art_mp1203_eps"></a><a name="space_mp1203_eps"><span style="mso-bookmark:
art_mp1203_eps"></span></a><!--[if supportFields]><span style='mso-bookmark:
space_mp1203_eps'><span style='mso-bookmark:art_mp1203_eps'></span></span><span
style='mso-element:field-begin'></span><span style='mso-bookmark:space_mp1203_eps'><span
style='mso-bookmark:art_mp1203_eps'>IMPORT
M:\\SLM\\SRC\\MASM61\\APPS\\ART\\MP1203.EPS \* mergeformat<span
style='mso-element:field-separator'></span></span></span><![endif]-->
			<span style="mso-bookmark:space_mp1203_eps"><span style="mso-bookmark:art_mp1203_eps"><!--[if gte vml 1]><v:shape
 id="_x0000_i1027" type="#_x0000_t75" style='width:215.25pt;height:24pt'>
 <v:imagedata src="./Chap_12_files/image005.wmz" o:href="file:///M:/SLM/SRC/MASM61/APPS/ART/MP1203.EPS"/>
</v:shape><![endif]-->
			<![if !vml]><img width="287" height="32" src="Chap_12_files/image006.gif" v:shapes="_x0000_i1027"><![endif]></span></span><!--[if supportFields]><span
style='mso-bookmark:space_mp1203_eps'><span style='mso-bookmark:art_mp1203_eps'></span></span><span
style='mso-element:field-end'></span><![endif]-->
			 <span style="mso-bookmark:
space_mp1203_eps"><span style="mso-bookmark:art_mp1203_eps"></span></span></span></p>
			<p class="Cap">Figure <!--[if supportFields]><span style='font-family:Times'><span
style='mso-element:field-begin'></span>SEQ chapter \c<span style='mso-element:
field-separator'></span></span><![endif]-->
			<span style="font-family:Times">12</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-end'></span></span><![endif]-->
			 <span style="font-family:Times">.</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-begin'></span>SEQ
figure<span style='mso-element:field-separator'></span></span><![endif]-->
			 <span style="font-family:Times">3</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-end'></span></span><![endif]-->
			 <span style="font-family:Helvetica-Narrow"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span></span>FORTRAN String Format</p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<p class="MsoNormal">Strings are passed by reference. Although FORTRAN has a method for passing length, the variable-length FORTRAN strings cannot be used in a mixed-<br>
			language interface because other languages cannot access the temporary variable that FORTRAN uses to communicate string length. However, fixed-length strings can be passed if the FORTRAN <b style="mso-bidi-font-weight:normal">INTERFACE</b> statement declares the length of the string in advance.</p>
			<h4>External Data</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Mixed-language programming:FORTRAN/MASM programs&quot;<span
style='mso-hide:none'> \z &quot;MIXEDW.DOC-1092&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">FORTRAN routines can directly access external data. In FORTRAN you can declare data to be external by adding the <b style="mso-bidi-font-weight:
normal">EXTERN</b> attribute to the data declaration. You can also access a FORTRAN variable from MASM if it is declared in a <b style="mso-bidi-font-weight:
normal">COMMON</b> block.</p>
			<p class="MsoNormal">A FORTRAN program can call an external assembly procedure with the use of the <b style="mso-bidi-font-weight:normal">INTERFACE</b> statement. However, the <b style="mso-bidi-font-weight:normal">INTERFACE</b> statement is not strictly necessary unless you intend to change one of the FORTRAN defaults.</p>
			<h4>Structure Alignment</h4>
			<p class="MsoNormal">By default, FORTRAN uses word alignment (unpacked storage) for all data objects larger than 1 byte. This storage method specifies that occasional bytes may be added as padding, so that word and doubleword objects start on an even boundary. In addition, all nested structures and records start on a word boundary. The MASM default is byte-alignment, so you should specify an <i style="mso-bidi-font-style:normal">alignment</i> of 2 for MASM structures or use the /Zp1 option when compiling in FORTRAN.</p>
			<h4>Compiling and Linking</h4>
			<p class="MsoNormal">Use the same memory model for the MASM and FORTRAN modules.</p>
			<h4>Returning Values</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;FORTRAN/MASM programs&quot;<span style='mso-hide:none'> \z
&quot;MIXEDW.DOC-1093&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">You must use a special convention to return floating-point values, records, user-defined types, arrays, and values larger than 4 bytes to a FORTRAN module from an assembly procedure. The FORTRAN module creates space in the stack segment to hold the actual return value. When the call to the assembly procedure is made, an extra parameter is passed. This parameter is the last one pushed. The segment address of the return value is contained in SS.</p>
			<p class="MsoNormal">In the assembly procedure, put the data for the return value at the location pointed to by the return value offset. Then copy the return-value offset (located at BP + 6) to AX, and copy SS to DX. This is necessary because the calling module expects DX:AX to point to the return value.</p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<h4>Structures, Records, and User-Defined Data Types</h4>
			<p class="MsoNormal">The FORTRAN structure variable, defined with the <b style="mso-bidi-font-weight:normal">STRUCTURE</b> keyword and declared with the <b style="mso-bidi-font-weight:normal">RECORD</b> statement, is equivalent to the Pascal <b style="mso-bidi-font-weight:normal">RECORD</b> and the C <b style="mso-bidi-font-weight:normal">struct</b>. You can pass structures as arguments by value or by reference (the default).</p>
			<p class="MsoNormal">The FORTRAN types <b style="mso-bidi-font-weight:normal">COMPLEX*8</b> and <b style="mso-bidi-font-weight:normal">COMPLEX*16</b> are not directly implemented in MASM. However, you can write structures that are equivalent. The type <b style="mso-bidi-font-weight:normal">COMPLEX*8</b> has two fields, both of which are 4-byte floating-point<br>
			numbers; the first contains the real component, and the second contains the imaginary component. The type <b style="mso-bidi-font-weight:normal">COMPLEX</b> is equivalent to the type <b style="mso-bidi-font-weight:normal">COMPLEX*8</b>.</p>
			<p class="MsoNormal">The type <b style="mso-bidi-font-weight:normal">COMPLEX*16</b> is similar to <b style="mso-bidi-font-weight:normal">COMPLEX*8</b>. The only difference is that each field of the former contains an 8-byte floating-point number.</p>
			<p class="MsoNormal">A FORTRAN <b style="mso-bidi-font-weight:normal">LOGICAL*2</b> is stored as a 1-byte indicator value (1=true, 0=false) followed by an unused byte. A FORTRAN <b style="mso-bidi-font-weight:normal">LOGICAL*4</b> is stored as a 1-byte indicator value followed by three unused bytes. The type <b style="mso-bidi-font-weight:normal">LOGICAL</b> is equivalent to <b style="mso-bidi-font-weight:normal">LOGICAL*4</b>, unless <b style="mso-bidi-font-weight:
normal">$STORAGE:2</b> is in effect.</p>
			<p class="MsoNormal">To pass or receive a FORTRAN <b style="mso-bidi-font-weight:
normal">LOGICAL</b> type, declare a MASM structure with the appropriate fields.</p>
			<h4>Varying Number of Arguments</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Mixed-language programming:FORTRAN/MASM programs&quot;<span
style='mso-hide:none'> \z &quot;MIXEDW.DOC-1094&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">In FORTRAN, you can call routines with a variable number of arguments by including the <b style="mso-bidi-font-weight:normal">VARYING</b> attribute in your interface to the routine, along with the <b style="mso-bidi-font-weight:
normal">C</b> attribute. You must use the <b style="mso-bidi-font-weight:normal">C</b> attribute because a variable number of arguments is possible only with the <b style="mso-bidi-font-weight:normal">C</b> calling convention. The <b style="mso-bidi-font-weight:normal">VARYING</b> attribute prevents FORTRAN from enforcing a matching number of parameters.</p>
			<h4>Pointers and Addresses</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;FORTRAN/MASM programs&quot;<span style='mso-hide:none'> \z
&quot;MIXEDW.DOC-1095&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">FORTRAN programs can determine near and far addresses with the <b style="mso-bidi-font-weight:normal">LOCNEAR</b> and <b style="mso-bidi-font-weight:
normal">LOCFAR</b> functions. Store the result as <b style="mso-bidi-font-weight:
normal">INTEGER*2</b> (with the <b style="mso-bidi-font-weight:normal">LOCNEAR</b> function) or as <b style="mso-bidi-font-weight:normal">INTEGER*4</b> (with the <b style="mso-bidi-font-weight:normal">LOCFAR</b> function). If you pass the result of <b style="mso-bidi-font-weight:normal">LOCNEAR</b> or <b style="mso-bidi-font-weight:normal">LOCFAR</b> to another language, be sure to pass by value.</p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<h4>Example</h4>
			<p class="MsoNormal">In the following example, the FORTRAN module calls an assembly procedure that calculates <span style='font-size:9.5pt;font-family:
"Lucida Sans Typewriter"'>A*2^B</span>, where <span style='font-size:9.5pt;
font-family:"Lucida Sans Typewriter"'>A</span> and <span style='font-size:9.5pt;
font-family:"Lucida Sans Typewriter"'>B</span> are the first and second parameters, respectively. This is done by shifting the bits in <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>A</span> to the left <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>B</span> times.</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>INTERFACE TO INTEGER*2 FUNCTION POWER2(A, B)<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>INTEGER*2 A, B<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>END<br>
			<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>PROGRAM MAIN<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>INTEGER*2 POWER2<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>INTEGER*2 A, B<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>A = 3<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>B = 5<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>WRITE (*, *) '3 TIMES 2 TO THE B OR 5 IS ',POWER2(A, B)<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>END<br style="mso-special-character:
line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="MsoNormal">To understand the assembly procedure, consider how the parameters are placed on the stack, as illustrated in Figure 12.4.</p>
			<p class="Art" style="margin-left:0in"><span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp; </span><span style='mso-field-code:"include M\:\\\\SLM\\\\SRC\\\\MASM61\\\\APPS\\\\ART\\\\mpchp12\.doc art_mp1204_eps  \\\\* mergeformat"'><a name="art_mp1204_eps"></a><a name="space_mp1204_eps"><span style="mso-bookmark:
art_mp1204_eps"></span></a><!--[if supportFields]><span style='mso-bookmark:
space_mp1204_eps'><span style='mso-bookmark:art_mp1204_eps'></span></span><span
style='mso-element:field-begin'></span><span style='mso-bookmark:space_mp1204_eps'><span
style='mso-bookmark:art_mp1204_eps'>IMPORT
M:\\SLM\\SRC\\MASM61\\APPS\\ART\\MP1204.EPS \* mergeformat<span
style='mso-element:field-separator'></span></span></span><![endif]-->
			<span style="mso-bookmark:space_mp1204_eps"><span style="mso-bookmark:art_mp1204_eps"><!--[if gte vml 1]><v:shape
 id="_x0000_i1028" type="#_x0000_t75" style='width:254.25pt;height:167.25pt'>
 <v:imagedata src="./Chap_12_files/image007.wmz" o:href="file:///M:/SLM/SRC/MASM61/APPS/ART/MP1204.EPS"/>
</v:shape><![endif]-->
			<![if !vml]><img width="339" height="223" src="Chap_12_files/image008.gif" v:shapes="_x0000_i1028"><![endif]></span></span><!--[if supportFields]><span
style='mso-bookmark:space_mp1204_eps'><span style='mso-bookmark:art_mp1204_eps'></span></span><span
style='mso-element:field-end'></span><![endif]-->
			 <span style="mso-bookmark:
space_mp1204_eps"><span style="mso-bookmark:art_mp1204_eps"></span></span></span></p>
			<p class="Cap">Figure <!--[if supportFields]><span style='font-family:Times'><span
style='mso-element:field-begin'></span>SEQ chapter \c<span style='mso-element:
field-separator'></span></span><![endif]-->
			<span style="font-family:Times">12</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-end'></span></span><![endif]-->
			 <span style="font-family:Times">.</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-begin'></span>SEQ
figure<span style='mso-element:field-separator'></span></span><![endif]-->
			 <span style="font-family:Times">4</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-end'></span></span><![endif]-->
			 <span style="font-family:Helvetica-Narrow"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span></span>FORTRAN Stack Frame</p>
			<p class="MsoNormal">Figure 12.4 assumes that the FORTRAN module is compiled in large model. If you compile the FORTRAN module in medium model, then each argument is passed as a 2-byte, not 4-byte, address. The return address is 4 bytes long because procedures called from FORTRAN must always be <b style="mso-bidi-font-weight:normal">FAR</b>.</p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<p class="MsoNormal">The assembler code looks like this:</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.MODEL LARGE, FORTRAN<br>
			<br>
			Power2<span style="mso-spacerun: yes">&nbsp; </span>PROTO<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>FORTRAN, pFactor:FAR PTR SWORD, pPower:FAR PTR SWORD<br>
			<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.CODE<br>
			<br>
			Power2<span style="mso-spacerun: yes">&nbsp; </span>PROC<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>FORTRAN, pFactor:FAR PTR SWORD, pPower:FAR PTR SWORD<br>
			<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>les<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>bx, pFactor<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>; ES:BX points to factor<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, es:[bx]<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>; AX = value of factor<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>les<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>bx, pPower<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; ES:BX points to power<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>cx, es:[bx]<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>; CX = value of power<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>shl<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, cl<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Multiply by 2^power<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>ret<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Return result in AX<br>
			Power2<span style="mso-spacerun: yes">&nbsp; </span>ENDP</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>END<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<h2 style="margin-left:0in">The Basic/MASM Interface</h2>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Mixed-language programming:Basic/MASM programs&quot;<span
style='mso-hide:none'> \z &quot;MIXEDW.DOC-1096&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Basic/MASM programs&quot;<span
style='mso-hide:none'> \z &quot;MIXEDW.DOC-1097&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">This section explains how to call MASM procedures or functions from Basic and how to receive Basic arguments for the MASM procedure. Pascal is the default naming and calling convention, so all lowercase letters are converted to uppercase. Routines defined with the <b style="mso-bidi-font-weight:
normal">FUNCTION</b> keyword return values, but routines defined with <b style="mso-bidi-font-weight:normal">SUB</b> do not. Basic <b style="mso-bidi-font-weight:
normal">DEF FN</b> functions and <b style="mso-bidi-font-weight:normal">GOSUB</b> routines cannot be called from another language.</p>
			<p class="MsoNormal">The information provided pertains to Microsoft&#146;s Basic and QuickBasic compilers. Differences between the two compilers are noted when necessary.</p>
			<h4>Compatible Data Types</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Mixed-language programming:compatible data types:Basic (list)&quot;<span
style='mso-hide:none'> \z &quot;MIXEDW.DOC-1098&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The following list shows the Basic data types that are equivalent to the MASM 6.1 data types.</p>
			<table border="0" cellspacing="0" cellpadding="0" style="margin-left:.4pt;border-collapse:
 collapse;mso-padding-alt:0in 0in 0in 0in">
				<tr>
					<td width="139" valign="top" style="width:104.35pt;padding:0in 0in 0in 0in">
						<p class="Thf">Basic Type</p>
						<p class="Thf"></p>
					</td>
					<td width="325" valign="top" style="width:243.55pt;padding:0in 0in 0in 0in">
						<p class="Th">Equivalent MASM Type</p>
						<p class="Th"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="464" colspan="2" valign="top" style="width:347.9pt;padding:0in 0in 0in 0in">
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
							<p class="Tr"></p>
						</div>
					</td>
					<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
						<p class="Tr"></p>
					</div>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="139" valign="top" style="width:104.35pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">STRING*1</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="325" valign="top" style="width:243.55pt;padding:0in 0in 0in 0in">
						<p class="Tp"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">WORD</span></b></p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
				</tr>
				<tr>
					<td width="139" valign="top" style="width:104.35pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">INTEGER<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>(X%)</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="325" valign="top" style="width:243.55pt;padding:0in 0in 0in 0in">
						<p class="Tp"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">SWORD</span></b></p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="139" valign="top" style="width:104.35pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">SINGLE<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>(X!)</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="325" valign="top" style="width:243.55pt;padding:0in 0in 0in 0in">
						<p class="Tp"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">REAL4</span></b></p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="139" valign="top" style="width:104.35pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">LONG<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>(X&amp;)</span></b>, <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt"><br>
						CURRENCY</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="325" valign="top" style="width:243.55pt;padding:0in 0in 0in 0in">
						<p class="Tp"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">SDWORD</span></b></p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="139" valign="top" style="width:104.35pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">DOUBLE<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>(X#)</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="325" valign="top" style="width:243.55pt;padding:0in 0in 0in 0in">
						<p class="Tp"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">REAL8</span></b></p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
			</table>
			<p class="Le"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<h4>Naming Conventions</h4>
			<p class="MsoNormal">Basic recognizes up to 40 characters of a name. In the object code, Basic also drops any of its reserved characters: <b style="mso-bidi-font-weight:normal">%</b>, <b style="mso-bidi-font-weight:normal">&amp;</b>, <b style="mso-bidi-font-weight:normal">!</b>, <b style="mso-bidi-font-weight:
normal">#</b>, <b style="mso-bidi-font-weight:normal">@</b>, <b style="mso-bidi-font-weight:normal">&amp;</b>.</p>
			<h4>Argument-Passing Defaults</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Basic/MASM programs&quot;<span style='mso-hide:none'> \z &quot;MIXEDW.DOC-1099&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Basic can pass data in several ways and can receive it by value or by near reference. By default, Basic arguments are passed by near reference as 2-byte addresses. To pass a near address, pass only the offset; if you need to pass a far address, pass the segment and offset separately as integer arguments. Pass the segment address first, unless you have specified C compatibility with the <b style="mso-bidi-font-weight:normal">CDECL</b> keyword.</p>
			<p class="MsoNormal">Basic passes each argument in a call by far reference when <b style="mso-bidi-font-weight:normal">CALLS</b> is used to invoke a routine. You can also use <b style="mso-bidi-font-weight:normal">SEG</b> to modify a parameter in a preceding<br>
			<b style="mso-bidi-font-weight:normal">DECLARE</b> statement so that Basic passes that argument by far reference. To pass any other variable type by value, apply the <b style="mso-bidi-font-weight:normal">BYVAL</b> keyword to the argument in the <b style="mso-bidi-font-weight:normal">DECLARE</b> statement. You cannot pass arrays and user-defined types by value.</p>
			<p class="Ex">DECLARE SUB Test(BYVAL a%, b%, SEG c%)<br>
			<br>
			CALL Test(x%, y%, z%)<br>
			CALLS Test(x%, y%, z%)<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="MsoNormal">This <b style="mso-bidi-font-weight:normal">CALL</b> statement passes the first argument (<span style='font-size:9.5pt;font-family:
"Lucida Sans Typewriter"'>a%</span>) by value, the second argument (<span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>b%</span>) by near reference, and the third argument (<span style='font-size:9.5pt;font-family:
"Lucida Sans Typewriter"'>c%</span>) by far reference. The statement</p>
			<p class="Ex">CALLS Test2(x%, y%, z%)<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="MsoNormal">passes each argument by far reference.</p>
			<h4>Changing the Calling Convention</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Mixed-language programming:Basic/MASM programs&quot;<span
style='mso-hide:none'> \z &quot;MIXEDW.DOC-1100&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Including the <b style="mso-bidi-font-weight:normal">CDECL</b> keyword in the Basic <b style="mso-bidi-font-weight:normal">DECLARE</b> statement enables the C calling and naming conventions. This also allows a call to a MASM procedure with a varying number of arguments.</p>
			<h4><a name="BeginSelect"></a>Array Storage</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;MIXEDW.DOC-1142&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The <b style="mso-bidi-font-weight:normal">DIM</b> statement sets the number of dimensions for a Basic array and also sets the array&#146;s maximum subscript value. In the array declaration <span style='font-size:9.5pt;
font-family:"Lucida Sans Typewriter"'>DIM x(a,b)</span>, the upper bounds (the maximum number of values possible) of the array are <span style='font-size:
9.5pt;font-family:"Lucida Sans Typewriter"'>a</span> and <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>b</span>. The default lower bound is 0. The default upper bound for an array subscript is 10.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;MIXEDW.DOC-1143&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The default for column storage in Basic is column-major order, as in FORTRAN. For an array defined as <span style='font-size:9.5pt;
font-family:"Lucida Sans Typewriter"'>DIM Arr%(3,3)</span>, reference the last element as <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>Arr%(3,3)</span>. The first five elements of <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>Arr (3,3)</span> are</p>
			<p class="Ex" style="page-break-after:auto">Arr(0,0), Arr(1,0), Arr(2,0), Arr(0,1), Arr(1,1)<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;MIXEDW.DOC-1144&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">When you pass an array from Basic to a language that stores arrays in row-major order, use the command-line option /R when compiling the Basic module.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;MIXEDW.DOC-1145&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Most Microsoft languages permit you to reference arrays directly. Basic uses an array descriptor, however, which is similar in some respects to a Basic string descriptor. The array descriptor is necessary because Basic handles memory allocation for arrays dynamically, and thus may shift the location of the array in memory.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Basic/MASM programs&quot;<span style='mso-hide:none'> \z
&quot;MIXEDW.DOC-1101&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">A reference to an array in Basic is really a near reference to an array descriptor. Array descriptors are always in DGROUP, even though the data may be in far memory. Array descriptors contain information about type, dimensions, and memory locations of data. You can safely pass arrays to MASM routines only if you follow three rules:</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;MIXEDW.DOC-1146&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>Pass the array&#146;s address by applying the <b style="mso-bidi-font-weight:
normal">VARPTR</b> function to the first element of the Basic array and passing the result by value. To pass the far address of the array, apply both the <b style="mso-bidi-font-weight:normal">VARPTR</b> and <b style="mso-bidi-font-weight:
normal">VARSEG</b> functions and pass each result by value. The receiving language gets the address of the first element and considers it to be the address of the entire array. It can then access the array with its normal array-indexing syntax.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;MIXEDW.DOC-1147&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>The MASM routine that receives the array should not call back to one of the calling program&#146;s routines before it has finished processing the array. Changing data within the caller&#146;s heap<span style="letter-spacing:-1.75pt"> </span>&#151;<span style="letter-spacing:-1.75pt"> </span>even data unrelated to the array<span style="letter-spacing:-1.75pt"> </span>&#151;<span style="letter-spacing:
-1.75pt"> </span>may change the array&#146;s location in the heap. This would invalidate any further work the called routine performs, since the routine would be operating on the array&#146;s old location.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;MIXEDW.DOC-1148&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>Basic can pass any member of an array by value. When passing individual array elements, these restrictions do not apply.</p>
			<p class="Le"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;MIXEDW.DOC-1149&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">You can apply <b style="mso-bidi-font-weight:normal">LBOUND</b> and <b style="mso-bidi-font-weight:normal">UBOUND</b> to a Basic array to determine lower and upper bounds, and then pass the results to another routine. This way, the size of the array does not need to be determined in advance.</p>
			<h4>String Format</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;MIXEDW.DOC-1150&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Basic maintains a 4-byte string descriptor for each string, as shown in the following. The first field of the string descriptor contains a 2-byte integer indicating the length of the actual string text. The second field contains the offset address of this text within the caller&#146;s data segment.</p>
			<p class="Art" style="margin-left:0in"><span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp; </span><span style='mso-field-code:"include M\:\\\\SLM\\\\SRC\\\\MASM61\\\\APPS\\\\ART\\\\mpchp12\.doc art_mp1205_eps  \\\\* mergeformat"'><a name="art_mp1205_eps"></a><a name="space_mp1205_eps"><span style="mso-bookmark:
art_mp1205_eps"></span></a><!--[if supportFields]><span style='mso-bookmark:
space_mp1205_eps'><span style='mso-bookmark:art_mp1205_eps'></span></span><span
style='mso-element:field-begin'></span><span style='mso-bookmark:space_mp1205_eps'><span
style='mso-bookmark:art_mp1205_eps'>IMPORT
M:\\SLM\\SRC\\MASM61\\APPS\\ART\\MP1205.EPS \* mergeformat<span
style='mso-element:field-separator'></span></span></span><![endif]-->
			<span style="mso-bookmark:space_mp1205_eps"><span style="mso-bookmark:art_mp1205_eps"><!--[if gte vml 1]><v:shape
 id="_x0000_i1029" type="#_x0000_t75" style='width:215.25pt;height:24pt'>
 <v:imagedata src="./Chap_12_files/image009.wmz" o:href="file:///M:/SLM/SRC/MASM61/APPS/ART/MP1205.EPS"/>
</v:shape><![endif]-->
			<![if !vml]><img width="287" height="32" src="Chap_12_files/image010.gif" v:shapes="_x0000_i1029"><![endif]></span></span><!--[if supportFields]><span
style='mso-bookmark:space_mp1205_eps'><span style='mso-bookmark:art_mp1205_eps'></span></span><span
style='mso-element:field-end'></span><![endif]-->
			 <span style="mso-bookmark:
space_mp1205_eps"><span style="mso-bookmark:art_mp1205_eps"></span></span></span></p>
			<p class="Cap">Figure <!--[if supportFields]><span style='font-family:Times'><span
style='mso-element:field-begin'></span>SEQ chapter \c<span style='mso-element:
field-separator'></span></span><![endif]-->
			<span style="font-family:Times">12</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-end'></span></span><![endif]-->
			 <span style="font-family:Times">.</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-begin'></span>SEQ
figure<span style='mso-element:field-separator'></span></span><![endif]-->
			 <span style="font-family:Times">5</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-end'></span></span><![endif]-->
			 <span style="font-family:Helvetica-Narrow"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span></span>Basic String Descriptor Format</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;MIXEDW.DOC-1151&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">An assembly-language procedure can store a Basic string descriptor as a simple structure, like this:</p>
			<p class="Ex">DESC<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>STRUCT<br>
			<span style="mso-spacerun: yes">&nbsp; </span>len<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>WORD<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>?<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Length of string<br>
			<span style="mso-spacerun: yes">&nbsp; </span>off<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>WORD<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>?<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Offset of string<br>
			DESC<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>ENDS<br>
			<br>
			string<span style="mso-spacerun: yes">&nbsp; </span>BYTE<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>&quot;This text referenced by a string descriptor&quot;<br>
			sdesc<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>DESC<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>(LENGTHOF string, string)<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;MIXEDW.DOC-1152&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Version 7.0 or later of the Microsoft Basic Compiler provides new functions that access string descriptors. These functions simplify the process of sharing Basic string data with routines written in other languages.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;MIXEDW.DOC-1153&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Earlier versions of Basic offer the <b style="mso-bidi-font-weight:
normal">LEN</b> (Length) and <b style="mso-bidi-font-weight:normal">SADD</b> (String Address) functions, which together obtain the information stored in a string descriptor. <b style="mso-bidi-font-weight:normal">LEN</b> returns the length of a string in bytes. <b style="mso-bidi-font-weight:normal">SADD</b> returns the offset address of a string in the data segment. The caller must provide both pieces of information so the called procedure can locate and read the entire string. The address returned by <b style="mso-bidi-font-weight:normal">SADD</b> is declared as type <b style="mso-bidi-font-weight:normal">INTEGER</b> but is actually equivalent to a C near pointer.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;MIXEDW.DOC-1154&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">If you need to pass the far address of a string, use the <b style="mso-bidi-font-weight:normal">SSEGADD</b> (String Segment Address) function of Microsoft Basic version 7.0 or later. You can also determine the segment address of the first element with <b style="mso-bidi-font-weight:normal">VARSEG</b>.</p>
			<h4>External Data</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;MIXEDW.DOC-1155&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Declaring global data in Basic follows the same two-step process as in other languages:</p>
			<p class="Ln1" style="margin-left:22.0pt"><span style="mso-tab-count:1"></span>1.<span style="mso-tab-count:1">&nbsp; </span>Declare shareable data in Basic with the <b style="mso-bidi-font-weight:normal">COMMON</b> statement.</p>
			<p class="Ln1" style="margin-left:22.0pt"><span style="mso-tab-count:1"></span>2.<span style="mso-tab-count:1">&nbsp; </span><!--[if supportFields]><span style='mso-element:
field-begin'></span>xe &quot;aa&quot; \z &quot;MIXEDW.DOC-1157&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			Identify the shared variables in your assembly-language procedures with the <b style="mso-bidi-font-weight:
normal">EXTERN</b> keyword. Place the <b style="mso-bidi-font-weight:normal">EXTERN</b> statement outside of a code or data segment when declaring far data.</p>
			<h4>Structure Alignment</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Mixed-language programming:Basic/MASM programs&quot;<span
style='mso-hide:none'> \z &quot;MIXEDW.DOC-1102&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Basic packs user-defined types. For MASM structures to be compatible, select byte-alignment.</p>
			<h4>Compiling and Linking</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;MIXEDW.DOC-1158&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Always use medium model in assembly-language procedures linked with Basic modules. If you are listing other libraries on the LINK command line, specify Basic libraries first. (There are differences between the QBX and command-line compilation. See your Basic documentation.)</p>
			<h4>Returning Values</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;MIXEDW.DOC-1159&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Basic follows the usual convention of returning values in AX or DX:AX. If the value is not floating point, an array, or a structured type, or if it is less than 4 bytes long, then the 2-byte integers should be returned from the MASM procedure in AX and 4-byte integers should be returned in DX:AX. For all other types, return the near offset in AX.</p>
			<h4>User-Defined Data Types</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Basic/MASM programs&quot;<span style='mso-hide:none'> \z
&quot;MIXEDW.DOC-1103&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The Basic <b style="mso-bidi-font-weight:normal">TYPE</b> statement defines structures composed of individual fields. These types are equivalent to the C <b style="mso-bidi-font-weight:normal">struct</b>, FORTRAN record (declared with the <b style="mso-bidi-font-weight:normal">STRUCTURE</b> keyword), and Pascal <b style="mso-bidi-font-weight:normal">Record</b> types.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;MIXEDW.DOC-1160&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">You can use any of the Basic data types except variable-length strings or dynamic arrays in a user-defined type. Once defined, Basic types can be passed only by reference.</p>
			<h4>Varying Number of Arguments</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;MIXEDW.DOC-1161&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">You can vary the number of arguments in Basic when you change the calling convention with <b style="mso-bidi-font-weight:normal">CDECL</b>. To call a function with a varying number of arguments, you also need to suppress the type checking that normally forces a call to be made with a fixed number of arguments. In Basic, you can remove this type checking by omitting a parameter list from the <b style="mso-bidi-font-weight:normal">DECLARE</b> statement.</p>
			<h4>Pointers and Addresses</h4>
			<p class="index"><!--[if supportFields]><b style='mso-bidi-font-weight:normal'><span
style='font-size:9.0pt'><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;MIXEDW.DOC-1162&quot;</span></b><![endif]-->
			<!--[if supportFields]><b
style='mso-bidi-font-weight:normal'><span style='font-size:9.0pt'><span
style='mso-element:field-end'></span></span></b><![endif]-->
			</p>
			<p class="MsoNormal"><b style="mso-bidi-font-weight:normal">VARSEG</b> returns a variable&#146;s segment address, and <b style="mso-bidi-font-weight:normal">VARPTR</b> returns a variable&#146;s offset address. These intrinsic Basic functions enable your program to pass near or far addresses.</p>
			<h4>Example</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Mixed-language programming:Basic/MASM programs&quot;<span
style='mso-hide:none'> \z &quot;MIXEDW.DOC-1104&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">This example calls the <span style='font-size:9.5pt;
font-family:"Lucida Sans Typewriter"'>Power2</span> procedure in the MASM 6.1 module.</p>
			<p class="Ex">DEFINT A-Z<br>
			<br>
			DECLARE FUNCTION Power2 (A AS INTEGER, B AS INTEGER)<br>
			PRINT &quot;3 times 2 to the power of 5 is &quot;;<br>
			PRINT Power2(3, 5)<br>
			<br>
			END<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;MIXEDW.DOC-1163&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The first argument, <span style='font-size:9.5pt;font-family:
"Lucida Sans Typewriter"'>A</span>, is higher in memory than <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>B</span> because Basic pushes arguments in the same order in which they appear.</p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-element-top:0in;
mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in;mso-element:frame;mso-element-wrap:around;
  mso-element-top:0in;mso-height-rule:exactly"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;MIXEDW.DOC-1164&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Figure 12.6 shows how the arguments are placed on the stack.</p>
			<p class="Art" style="margin-left:0in"><span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp; </span><span style='mso-field-code:"include M\:\\\\SLM\\\\SRC\\\\MASM61\\\\APPS\\\\ART\\\\mpchp12\.doc art_mp1206_eps  \\\\* mergeformat"'><a name="art_mp1206_eps"></a><a name="space_mp1206_eps"><span style="mso-bookmark:
art_mp1206_eps"></span></a><!--[if supportFields]><span style='mso-bookmark:
space_mp1206_eps'><span style='mso-bookmark:art_mp1206_eps'></span></span><span
style='mso-element:field-begin'></span><span style='mso-bookmark:space_mp1206_eps'><span
style='mso-bookmark:art_mp1206_eps'>IMPORT
M:\\SLM\\SRC\\MASM61\\APPS\\ART\\MP1206.EPS \* mergeformat<span
style='mso-element:field-separator'></span></span></span><![endif]-->
			<span style="mso-bookmark:space_mp1206_eps"><span style="mso-bookmark:art_mp1206_eps"><!--[if gte vml 1]><v:shape
 id="_x0000_i1030" type="#_x0000_t75" style='width:252.75pt;height:128.25pt'>
 <v:imagedata src="./Chap_12_files/image011.wmz" o:href="file:///M:/SLM/SRC/MASM61/APPS/ART/MP1206.EPS"/>
</v:shape><![endif]-->
			<![if !vml]><img width="337" height="171" src="Chap_12_files/image012.gif" v:shapes="_x0000_i1030"><![endif]></span></span><!--[if supportFields]><span
style='mso-bookmark:space_mp1206_eps'><span style='mso-bookmark:art_mp1206_eps'></span></span><span
style='mso-element:field-end'></span><![endif]-->
			 <span style="mso-bookmark:
space_mp1206_eps"><span style="mso-bookmark:art_mp1206_eps"></span></span></span></p>
			<p class="Cap">Figure <!--[if supportFields]><span style='font-family:Times'><span
style='mso-element:field-begin'></span>SEQ chapter \c<span style='mso-element:
field-separator'></span></span><![endif]-->
			<span style="font-family:Times">12</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-end'></span></span><![endif]-->
			 <span style="font-family:Times">.</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-begin'></span>SEQ
figure<span style='mso-element:field-separator'></span></span><![endif]-->
			 <span style="font-family:Times">6</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-end'></span></span><![endif]-->
			 <span style="font-family:Helvetica-Narrow"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span></span>Basic Stack Frame</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;MIXEDW.DOC-1165&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The assembly procedure can be written as follows:</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.MODEL<span style="mso-spacerun: yes">&nbsp; </span>medium<br>
			<br>
			Power2<span style="mso-spacerun: yes">&nbsp; </span>PROTO<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>PASCAL, factor:PTR WORD, power:PTR WORD<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.CODE<br>
			Power2<span style="mso-spacerun: yes">&nbsp; </span>PROC<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>PASCAL, factor:PTR WORD, power:PTR WORD<br>
			<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>bx, WORD PTR factor<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>; BX points to factor<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, [bx]<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Load factor into AX<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>bx, WORD PTR power<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; BX points to power<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>cx, [bx]<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Load power into CX<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>shl<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, cl<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; AX = AX * (2 to power of CX)<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>ret<br>
			Power2<span style="mso-spacerun: yes">&nbsp; </span>ENDP<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>END<br style="mso-special-character:
line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;MIXEDW.DOC-1166&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Note that each parameter must be loaded in a two-step process because the address of each is passed rather than the value. The return address is 4 bytes long because procedures called from Basic must be <b style="mso-bidi-font-weight:normal">FAR</b>.</p>
			<p class="MsoNormal"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
		</div>
		<span style='font-size:10.5pt;mso-bidi-font-size:10.0pt;font-family:"Times New Roman";
mso-fareast-font-family:"Times New Roman";mso-ansi-language:EN-US;mso-fareast-language:
EN-US;mso-bidi-language:AR-SA'><br clear="all" style="page-break-before:always;
mso-break-type:section-break">
		</span>
		<div class="Section2">
			<p class="MsoNormal"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
		</div>
		<div style="mso-element:comment-list">
			<![if !supportAnnotations]>
			<hr class="msocomoff" align="left" size="1" width="33%">
			<![endif]></div>
	</body>

</html>
