<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40">

	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
		<meta name="ProgId" content="Word.Document">
		<meta name="Generator" content="Microsoft Word 9">
		<meta name="Originator" content="Microsoft Word 9">
		<link rel="File-List" href="Chap_07_files/filelist.xml">
		<!--[if !mso]>
<style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style>
<![endif]-->
		<title>CHAPTER 7</title>
		<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Ruth L Silverio</o:Author>
  <o:Keywords>{artman 1,M:\SLM\SRC\MASM61\APPS\ART\mpchp07.doc}</o:Keywords>
  <o:Description>Ven2Word 6/12/92</o:Description>
  <o:Template>MSGRIDA1.DOT</o:Template>
  <o:LastAuthor>Randall Hyde</o:LastAuthor>
  <o:Revision>2</o:Revision>
  <o:TotalTime>3</o:TotalTime>
  <o:LastPrinted>1992-11-04T18:29:00Z</o:LastPrinted>
  <o:Created>2001-09-06T23:32:00Z</o:Created>
  <o:LastSaved>2001-09-06T23:32:00Z</o:LastSaved>
  <o:Pages>17</o:Pages>
  <o:Words>19400</o:Words>
  <o:Characters>110985</o:Characters>
  <o:Company>Dell Computer Corporation</o:Company>
  <o:Version>9.3821</o:Version>
 </o:DocumentProperties>
</xml><![endif]-->
		<!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:PrintFractionalCharacterWidth/>
  <w:HideSpellingErrors/>
  <w:HideGrammaticalErrors/>
  <w:DoNotHyphenateCaps/>
  <w:DrawingGridHorizontalSpacing>6 pt</w:DrawingGridHorizontalSpacing>
  <w:DrawingGridVerticalSpacing>6 pt</w:DrawingGridVerticalSpacing>
  <w:DisplayVerticalDrawingGridEvery>0</w:DisplayVerticalDrawingGridEvery>
  <w:UseMarginsForDrawingGridOrigin/>
  <w:Compatibility>
   <w:PrintColBlack/>
   <w:ShowBreaksInFrames/>
   <w:SuppressSpBfAfterPgBrk/>
   <w:SwapBordersFacingPages/>
   <w:ConvMailMergeEsc/>
   <w:UsePrinterMetrics/>
   <w:FootnoteLayoutLikeWW8/>
   <w:ShapeLayoutLikeWW8/>
   <w:AlignTablesRowByRow/>
   <w:ForgetLastTabAlignment/>
   <w:NoSpaceRaiseLower/>
   <w:LayoutRawTableWidth/>
   <w:LayoutTableRowsApart/>
  </w:Compatibility>
 </w:WordDocument>
</xml><![endif]-->
		<![if !supportAnnotations]>
		<style id="dynCom" type="text/css"><!-- --></style>
		<script language="JavaScript"><!--
function msoCommentShow(anchor_id, com_id)
{
	if(msoBrowserCheck()) 
		{
		c = document.all(com_id);
		if (null != c)
			{
			a = document.all(anchor_id);
			var cw = c.offsetWidth;
			var ch = c.offsetHeight;
			var aw = a.offsetWidth;
			var ah = a.offsetHeight;
			var x  = a.offsetLeft;
			var y  = a.offsetTop;
			var el = a;
			while (el.tagName != "BODY") 
				{
				el = el.offsetParent;
				x = x + el.offsetLeft;
				y = y + el.offsetTop;
				}
			var bw = document.body.clientWidth;
			var bh = document.body.clientHeight;
			var bsl = document.body.scrollLeft;
			var bst = document.body.scrollTop;
			if (x + cw + ah / 2 > bw + bsl && x + aw - ah / 2 - cw >= bsl ) 
				{ c.style.left = x + aw - ah / 2 - cw; }
			else 
				{ c.style.left = x + ah / 2; }
			if (y + ch + ah / 2 > bh + bst && y + ah / 2 - ch >= bst ) 
				{ c.style.top = y + ah / 2 - ch; }
			else 
				{ c.style.top = y + ah / 2; }
			c.style.visibility = "visible";
}	}	}
function msoCommentHide(com_id) 
{
	if(msoBrowserCheck())
		{
		c = document.all(com_id);
		if (null != c)
		{
		c.style.visibility = "hidden";
		c.style.left = -1000;
		c.style.top = -1000;
		} } 
}
function msoBrowserCheck()
{
	ms = navigator.appVersion.indexOf("MSIE");
	vers = navigator.appVersion.substring(ms + 5, ms + 6);
	ie4 = (ms > 0) && (parseInt(vers) >= 4);
	return ie4;
}
if (msoBrowserCheck())
{
	document.styleSheets.dynCom.addRule(".msocomanchor","background: infobackground");
	document.styleSheets.dynCom.addRule(".msocomoff","display: none");
	document.styleSheets.dynCom.addRule(".msocomtxt","visibility: hidden");
	document.styleSheets.dynCom.addRule(".msocomtxt","position: absolute");
	document.styleSheets.dynCom.addRule(".msocomtxt","top: -1000");
	document.styleSheets.dynCom.addRule(".msocomtxt","left: -1000");
	document.styleSheets.dynCom.addRule(".msocomtxt","width: 33%");
	document.styleSheets.dynCom.addRule(".msocomtxt","background: infobackground");
	document.styleSheets.dynCom.addRule(".msocomtxt","color: infotext");
	document.styleSheets.dynCom.addRule(".msocomtxt","border-top: 1pt solid threedlightshadow");
	document.styleSheets.dynCom.addRule(".msocomtxt","border-right: 2pt solid threedshadow");
	document.styleSheets.dynCom.addRule(".msocomtxt","border-bottom: 2pt solid threedshadow");
	document.styleSheets.dynCom.addRule(".msocomtxt","border-left: 1pt solid threedlightshadow");
	document.styleSheets.dynCom.addRule(".msocomtxt","padding: 3pt 3pt 3pt 3pt");
}
// --></script>
		<![endif]>
		<style>
<!--
 /* Font Definitions */
@font-face
	{font-family:Times;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:0;
	mso-generic-font-family:roman;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:Helvetica-Narrow;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:"Arial Narrow";
	panose-1:2 11 5 6 2 2 2 3 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:647 0 0 0 159 0;}
@font-face
	{font-family:"Lucida Sans Typewriter";
	panose-1:2 11 5 9 3 5 4 3 2 4;
	mso-font-charset:0;
	mso-generic-font-family:modern;
	mso-font-pitch:fixed;
	mso-font-signature:3 0 0 0 1 0;}
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
h1
	{mso-style-parent:"";
	mso-style-next:Normal;
	margin-top:10.0pt;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:-1.25in;
	line-height:22.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-outline-level:1;
	font-size:20.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-font-kerning:0pt;
	mso-bidi-font-weight:normal;}
h2
	{mso-style-parent:"Heading 1";
	mso-style-next:Normal;
	margin-top:7.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:-1.25in;
	line-height:19.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-outline-level:2;
	font-size:17.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-bidi-font-weight:normal;}
h3
	{mso-style-parent:"Heading 1";
	mso-style-next:Normal;
	margin-top:4.0pt;
	margin-right:0in;
	margin-bottom:2.0pt;
	margin-left:0in;
	line-height:17.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-outline-level:3;
	font-size:15.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-bidi-font-weight:normal;}
h4
	{mso-style-parent:"Heading 1";
	mso-style-next:Normal;
	margin-top:3.0pt;
	margin-right:0in;
	margin-bottom:2.0pt;
	margin-left:0in;
	line-height:14.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-bidi-font-weight:normal;}
h5
	{mso-style-parent:"Heading 1";
	mso-style-next:Normal;
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:2.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:5;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-bidi-font-weight:normal;}
h6
	{mso-style-parent:"Heading 1";
	mso-style-next:H6p;
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	line-height:11.9pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:6;
	mso-element:frame;
	mso-element-frame-height:12.75pt;
	mso-element-frame-hspace:6.5pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:column;
	mso-element-top:.05pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-bidi-font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{mso-style-next:"Normal Indent";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:.5in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	mso-outline-level:7;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-style:italic;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{mso-style-next:"Normal Indent";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:.5in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	mso-outline-level:8;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-style:italic;}
p.MsoHeading9, li.MsoHeading9, div.MsoHeading9
	{mso-style-next:"Normal Indent";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:.5in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	mso-outline-level:9;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoIndex1, li.MsoIndex1, div.MsoIndex1
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoIndex2, li.MsoIndex2, div.MsoIndex2
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:.25in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoIndex3, li.MsoIndex3, div.MsoIndex3
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:.5in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoIndex4, li.MsoIndex4, div.MsoIndex4
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:.75in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoIndex5, li.MsoIndex5, div.MsoIndex5
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:1.0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoIndex6, li.MsoIndex6, div.MsoIndex6
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:1.25in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoIndex7, li.MsoIndex7, div.MsoIndex7
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:1.5in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoToc1, li.MsoToc1, div.MsoToc1
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:2.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:right dotted 348.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoToc2, li.MsoToc2, div.MsoToc2
	{mso-style-parent:"TOC 1";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:2.0pt;
	margin-left:14.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:right dotted 348.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoToc3, li.MsoToc3, div.MsoToc3
	{mso-style-parent:"TOC 1";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:2.0pt;
	margin-left:28.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:right dotted 348.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoToc4, li.MsoToc4, div.MsoToc4
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:.5in;
	margin-bottom:8.0pt;
	margin-left:1.5in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	tab-stops:dotted 5.75in right blank 6.0in;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoToc5, li.MsoToc5, div.MsoToc5
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:.5in;
	margin-bottom:8.0pt;
	margin-left:2.0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	tab-stops:dotted 5.75in right blank 6.0in;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoToc6, li.MsoToc6, div.MsoToc6
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:.5in;
	margin-bottom:8.0pt;
	margin-left:2.5in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	tab-stops:dotted 5.75in right blank 6.0in;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoToc7, li.MsoToc7, div.MsoToc7
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:.5in;
	margin-bottom:8.0pt;
	margin-left:3.0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	tab-stops:dotted 5.75in right blank 6.0in;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoToc8, li.MsoToc8, div.MsoToc8
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:.5in;
	margin-bottom:8.0pt;
	margin-left:3.5in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	tab-stops:dotted 5.75in right blank 6.0in;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoNormalIndent, li.MsoNormalIndent, div.MsoNormalIndent
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:14.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoFootnoteText, li.MsoFootnoteText, div.MsoFootnoteText
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoCommentText, li.MsoCommentText, div.MsoCommentText
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:9.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:green;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{mso-style-parent:"";
	mso-style-next:"header rule";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:-1.25in;
	margin-bottom:.0001pt;
	line-height:10.5pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	tab-stops:right 348.0pt;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	line-height:7.0pt;
	mso-pagination:widow-orphan;
	mso-element:frame;
	mso-element-wrap:around;
	mso-element-anchor-vertical:page;
	mso-element-anchor-horizontal:page;
	mso-element-left:100.0pt;
	mso-element-top:735.15pt;
	mso-height-rule:exactly;
	font-size:5.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoIndexHeading, li.MsoIndexHeading, div.MsoIndexHeading
	{mso-style-next:"Index 1";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
span.MsoFootnoteReference
	{mso-ansi-font-size:8.0pt;
	mso-bidi-font-size:8.0pt;
	mso-text-raise:3.0pt;}
span.MsoCommentReference
	{color:green;}
p.Wh, li.Wh, div.Wh
	{mso-style-name:Wh;
	mso-style-parent:Nh;
	mso-style-next:Np1;
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	line-height:11.9pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-element:frame;
	mso-element-frame-height:11.75pt;
	mso-element-frame-hspace:6.5pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:column;
	mso-element-top:.05pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:blue;
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Ws, li.Ws, div.Ws
	{mso-style-name:Ws;
	mso-style-parent:"";
	mso-style-next:Wh;
	margin-top:2.0pt;
	margin-right:1.5pt;
	margin-bottom:0in;
	margin-left:1.5pt;
	margin-bottom:.0001pt;
	line-height:4.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	border:none;
	mso-border-bottom-alt:double blue 2.25pt;
	padding:0in;
	mso-padding-alt:0in 0in 0in 0in;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:white;}
p.We, li.We, div.We
	{mso-style-name:We;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:1.5pt;
	margin-bottom:0in;
	margin-left:1.5pt;
	margin-bottom:.0001pt;
	line-height:10.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	border:none;
	mso-border-top-alt:double blue 2.25pt;
	padding:0in;
	mso-padding-alt:1.0pt 0in 0in 0in;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:white;}
p.Np1, li.Np1, div.Np1
	{mso-style-name:Np1;
	mso-style-parent:Np2;
	mso-style-next:Ne;
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Nh, li.Nh, div.Nh
	{mso-style-name:Nh;
	mso-style-parent:"";
	mso-style-next:Np1;
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	line-height:11.9pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-element:frame;
	mso-element-frame-height:11.75pt;
	mso-element-frame-hspace:6.5pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:column;
	mso-element-top:.05pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Ne, li.Ne, div.Ne
	{mso-style-name:Ne;
	mso-style-parent:"";
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:1.5pt;
	margin-bottom:2.0pt;
	margin-left:1.5pt;
	line-height:7.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	border:none;
	mso-border-top-alt:solid windowtext .75pt;
	padding:0in;
	mso-padding-alt:1.0pt 0in 0in 0in;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:white;}
p.Ns, li.Ns, div.Ns
	{mso-style-name:Ns;
	mso-style-parent:"";
	mso-style-next:Nh;
	margin-top:0in;
	margin-right:1.5pt;
	margin-bottom:0in;
	margin-left:1.5pt;
	margin-bottom:.0001pt;
	line-height:4.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	border:none;
	mso-border-bottom-alt:solid windowtext .75pt;
	padding:0in;
	mso-padding-alt:0in 0in 1.0pt 0in;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:white;}
p.Nhi, li.Nhi, div.Nhi
	{mso-style-name:Nhi;
	mso-style-parent:Nh;
	mso-style-next:Np1i;
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:14.0pt;
	margin-bottom:.0001pt;
	line-height:11.9pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-element:frame;
	mso-element-frame-height:11.75pt;
	mso-element-frame-hspace:6.5pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:column;
	mso-element-top:.05pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Nsi, li.Nsi, div.Nsi
	{mso-style-name:Nsi;
	mso-style-parent:Ns;
	mso-style-next:Nhi;
	margin-top:0in;
	margin-right:1.5pt;
	margin-bottom:0in;
	margin-left:15.5pt;
	margin-bottom:.0001pt;
	line-height:4.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	border:none;
	mso-border-bottom-alt:solid windowtext .75pt;
	padding:0in;
	mso-padding-alt:0in 0in 1.0pt 0in;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:white;}
p.Np1i, li.Np1i, div.Np1i
	{mso-style-name:Np1i;
	mso-style-parent:Np1;
	mso-style-next:Nei;
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:14.0pt;
	text-indent:-14.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Nei, li.Nei, div.Nei
	{mso-style-name:Nei;
	mso-style-parent:Ne;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:1.5pt;
	margin-bottom:0in;
	margin-left:15.5pt;
	margin-bottom:.0001pt;
	line-height:7.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	border:none;
	mso-border-top-alt:solid windowtext .75pt;
	padding:0in;
	mso-padding-alt:1.0pt 0in 0in 0in;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:white;}
p.Wsi, li.Wsi, div.Wsi
	{mso-style-name:Wsi;
	mso-style-parent:Ws;
	mso-style-next:Whi;
	margin-top:2.0pt;
	margin-right:1.5pt;
	margin-bottom:0in;
	margin-left:15.5pt;
	margin-bottom:.0001pt;
	line-height:4.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	border:none;
	mso-border-bottom-alt:double blue 2.25pt;
	padding:0in;
	mso-padding-alt:0in 0in 0in 0in;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:white;}
p.Whi, li.Whi, div.Whi
	{mso-style-name:Whi;
	mso-style-parent:Nhi;
	mso-style-next:Np1i;
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:14.0pt;
	margin-bottom:.0001pt;
	line-height:11.9pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-element:frame;
	mso-element-frame-height:11.75pt;
	mso-element-frame-hspace:6.5pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:column;
	mso-element-top:.05pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:blue;
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Wei, li.Wei, div.Wei
	{mso-style-name:Wei;
	mso-style-parent:We;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:1.5pt;
	margin-bottom:0in;
	margin-left:15.5pt;
	margin-bottom:.0001pt;
	line-height:7.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	border:none;
	mso-border-top-alt:double blue 2.25pt;
	padding:0in;
	mso-padding-alt:1.0pt 0in 0in 0in;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:white;}
p.Sbre, li.Sbre, div.Sbre
	{mso-style-name:Sbre;
	mso-style-parent:"";
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:-12.0pt;
	line-height:10.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Sbrh, li.Sbrh, div.Sbrh
	{mso-style-name:Sbrh;
	mso-style-parent:"";
	mso-style-next:Sbrp;
	margin-top:3.0pt;
	margin-right:14.0pt;
	margin-bottom:2.0pt;
	margin-left:14.0pt;
	line-height:14.0pt;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	background:#FFFFBA;
	mso-shading:windowtext;
	mso-pattern:gray-40 yellow;
	border:none;
	mso-border-alt:solid white 1.5pt;
	padding:0in;
	mso-padding-alt:14.0pt 14.0pt 14.0pt 14.0pt;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Sbrs, li.Sbrs, div.Sbrs
	{mso-style-name:Sbrs;
	mso-style-parent:"";
	mso-style-next:Sbrh;
	margin-top:0in;
	margin-right:14.0pt;
	margin-bottom:0in;
	margin-left:14.0pt;
	margin-bottom:.0001pt;
	line-height:5.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:4.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Tt, li.Tt, div.Tt
	{mso-style-name:Tt;
	mso-style-parent:"";
	mso-style-next:Th;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Th, li.Th, div.Th
	{mso-style-name:Th;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:12.0pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Tp, li.Tp, div.Tp
	{mso-style-name:Tp;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:12.0pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:14.0pt 28.0pt;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Te, li.Te, div.Te
	{mso-style-name:Te;
	mso-style-next:Normal;
	margin-top:4.0pt;
	margin-right:1.5pt;
	margin-bottom:4.0pt;
	margin-left:1.5pt;
	text-align:right;
	line-height:9.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	border:none;
	mso-border-top-alt:solid windowtext .75pt;
	padding:0in;
	mso-padding-alt:1.0pt 0in 0in 0in;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Le, li.Le, div.Le
	{mso-style-name:Le;
	mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	text-align:right;
	line-height:8.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.H6p, li.H6p, div.H6p
	{mso-style-name:H6p;
	mso-style-next:Normal;
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Ttw, li.Ttw, div.Ttw
	{mso-style-name:Ttw;
	mso-style-parent:Tt;
	mso-style-next:Th;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:-1.25in;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.ih, li.ih, div.ih
	{mso-style-name:ih;
	mso-style-parent:"";
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:21.0pt;
	margin-left:-1.25in;
	line-height:30.0pt;
	mso-line-height-rule:exactly;
	page-break-before:always;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:24.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Ch, li.Ch, div.Ch
	{mso-style-name:Ch;
	mso-style-parent:"";
	mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	line-height:27.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-element:frame;
	mso-element-frame-width:336.0pt;
	mso-element-frame-height:123.0pt;
	mso-element-wrap:no-wrap-beside;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:margin;
	mso-element-left:-1.25in;
	mso-element-top:.05pt;
	mso-height-rule:exactly;
	font-size:24.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Ln1, li.Ln1, div.Ln1
	{mso-style-name:Ln1;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:14.0pt;
	text-indent:-22.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:right 8.0pt left 14.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Lb1, li.Lb1, div.Lb1
	{mso-style-name:Lb1;
	mso-style-parent:Ln1;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:14.0pt;
	text-indent:-14.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:14.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Ex, li.Ex, div.Ex
	{mso-style-name:Ex;
	mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:19.0pt 38.0pt 57.0pt 76.0pt 95.0pt 114.0pt 133.0pt 152.0pt 171.0pt 190.0pt;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Lucida Sans Typewriter";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.Proch, li.Proch, div.Proch
	{mso-style-name:Proch;
	mso-style-parent:"";
	mso-style-next:Ln1;
	margin-top:4.0pt;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:0in;
	text-indent:-.25in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:0in;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Hn1, li.Hn1, div.Hn1
	{mso-style-name:Hn1;
	mso-style-parent:"Heading 1";
	mso-style-next:Normal;
	margin-top:10.0pt;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:-1.25in;
	line-height:22.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-outline-level:1;
	font-size:20.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Hn2, li.Hn2, div.Hn2
	{mso-style-name:Hn2;
	mso-style-parent:"Heading 2";
	mso-style-next:Normal;
	margin-top:7.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:-1.25in;
	line-height:19.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-outline-level:2;
	font-size:17.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Mp, li.Mp, div.Mp
	{mso-style-name:Mp;
	mso-style-parent:"";
	mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-element:frame;
	mso-element-frame-width:78.0pt;
	mso-element-frame-hspace:12.0pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:page;
	mso-element-top:.05pt;
	mso-height-rule:exactly;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.Lp1, li.Lp1, div.Lp1
	{mso-style-name:Lp1;
	mso-style-parent:Ln1;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:14.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:right 8.0pt left 14.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Np2, li.Np2, div.Np2
	{mso-style-name:Np2;
	mso-style-next:Ne;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Erm, li.Erm, div.Erm
	{mso-style-name:Erm;
	mso-style-next:Erp;
	margin-top:5.0pt;
	margin-right:12.0pt;
	margin-bottom:2.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Erp, li.Erp, div.Erp
	{mso-style-name:Erp;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:5.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Cn, li.Cn, div.Cn
	{mso-style-name:Cn;
	mso-style-parent:"";
	mso-style-next:Ch;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:14.0pt;
	margin-left:-1.25in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	text-transform:uppercase;
	letter-spacing:6.0pt;}
p.Lb2, li.Lb2, div.Lb2
	{mso-style-name:Lb2;
	mso-style-parent:Lb1;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:28.0pt;
	text-indent:-14.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:28.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Exl, li.Exl, div.Exl
	{mso-style-name:Exl;
	mso-style-parent:Ex;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:14.0pt;
	margin-bottom:.0001pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:33.0pt 52.0pt 71.0pt 1.25in 109.0pt 128.0pt 147.0pt 166.0pt 185.0pt 204.0pt;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Lucida Sans Typewriter";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.Cap, li.Cap, div.Cap
	{mso-style-name:Cap;
	mso-style-parent:"";
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:12.0pt;
	margin-left:0in;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:14.0pt 28.0pt;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Ln2, li.Ln2, div.Ln2
	{mso-style-name:Ln2;
	mso-style-parent:Ln1;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:28.0pt;
	text-indent:-30.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:right 22.0pt left 28.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Lp2, li.Lp2, div.Lp2
	{mso-style-name:Lp2;
	mso-style-parent:Lp1;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:28.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:right 8.0pt left 14.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Rh1, li.Rh1, div.Rh1
	{mso-style-name:Rh1;
	mso-style-parent:"Heading 1";
	mso-style-next:Rmh;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:13.0pt;
	margin-left:-1.25in;
	line-height:22.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:1;
	font-size:20.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Rmh, li.Rmh, div.Rmh
	{mso-style-name:Rmh;
	mso-style-parent:"";
	mso-style-next:Normal;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-element:frame;
	mso-element-frame-width:78.0pt;
	mso-element-frame-hspace:12.0pt;
	mso-element-frame-vspace:12.0pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:page;
	mso-element-top:.05pt;
	mso-height-rule:exactly;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.headerrule, li.headerrule, div.headerrule
	{mso-style-name:"header rule";
	mso-style-parent:"";
	mso-style-next:Normal;
	margin-top:2.5pt;
	margin-right:1.5pt;
	margin-bottom:0in;
	margin-left:-88.5pt;
	margin-bottom:.0001pt;
	line-height:4.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	border:none;
	mso-border-top-alt:solid blue .75pt;
	padding:0in;
	mso-padding-alt:0in 0in 0in 0in;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Ermn, li.Ermn, div.Ermn
	{mso-style-name:Ermn;
	mso-style-parent:Erm;
	margin-top:1.0pt;
	margin-right:12.0pt;
	margin-bottom:3.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Sbrp, li.Sbrp, div.Sbrp
	{mso-style-name:Sbrp;
	mso-style-parent:"";
	mso-style-next:Sbre;
	margin-top:0in;
	margin-right:14.0pt;
	margin-bottom:8.0pt;
	margin-left:14.0pt;
	line-height:12.0pt;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	background:#FFFFBA;
	mso-shading:windowtext;
	mso-pattern:gray-40 yellow;
	border:none;
	mso-border-alt:solid white 1.5pt;
	padding:0in;
	mso-padding-alt:14.0pt 14.0pt 14.0pt 14.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Hn3, li.Hn3, div.Hn3
	{mso-style-name:Hn3;
	mso-style-parent:"Heading 3";
	mso-style-next:Normal;
	margin-top:4.0pt;
	margin-right:0in;
	margin-bottom:2.0pt;
	margin-left:0in;
	line-height:17.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-outline-level:3;
	font-size:15.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Term1, li.Term1, div.Term1
	{mso-style-name:Term1;
	mso-style-parent:"";
	mso-style-next:Def1;
	margin:0in;
	margin-bottom:.0001pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Lbp, li.Lbp, div.Lbp
	{mso-style-name:Lbp;
	mso-style-parent:Lb1;
	mso-style-next:Le;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:14.0pt;
	text-indent:-14.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:14.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Np2i, li.Np2i, div.Np2i
	{mso-style-name:Np2i;
	mso-style-parent:Np2;
	mso-style-next:Nei;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:14.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Term2, li.Term2, div.Term2
	{mso-style-name:Term2;
	mso-style-parent:Term1;
	mso-style-next:Def2;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:14.0pt;
	margin-bottom:.0001pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Def1, li.Def1, div.Def1
	{mso-style-name:Def1;
	mso-style-next:Term1;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:14.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Def2, li.Def2, div.Def2
	{mso-style-name:Def2;
	mso-style-parent:Def1;
	mso-style-next:Term2;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:28.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Rule, li.Rule, div.Rule
	{mso-style-name:Rule;
	mso-style-parent:"";
	mso-style-next:Rh1;
	margin-top:14.0pt;
	margin-right:1.5pt;
	margin-bottom:8.0pt;
	margin-left:-88.5pt;
	line-height:6.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	border:none;
	mso-border-bottom-alt:solid windowtext .75pt;
	padding:0in;
	mso-padding-alt:0in 0in 0in 0in;
	font-size:4.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:white;}
p.Exw, li.Exw, div.Exw
	{mso-style-name:Exw;
	mso-style-parent:Ex;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:-1.25in;
	margin-bottom:.0001pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:-71.0pt -52.0pt -33.0pt -14.0pt 5.0pt 24.0pt 43.0pt 62.0pt 81.0pt 100.0pt;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Lucida Sans Typewriter";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.Syn, li.Syn, div.Syn
	{mso-style-name:Syn;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:14.0pt 21.0pt 28.0pt 35.0pt 42.0pt 49.0pt 56.0pt 63.0pt 70.0pt 77.0pt 84.0pt 91.0pt 98.0pt 105.0pt 112.0pt 119.0pt 1.75in 133.0pt 140.0pt 147.0pt 154.0pt 161.0pt 168.0pt 175.0pt 182.0pt 189.0pt 196.0pt 203.0pt 210.0pt 217.0pt 224.0pt 231.0pt 238.0pt 245.0pt 3.5in 259.0pt 266.0pt 273.0pt 280.0pt 287.0pt 294.0pt 301.0pt 308.0pt 315.0pt 322.0pt 329.0pt 336.0pt 343.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Synw, li.Synw, div.Synw
	{mso-style-name:Synw;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:-1.25in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:-76.0pt -62.0pt -48.0pt -34.0pt -20.0pt -6.0pt 8.0pt 14.0pt 21.0pt 28.0pt 35.0pt 42.0pt 49.0pt 56.0pt 63.0pt 70.0pt 77.0pt 84.0pt 91.0pt 98.0pt 105.0pt 112.0pt 119.0pt 1.75in 133.0pt 140.0pt 147.0pt 154.0pt 161.0pt 168.0pt 175.0pt 182.0pt 189.0pt 196.0pt 203.0pt 210.0pt 217.0pt 224.0pt 231.0pt 238.0pt 245.0pt 3.5in 259.0pt 266.0pt 273.0pt 280.0pt 287.0pt 294.0pt 301.0pt 308.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Leh, li.Leh, div.Leh
	{mso-style-name:Leh;
	mso-style-parent:Le;
	mso-style-next:"Heading 1";
	margin:0in;
	margin-bottom:.0001pt;
	text-align:right;
	line-height:4.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Lmc, li.Lmc, div.Lmc
	{mso-style-name:Lmc;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Pb, li.Pb, div.Pb
	{mso-style-name:Pb;
	mso-style-parent:"";
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:-14.0pt;
	margin-bottom:.0001pt;
	line-height:4.0pt;
	mso-line-height-rule:exactly;
	page-break-before:always;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-element:frame;
	mso-element-frame-hspace:9.0pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:page;
	mso-element-top:.05pt;
	mso-height-rule:exactly;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Procp, li.Procp, div.Procp
	{mso-style-name:Procp;
	mso-style-next:Ln1;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Tpi, li.Tpi, div.Tpi
	{mso-style-name:Tpi;
	mso-style-parent:Tp;
	mso-style-next:Tp;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:26.0pt;
	text-indent:-14.0pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:26.0pt;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Tpr, li.Tpr, div.Tpr
	{mso-style-name:Tpr;
	mso-style-parent:Tp;
	mso-style-next:Tp;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:12.0pt;
	text-align:right;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Texf, li.Texf, div.Texf
	{mso-style-name:Texf;
	mso-style-parent:Ex;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:19.0pt 38.0pt 57.0pt 76.0pt 95.0pt;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Lucida Sans Typewriter";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.Tf, li.Tf, div.Tf
	{mso-style-name:Tf;
	mso-style-parent:Tp;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:2.0pt;
	margin-left:7.0pt;
	text-indent:-7.0pt;
	line-height:10.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:14.0pt;
	font-size:8.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Tpf, li.Tpf, div.Tpf
	{mso-style-name:Tpf;
	mso-style-parent:Tp;
	mso-style-next:Tp;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:14.0pt 28.0pt;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Tew, li.Tew, div.Tew
	{mso-style-name:Tew;
	mso-style-parent:Te;
	mso-style-next:Normal;
	margin-top:4.0pt;
	margin-right:1.5pt;
	margin-bottom:4.0pt;
	margin-left:-88.5pt;
	text-align:right;
	line-height:9.0pt;
	mso-pagination:widow-orphan lines-together;
	border:none;
	mso-border-top-alt:solid windowtext .75pt;
	padding:0in;
	mso-padding-alt:1.0pt 0in 0in 0in;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Art, li.Art, div.Art
	{mso-style-name:Art;
	mso-style-parent:"";
	mso-style-next:Cap;
	margin-top:4.0pt;
	margin-right:0in;
	margin-bottom:12.0pt;
	margin-left:-1.25in;
	mso-pagination:widow-orphan lines-together;
	tab-stops:0in 14.0pt 28.0pt;
	font-size:14.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Thf, li.Thf, div.Thf
	{mso-style-name:Thf;
	mso-style-parent:Th;
	mso-style-next:Th;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Tpif, li.Tpif, div.Tpif
	{mso-style-name:Tpif;
	mso-style-parent:Tpi;
	mso-style-next:Tp;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:14.0pt;
	text-indent:-14.0pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:14.0pt;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Tr, li.Tr, div.Tr
	{mso-style-name:Tr;
	mso-style-parent:"";
	mso-style-next:Tpf;
	margin:0in;
	margin-bottom:.0001pt;
	text-align:right;
	line-height:1.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	border:none;
	mso-border-top-alt:solid windowtext .75pt;
	padding:0in;
	mso-padding-alt:0in 0in 0in 0in;
	font-size:4.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Ph, li.Ph, div.Ph
	{mso-style-name:Ph;
	mso-style-parent:Ch;
	mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	line-height:32.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-element:frame;
	mso-element-frame-width:336.0pt;
	mso-element-frame-height:123.0pt;
	mso-element-frame-hspace:9.0pt;
	mso-element-wrap:no-wrap-beside;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:margin;
	mso-element-left:-1.25in;
	mso-element-top:.15pt;
	mso-height-rule:exactly;
	font-size:30.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:blue;}
p.index, li.index, div.index
	{mso-style-name:index;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:fuchsia;
	display:none;
	mso-hide:all;}
p.CapSd, li.CapSd, div.CapSd
	{mso-style-name:CapSd;
	mso-style-parent:Cap;
	margin:0in;
	margin-bottom:.0001pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:right 78.0pt;
	mso-element:frame;
	mso-element-frame-width:78.0pt;
	mso-element-frame-hspace:12.0pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:page;
	mso-element-top:.05pt;
	mso-height-rule:exactly;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.ArtSd, li.ArtSd, div.ArtSd
	{mso-style-name:ArtSd;
	mso-style-parent:Art;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:12.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:right 78.0pt;
	mso-element:frame;
	mso-element-frame-width:78.0pt;
	mso-element-frame-hspace:12.0pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:page;
	mso-element-top:.05pt;
	mso-height-rule:exactly;
	font-size:14.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Tex, li.Tex, div.Tex
	{mso-style-name:Tex;
	mso-style-parent:Texf;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:12.0pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:31.0pt 50.0pt 69.0pt 88.0pt 107.0pt;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Lucida Sans Typewriter";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.hb1, li.hb1, div.hb1
	{mso-style-name:*hb1;
	mso-style-parent:"Heading 4";
	mso-style-next:"Heading 4";
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:2.0pt;
	margin-left:0in;
	text-align:center;
	line-height:17.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-outline-level:4;
	background:#9C9CFF;
	mso-shading:windowtext;
	mso-pattern:gray-60 blue;
	mso-element:frame;
	mso-element-frame-width:75.0pt;
	mso-element-frame-hspace:12.0pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:margin;
	mso-element-left:-1.25in;
	mso-element-top:.05pt;
	mso-height-rule:exactly;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:white;
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.hb2, li.hb2, div.hb2
	{mso-style-name:*hb2;
	mso-style-parent:*hb1;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:1.0pt;
	margin-left:0in;
	text-indent:4.0pt;
	line-height:18.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-outline-level:4;
	background:#9C9CFF;
	mso-shading:windowtext;
	mso-pattern:gray-60 blue;
	mso-element:frame;
	mso-element-frame-hspace:12.0pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:margin;
	mso-element-left:right;
	mso-element-top:.1pt;
	mso-height-rule:exactly;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:white;
	mso-text-raise:1.5pt;
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Cbx, li.Cbx, div.Cbx
	{mso-style-name:*Cbx;
	mso-style-parent:"";
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:2.0pt;
	margin-left:8.0pt;
	line-height:10.5pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:22.0pt;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.Cbxe, li.Cbxe, div.Cbxe
	{mso-style-name:*Cbxe;
	mso-style-parent:Te;
	margin-top:0in;
	margin-right:1.5pt;
	margin-bottom:4.0pt;
	margin-left:-9.0pt;
	line-height:10.5pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:lined 348.0pt;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Tart, li.Tart, div.Tart
	{mso-style-name:Tart;
	mso-style-parent:Tp;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan lines-together;
	tab-stops:12.0pt 14.0pt 28.0pt;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Sbrh2, li.Sbrh2, div.Sbrh2
	{mso-style-name:Sbrh2;
	mso-style-parent:"Heading 5";
	mso-style-next:Sbrp;
	margin-top:2.0pt;
	margin-right:14.0pt;
	margin-bottom:2.0pt;
	margin-left:14.0pt;
	line-height:12.0pt;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-outline-level:5;
	background:#FFFFBA;
	mso-shading:windowtext;
	mso-pattern:gray-40 yellow;
	border:none;
	mso-border-alt:solid white 1.5pt;
	padding:0in;
	mso-padding-alt:14.0pt 14.0pt 14.0pt 14.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.SbrLb, li.SbrLb, div.SbrLb
	{mso-style-name:SbrLb;
	mso-style-parent:Lb2;
	margin-top:0in;
	margin-right:14.0pt;
	margin-bottom:4.0pt;
	margin-left:28.0pt;
	text-indent:-14.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:28.0pt;
	background:#FFFFBA;
	mso-shading:windowtext;
	mso-pattern:gray-40 yellow;
	border:none;
	mso-border-alt:solid white 1.5pt;
	padding:0in;
	mso-padding-alt:14.0pt 14.0pt 14.0pt 14.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Tei, li.Tei, div.Tei
	{mso-style-name:Tei;
	margin-top:4.0pt;
	margin-right:1.5pt;
	margin-bottom:4.0pt;
	margin-left:15.5pt;
	text-align:right;
	line-height:9.0pt;
	mso-pagination:widow-orphan lines-together;
	border:none;
	mso-border-top-alt:solid windowtext .75pt;
	padding:0in;
	mso-padding-alt:1.0pt 0in 0in 0in;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.SbrLp, li.SbrLp, div.SbrLp
	{mso-style-name:SbrLp;
	mso-style-parent:SbrLb;
	margin-top:0in;
	margin-right:14.0pt;
	margin-bottom:4.0pt;
	margin-left:28.0pt;
	text-indent:-14.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:28.0pt;
	background:#FFFFBA;
	mso-shading:windowtext;
	mso-pattern:gray-40 yellow;
	border:none;
	mso-border-alt:solid white 1.5pt;
	padding:0in;
	mso-padding-alt:14.0pt 14.0pt 14.0pt 14.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.SbrEx, li.SbrEx, div.SbrEx
	{mso-style-name:SbrEx;
	mso-style-parent:Exl;
	margin-top:0in;
	margin-right:14.0pt;
	margin-bottom:0in;
	margin-left:14.0pt;
	margin-bottom:.0001pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:33.0pt 52.0pt 71.0pt 1.25in 109.0pt 128.0pt 147.0pt 166.0pt 185.0pt 204.0pt;
	background:#FFFFBA;
	mso-shading:windowtext;
	mso-pattern:gray-40 yellow;
	border:none;
	mso-border-alt:solid white 1.5pt;
	padding:0in;
	mso-padding-alt:14.0pt 14.0pt 14.0pt 14.0pt;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Lucida Sans Typewriter";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.Exl2, li.Exl2, div.Exl2
	{mso-style-name:Exl2;
	mso-style-parent:Exl;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:28.0pt;
	margin-bottom:.0001pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:33.0pt 52.0pt 71.0pt 1.25in 109.0pt 128.0pt 147.0pt 166.0pt 185.0pt 204.0pt;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Lucida Sans Typewriter";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.Tes, li.Tes, div.Tes
	{mso-style-name:Tes;
	mso-style-parent:Le;
	mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	text-align:right;
	line-height:8.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Teh, li.Teh, div.Teh
	{mso-style-name:Teh;
	mso-style-parent:Leh;
	mso-style-next:"Heading 1";
	margin:0in;
	margin-bottom:.0001pt;
	text-align:right;
	line-height:4.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.SbrLe, li.SbrLe, div.SbrLe
	{mso-style-name:SbrLe;
	mso-style-parent:Le;
	mso-style-next:Sbrp;
	margin-top:0in;
	margin-right:14.0pt;
	margin-bottom:0in;
	margin-left:14.0pt;
	margin-bottom:.0001pt;
	text-align:right;
	line-height:8.0pt;
	mso-pagination:widow-orphan lines-together;
	background:#FFFFBA;
	mso-shading:windowtext;
	mso-pattern:gray-40 yellow;
	border:none;
	mso-border-alt:solid white 1.5pt;
	padding:0in;
	mso-padding-alt:14.0pt 14.0pt 14.0pt 14.0pt;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Tsyn, li.Tsyn, div.Tsyn
	{mso-style-name:Tsyn;
	mso-style-parent:Syn;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:14.0pt 21.0pt 28.0pt 35.0pt 42.0pt 49.0pt 56.0pt 63.0pt 70.0pt 77.0pt 84.0pt 91.0pt 98.0pt 105.0pt 112.0pt 119.0pt 1.75in 133.0pt 140.0pt 147.0pt 154.0pt 161.0pt 168.0pt 175.0pt 182.0pt 189.0pt 196.0pt 203.0pt 210.0pt 217.0pt 224.0pt 231.0pt 238.0pt 245.0pt 3.5in 259.0pt 266.0pt 273.0pt 280.0pt 287.0pt 294.0pt 301.0pt 308.0pt 315.0pt 322.0pt 329.0pt 336.0pt 343.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
 /* Page Definitions */
@page
	{mso-facing-pages:yes;}
@page Section1
	{size:8.5in 11.0in;
	margin:-127.0pt 76.5pt -115.0pt 166.5pt;
	mso-header-margin:99.35pt;
	mso-footer-margin:.25in;
	mso-gutter-margin:21.0pt;
	mso-page-numbers:161;
	mso-title-page:yes;
	mso-even-header:url("./Chap_07_files/header.htm") eh1;
	mso-header:url("./Chap_07_files/header.htm") h1;
	mso-even-footer:url("./Chap_07_files/header.htm") ef1;
	mso-footer:url("./Chap_07_files/header.htm") f1;
	mso-first-header:url("./Chap_07_files/header.htm") fh1;
	mso-first-footer:url("./Chap_07_files/header.htm") ff1;
	mso-paper-source:1;}
div.Section1
	{page:Section1;}
@page Section2
	{size:8.5in 11.0in;
	margin:-127.0pt 76.5pt -115.0pt 166.5pt;
	mso-header-margin:99.35pt;
	mso-footer-margin:.25in;
	mso-gutter-margin:21.0pt;
	mso-page-numbers:210;
	mso-even-header:url("./Chap_07_files/header.htm") eh2;
	mso-header:url("./Chap_07_files/header.htm") h1;
	mso-even-footer:url("./Chap_07_files/header.htm") ef1;
	mso-footer:url("./Chap_07_files/header.htm") f1;
	mso-first-header:url("./Chap_07_files/header.htm") fh1;
	mso-first-footer:url("./Chap_07_files/header.htm") ff1;
	mso-paper-source:1;}
div.Section2
	{page:Section2;}
-->
</style>
	</head>

	<body lang="EN-US" style="tab-interval:14.0pt">
		<div class="Section1">
			<p class="Cn" style="margin-left:0in">Chapter <span style='mso-field-code:"SEQ CHAPTER \\R 7"'>7</span></p>
			<div style="mso-element:frame;mso-element-wrap:no-wrap-beside">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" width="448" height="164">
					<tr>
						<td valign="top" align="left" height="164" style="padding-top:0in;padding-right:
  0in;padding-bottom:0in;padding-left:0in">
							<p class="Ch">Controlling Program Flow</p>
						</td>
					</tr>
				</table>
			</div>
			<![if !supportTextWrap]><br clear="ALL">
			<![endif]>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1370&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Very few programs execute all lines sequentially from <b style="mso-bidi-font-weight:normal">.STARTUP</b> to <b style="mso-bidi-font-weight:
normal">.EXIT</b>. Rather, complex program logic and efficiency dictate that you control the flow of your program<span style="letter-spacing:-1.75pt"> </span>&#151;<span style="letter-spacing:-1.75pt"> </span>jumping from one point to another, repeating an action until a condition is reached, and passing control to and from procedures. This chapter describes various ways for controlling program flow and several features that simplify coding program-control constructs.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1371&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The first section covers jumps from one point in the program to another. It explains how MASM 6.1 optimizes both unconditional and conditional jumps under certain circumstances, so that you do not have to specify every attribute. The section also describes instructions you can use to test conditional jumps.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1372&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The next section describes loop structures that repeat actions or evaluate conditions. It discusses MASM directives, such as <b style="mso-bidi-font-weight:normal">.WHILE</b> and <b style="mso-bidi-font-weight:
normal">.REPEAT</b>, that generate appropriate compare, loop, and jump instructions for you, and the <b style="mso-bidi-font-weight:normal">.IF</b>, <b style="mso-bidi-font-weight:normal">.ELSE</b>, and <b style="mso-bidi-font-weight:
normal">.ELSEIF</b> directives that generate jump instructions.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1373&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The &#147;Procedures&#148; section in this chapter explains how to write an assembly-language procedure. It covers the extended functionality for <b style="mso-bidi-font-weight:normal">PROC</b>, a <b style="mso-bidi-font-weight:
normal">PROTO</b> directive that lets you write procedure prototypes similar to those used in C, an <b style="mso-bidi-font-weight:normal">INVOKE</b> directive that automates parameter passing, and options for the stack-frame setup inside procedures.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1374&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The last section explains how to pass program control to an interrupt routine.</p>
			<h1 style="margin-left:0in">Jumps</h1>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Jumps:overview&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1001&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instruction Pointer (IP)
register&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1002&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Jumps are the most direct way to change program control from one location to another. At the processor level, jumps work by changing the value of the IP (Instruction Pointer) register to a target offset and, for far jumps, by changing the CS register to a new segment address. Jump instructions fall into only two categories: conditional and unconditional.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1375&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<h2 style="margin-left:0in">Unconditional Jumps</h2>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Jumps:unconditional:overview&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1003&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:JMP&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1004&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;JMP instruction&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1005&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The <b style="mso-bidi-font-weight:normal">JMP</b> instruction transfers control unconditionally to another instruction. <b style="mso-bidi-font-weight:normal">JMP</b>&#146;s single operand contains the address of the target instruction.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1376&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Unconditional jumps skip over code that should not be executed, as shown here:</p>
			<p class="Ex">; Handle one case<br>
			label1: .<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>jmp continue<br>
			<br>
			; Handle second case<br>
			label2: .<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>jmp continue<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			continue:<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1377&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The distance of the target from the jump instruction and the size of the operand determine the assembler&#146;s encoding of the instruction. The longer the distance, the more bytes the assembler uses to code the instruction. In versions of MASM prior to 6.0, unconditional <b style="mso-bidi-font-weight:
normal">NEAR</b> jumps sometimes generated inefficient code, but MASM can now optimize unconditional jumps.</p>
			<h3>Jump Optimizing</h3>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Jumps:optimization, automatic&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1006&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Unconditional jumps,
optimizing&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1007&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The assembler determines the smallest encoding possible for the direct unconditional jump. MASM does not require a distance operator, so you do not have to determine the correct distance of the jump. If you specify a distance, it overrides any assembler optimization. If the specified distance falls short of the target address, the assembler generates an error. If the specified distance is longer than the jump requires, the assembler encodes the given distance and does not optimize it.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1378&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The assembler optimizes jumps when the following conditions are met:</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1379&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>You do not specify <b style="mso-bidi-font-weight:normal">SHORT</b>, <b style="mso-bidi-font-weight:normal">NEAR</b>, <b style="mso-bidi-font-weight:
normal">FAR</b>, <b style="mso-bidi-font-weight:normal">NEAR16</b>, <b style="mso-bidi-font-weight:normal">NEAR32</b>, <b style="mso-bidi-font-weight:
normal">FAR16</b>, <b style="mso-bidi-font-weight:normal">FAR32</b>, or <b style="mso-bidi-font-weight:normal">PROC</b> as the distance of the target.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1380&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>The target of the jump is not external and is in the same segment as the jump instruction. If the target is in a different segment (but in the same group), it is treated as though it were external.</p>
			<p class="Le"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1381&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">If these two conditions are met, MASM uses the instruction, distance, and size of the operand to determine how to optimize the encoding for the jump. No syntax changes are necessary.</p>
			<div style="border:none;border-bottom:solid windowtext .75pt;padding:0in 0in 1.0pt 0in">
				<p class="Ns"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			</div>
			<div style="mso-element:frame;mso-element-wrap:around">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" height="16" align="left">
					<tr>
						<td valign="top" align="left" height="16" style="padding-top:0in;padding-right:
  6.5pt;padding-bottom:0in;padding-left:6.5pt">
							<p class="Nh">Note</p>
						</td>
					</tr>
				</table>
			</div>
			<p class="Np1">This information about jump optimizing also applies to conditional jumps on the 80386/486.</p>
			<div style="border:none;border-top:solid windowtext .75pt;padding:1.0pt 0in 0in 0in">
				<p class="Ne"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			</div>
			<h3>Indirect Operands</h3>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Jumps:unconditional:indirect operands&quot;<span style='mso-hide:none'>
\z &quot;FLOWWW.DOC-1008&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">An indirect operand provides a pointer to the target address, rather than the address itself. A pointer is a variable that contains an address. The processor distinguishes indirect (pointer) operands from direct (address) operands by the instruction&#146;s context.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1382&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">You can specify the pointer&#146;s size with the <b style="mso-bidi-font-weight:normal">WORD</b>, <b style="mso-bidi-font-weight:
normal">DWORD</b>, or <b style="mso-bidi-font-weight:normal">FWORD</b> attributes. Default sizes are based on <b style="mso-bidi-font-weight:normal">.MODEL</b> and the default segment size.</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>jmp<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>[bx<span style="letter-spacing:-1.5pt">]</span><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Uses .MODEL and segment size defaults<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>jmp<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>WORD PTR [bx] ; A NEAR16 indirect call<br style="mso-special-character:
line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1383&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">If the indirect operand is a register, the jump is always a <b style="mso-bidi-font-weight:normal">NEAR16</b> jump for a 16-bit register, and <b style="mso-bidi-font-weight:normal">NEAR32</b> for a 32-bit register:</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>jmp<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>bx<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; NEAR16 jump<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>jmp<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ebx<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; NEAR32<span style="mso-spacerun: yes">&nbsp; </span>jump<br style="mso-special-character:
line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1384&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">A <b style="mso-bidi-font-weight:normal">DWORD</b> indirect operand, however, is ambiguous to the assembler.</p>
			<p class="Ex">jmp<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>DWORD PTR [var<span style="letter-spacing:-1.5pt">]</span><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; A NEAR32 jump in a 32-bit segment;<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>; a FAR16 jump in a 16-bit segment<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;TYPEDEF directive:indirect operands, defining&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1009&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">In this case, your code must clear the ambiguity with the <b style="mso-bidi-font-weight:normal">NEAR32</b> or <b style="mso-bidi-font-weight:
normal">FAR16</b> keywords. The following example shows how to use <b style="mso-bidi-font-weight:normal">TYPEDEF</b> to define <b style="mso-bidi-font-weight:
normal">NEAR32</b> and <b style="mso-bidi-font-weight:normal">FAR16</b> pointer types.</p>
			<p class="Ex">NFP<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>TYPEDEF PTR NEAR32<br>
			FFP<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>TYPEDEF PTR FAR16<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>jmp<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>NFP PTR [var] ; NEAR32 indirect jump<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>jmp<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>FFP PTR [var] ; FAR16<span style="mso-spacerun: yes">&nbsp; </span>indirect jump<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Jumps:unconditional:jump tables&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1010&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Jumps:unconditional:jump
tables&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1011&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">You can use an unconditional jump as a form of conditional jump by specifying the address in a register or indirect memory operand. Also, you can use indirect memory operands to construct jump tables that work like C <b style="mso-bidi-font-weight:normal">switch</b> statements, Pascal <b style="mso-bidi-font-weight:normal">CASE</b> statements, or Basic <b style="mso-bidi-font-weight:normal">ON GOTO</b>, <b style="mso-bidi-font-weight:
normal">ON GOSUB</b>, or <b style="mso-bidi-font-weight:normal">SELECT CASE</b> statements, as shown in the following example.</p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-element-top:0in;
mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in;mso-element:frame;mso-element-wrap:around;
  mso-element-top:0in;mso-height-rule:exactly"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<p class="Ex">NPVOID<span style="mso-spacerun: yes">&nbsp; </span>TYPEDEF NEAR PTR<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.DATA<br>
			ctl_tbl NPVOID<span style="mso-spacerun: yes">&nbsp; </span>extended,<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>; Null key (extended code)<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>ctrla,<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Address of CONTROL-A key routine<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>ctrlb<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Address of CONTROL-B key routine<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.CODE<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ah, 8h<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Get a key<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>int<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>21h<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>cbw<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Stretch AL into AX<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>bx, ax<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Copy<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>shl<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>bx, 1<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Convert to address<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>jmp<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ctl_tbl[bx]<span style="mso-spacerun: yes">&nbsp; </span>; Jump to key routine<br>
			<br>
			extended:<span style="mso-spacerun: yes">&nbsp;&nbsp; </span><br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ah, 8h<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Get second key of extended key<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp; </span><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>int<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>21h<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Use another jump table<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>for extended keys<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>jmp<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>next<br>
			ctrla:<span style="mso-spacerun: yes">&nbsp; </span>.<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; CONTROL-A code here<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>jmp<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>next<br>
			ctrlb:<span style="mso-spacerun: yes">&nbsp; </span>.<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; CONTROL-B code here<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>jmp<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>next<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			next:<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>.<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Continue<br style="mso-special-character:
line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1385&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">In this instance, the indirect memory operands point to addresses of routines for handling different keystrokes.</p>
			<h2 style="margin-left:0in">Conditional Jumps</h2>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Jumps:conditional:overview&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1012&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The most common way to transfer control in assembly language is to use a conditional jump. This is a two-step process:</p>
			<p class="Ln1" style="margin-left:22.0pt"><span style="mso-tab-count:1"></span>1.<span style="mso-tab-count:1">&nbsp; </span>First test the condition.</p>
			<p class="Ln1" style="margin-left:22.0pt"><span style="mso-tab-count:1"></span>2.<span style="mso-tab-count:1">&nbsp; </span>Then jump if the condition is true or continue if it is false.</p>
			<p class="Le"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<p class="MsoNormal">All conditional jumps except two (<b style="mso-bidi-font-weight:
normal">JCXZ</b> and <b style="mso-bidi-font-weight:normal">JECXZ</b>) use the processor flags for their criteria. Thus, any statement that sets or clears a flag can serve as a test basis for a conditional jump. The jump statement can be any one of 30 conditional-jump instructions. A conditional-jump instruction takes a single operand containing the target address. You cannot use a pointer value as a target as you can with unconditional jumps.</p>
			<h3>Jumping Based on the CX Register</h3>
			<p class="index"><!--[if supportFields]><b style='mso-bidi-font-weight:normal'><span
style='font-size:9.0pt'><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1387&quot;</span></b><![endif]-->
			<!--[if supportFields]><b
style='mso-bidi-font-weight:normal'><span style='font-size:9.0pt'><span
style='mso-element:field-end'></span></span></b><![endif]-->
			</p>
			<p class="MsoNormal"><b style="mso-bidi-font-weight:normal">JCXZ</b> and <b style="mso-bidi-font-weight:normal">JECXZ</b> are special conditional jumps that do not consult the processor flags. Instead, as their names imply, these instructions cause a jump only if the CX or ECX register is zero. The use of <b style="mso-bidi-font-weight:normal">JCXZ</b> and <b style="mso-bidi-font-weight:
normal">JECXZ</b> with program loops is covered in the next section, &#147;Loops.&#148;</p>
			<h3>Jumping Based on the Processor Flags</h3>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Jumps:conditional:flag status&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1013&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Jumps:conditional:instructions
(list)&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1014&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:jump&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1015&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Jumps:instructions&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1016&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:JO&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1017&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE
&quot;Instructions:conditional-jump&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1018&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The remaining conditional jumps in the processor&#146;s repertoire all depend on the status of the flags register. As the following list shows, several conditional jumps have two or three names<span style="letter-spacing:-1.75pt"> </span>&#151;<span style="letter-spacing:-1.75pt"> </span><b style="mso-bidi-font-weight:normal">JE</b> (Jump if Equal) and <b style="mso-bidi-font-weight:normal">JZ</b> (Jump if Zero), for example. Shared names assemble to exactly the same machine instruction, so you may choose whichever mnemonic seems more appropriate. Jumps that depend on the status of the flags register include:</p>
			<table border="0" cellspacing="0" cellpadding="0" style="margin-left:.4pt;border-collapse:
 collapse;mso-padding-alt:0in 0in 0in 0in">
				<tr>
					<td width="94" valign="top" style="width:70.15pt;padding:0in 0in 0in 0in">
						<p class="Thf">Instruction</p>
						<p class="Thf"></p>
					</td>
					<td width="370" valign="top" style="width:277.8pt;padding:0in 0in 0in 0in">
						<p class="Th">Jumps if</p>
						<p class="Th"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="464" colspan="2" valign="top" style="width:347.95pt;padding:0in 0in 0in 0in">
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="94" valign="top" style="width:70.15pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">JC/JB/JNAE</b></p>
						<p class="Tpf"></p>
					</td>
					<td width="370" valign="top" style="width:277.8pt;padding:0in 0in 0in 0in">
						<p class="Tp">Carry flag is set</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
				</tr>
				<tr>
					<td width="94" valign="top" style="width:70.15pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">JNC/JNB/JAE</b></p>
						<p class="Tpf"></p>
					</td>
					<td width="370" valign="top" style="width:277.8pt;padding:0in 0in 0in 0in">
						<p class="Tp">Carry flag is clear</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="94" valign="top" style="width:70.15pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">JBE/JNA</b></p>
						<p class="Tpf"></p>
					</td>
					<td width="370" valign="top" style="width:277.8pt;padding:0in 0in 0in 0in">
						<p class="Tp">Either carry or zero flag is set</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="94" valign="top" style="width:70.15pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">JA/JNBE</b></p>
						<p class="Tpf"></p>
					</td>
					<td width="370" valign="top" style="width:277.8pt;padding:0in 0in 0in 0in">
						<p class="Tp">Carry and zero flag are clear</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="94" valign="top" style="width:70.15pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">JE/JZ</b><b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt"><o:p></o:p></span></b></p>
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt"><o:p></o:p></span></b></p>
					</td>
					<td width="370" valign="top" style="width:277.8pt;padding:0in 0in 0in 0in">
						<p class="Tp">Zero flag is set</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="94" valign="top" style="width:70.15pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">JNE/JNZ</b></p>
						<p class="Tpf"></p>
					</td>
					<td width="370" valign="top" style="width:277.8pt;padding:0in 0in 0in 0in">
						<p class="Tp">Zero flag is clear</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="94" valign="top" style="width:70.15pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">JL/JNGE</b></p>
						<p class="Tpf"></p>
					</td>
					<td width="370" valign="top" style="width:277.8pt;padding:0in 0in 0in 0in">
						<p class="Tp">Sign flag <!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
  185 \f &quot;Symbol&quot;<![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						overflow flag</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="94" valign="top" style="width:70.15pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">JGE/JNL</b></p>
						<p class="Tpf"></p>
					</td>
					<td width="370" valign="top" style="width:277.8pt;padding:0in 0in 0in 0in">
						<p class="Tp">Sign flag = overflow flag</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="94" valign="top" style="width:70.15pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">JLE/JNG</b></p>
						<p class="Tpf"></p>
					</td>
					<td width="370" valign="top" style="width:277.8pt;padding:0in 0in 0in 0in">
						<p class="Tp">Zero flag is set or sign <!--[if supportFields]><span
  style='mso-element:field-begin'></span>SYMBOL 185 \f &quot;Symbol&quot;<![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						overflow</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="94" valign="top" style="width:70.15pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">JG/JNLE</b></p>
						<p class="Tpf"></p>
					</td>
					<td width="370" valign="top" style="width:277.8pt;padding:0in 0in 0in 0in">
						<p class="Tp">Zero flag is clear and sign = overflow</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="94" valign="top" style="width:70.15pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">JS</b></p>
						<p class="Tpf"></p>
					</td>
					<td width="370" valign="top" style="width:277.8pt;padding:0in 0in 0in 0in">
						<p class="Tp">Sign flag is set</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="94" valign="top" style="width:70.15pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">JNS</b></p>
						<p class="Tpf"></p>
					</td>
					<td width="370" valign="top" style="width:277.8pt;padding:0in 0in 0in 0in">
						<p class="Tp">Sign flag is clear</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="94" valign="top" style="width:70.15pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">JO</b></p>
						<p class="Tpf"></p>
					</td>
					<td width="370" valign="top" style="width:277.8pt;padding:0in 0in 0in 0in">
						<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
  &quot;JO instruction&quot;<span style='mso-hide:none'> \z
  &quot;FLOWWW.DOC-1019&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						</p>
						<p class="Tp">Overflow flag is set</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="94" valign="top" style="width:70.15pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">JNO</b></p>
						<p class="Tpf"></p>
					</td>
					<td width="370" valign="top" style="width:277.8pt;padding:0in 0in 0in 0in">
						<p class="Tp">Overflow flag is clear</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="94" valign="top" style="width:70.15pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">JP/JPE</b></p>
						<p class="Tpf"></p>
					</td>
					<td width="370" valign="top" style="width:277.8pt;padding:0in 0in 0in 0in">
						<p class="Tp">Parity flag is set (even parity)</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="94" valign="top" style="width:70.15pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">JNP/JPO</b></p>
						<p class="Tpf"></p>
					</td>
					<td width="370" valign="top" style="width:277.8pt;padding:0in 0in 0in 0in">
						<p class="Tp">Parity flag is clear (odd parity)</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
			</table>
			<p class="Le"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1388&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The last two jumps in the list, <b style="mso-bidi-font-weight:
normal">JPE</b> (Jump if Parity Even) and <b style="mso-bidi-font-weight:normal">JPO</b> (Jump if Parity Odd), are useful only for communications programs. The processor sets the parity flag if an operation produces a result with an even number of set bits. A communications program can compare the flag against the parity bit received through the serial port to test for transmission errors.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Jumps:conditional:flag status&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1020&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Jumps:conditional:instructions
(list)&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1021&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:jump&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1022&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Jumps:instructions&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1023&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE
&quot;Instructions:conditional-jump&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1024&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The conditional jumps in the preceding list can follow any instruction that changes the processor flags, as these examples show:</p>
			<p class="Ex">; Uses JO to handle overflow condition<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>add<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, bx<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Add two values<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>jo<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>overflow<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; If value too large, adjust<br>
			<br>
			; Uses JNZ to check for zero as the result of subtraction<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>sub<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, bx<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Subtract<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>cx, Count<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; First, initialize CX<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>jnz<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>skip<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; If the result is not zero, continue<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>call<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>zhandler<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Else do special case<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1389&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">As the second example shows, the jump does not have to immediately follow the instruction that alters the flags. Since <b style="mso-bidi-font-weight:normal">MOV</b> does not change the flags, it can appear between the <b style="mso-bidi-font-weight:normal">SUB</b> instruction and the dependent jump.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1390&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">There are three categories of conditional jumps:</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1391&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>Comparison of two values</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1392&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>Individual bit settings in a value</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1393&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>Whether a value is zero or nonzero</p>
			<p class="Le"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1394&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<h4>Jumps Based on Comparison of Two Values</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Jumps:conditional:comparisons&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1025&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Jumps:instructions&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1026&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The <b style="mso-bidi-font-weight:normal">CMP</b> instruction is the most common way to test for conditional jumps. It compares two values without changing either, then sets or clears the processor flags according to the results of the comparison.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Instructions:CMP&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1027&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;CMP instruction&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1028&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Internally, the <b style="mso-bidi-font-weight:normal">CMP</b> instruction is the same as the <b style="mso-bidi-font-weight:normal">SUB</b> instruction, except that <b style="mso-bidi-font-weight:normal">CMP</b> does not change the destination operand. Both set flags according to the result of the subtraction.</p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Jumps:conditional:instructions (list)&quot;<span style='mso-hide:none'>
\z &quot;FLOWWW.DOC-1029&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:jump&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1030&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Jumps:instructions&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1031&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">You can compare signed or unsigned values, but you must choose the subsequent conditional jump to reflect the correct value type. For example, <b style="mso-bidi-font-weight:normal">JL</b> (Jump if Less Than) and <b style="mso-bidi-font-weight:normal">JB</b> (Jump if Below) may seem conceptually similar, but a failure to understand the difference between them can result in program bugs. Table 7.1 shows the correct conditional jumps for comparisons of signed and unsigned values. The table shows the zero, carry, sign, and overflow flags as ZF, CF, SF, and OF, respectively.</p>
			<table border="0" cellspacing="0" cellpadding="0" style="margin-left:.4pt;border-collapse:
 collapse;mso-padding-alt:0in 0in 0in 0in">
				<tr>
					<td width="480" colspan="6" valign="top" style="width:5.0in;padding:0in 0in 0in 0in">
						<p class="Tt">Table 7.1<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Conditional Jumps Based on Comparisons of Two Values</p>
						<p class="Tt"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr style="mso-row-margin-right:12.0pt">
					<td width="464" colspan="5" valign="top" style="width:348.0pt;padding:0in 0in 0in 0in">
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
					<td style="mso-cell-special:placeholder;border:none;padding:0in 0in 0in 0in" width="16">
						<p class="MsoNormal">&nbsp;</td>
				</tr>
				<tr>
					<td width="211" colspan="2" valign="top" style="width:2.2in;padding:0in 0in 0in 0in">
						<p class="Th" style="margin-left:0in;tab-stops:76.5pt">Signed Comparisons<br>
						Instruction<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="display:none;mso-hide:all"><span style="mso-tab-count:1"></span></span>Jump if True</p>
						<p class="Th" style="margin-left:0in;tab-stops:76.5pt"></p>
					</td>
					<td width="20" valign="top" style="width:14.7pt;padding:0in 0in 0in 0in">
						<p class="Th"></p>
						<p class="Th"></p>
					</td>
					<td width="249" colspan="3" valign="top" style="width:186.9pt;padding:0in 0in 0in 0in">
						<p class="Th">Unsigned Comparisons<br>
						Instruction<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Jump if True</p>
						<p class="Th"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr style="mso-row-margin-right:12.0pt">
					<td width="464" colspan="5" valign="top" style="width:348.0pt;padding:0in 0in 0in 0in">
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
					<td style="mso-cell-special:placeholder;border:none;padding:0in 0in 0in 0in" width="16">
						<p class="MsoNormal">&nbsp;</td>
				</tr>
				<tr>
					<td width="86" valign="top" style="width:.9in;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">JE</b></p>
						<p class="Tpf"></p>
					</td>
					<td width="125" valign="top" style="width:1.3in;padding:0in 0in 0in 0in">
						<p class="Tp">ZF = 1</p>
						<p class="Tp"></p>
					</td>
					<td width="20" valign="top" style="width:14.7pt;padding:0in 0in 0in 0in">
						<p class="Tp"></p>
						<p class="Tp"></p>
					</td>
					<td width="99" valign="top" style="width:74.4pt;padding:0in 0in 0in 0in">
						<p class="Tp"><b style="mso-bidi-font-weight:normal">JE</b></p>
						<p class="Tp"></p>
					</td>
					<td width="150" colspan="2" valign="top" style="width:112.5pt;padding:0in 0in 0in 0in">
						<p class="Tp">ZF = 1</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
				</tr>
				<tr>
					<td width="86" valign="top" style="width:.9in;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">JNE</b></p>
						<p class="Tpf"></p>
					</td>
					<td width="125" valign="top" style="width:1.3in;padding:0in 0in 0in 0in">
						<p class="Tp">ZF = 0</p>
						<p class="Tp"></p>
					</td>
					<td width="20" valign="top" style="width:14.7pt;padding:0in 0in 0in 0in">
						<p class="Tp"></p>
						<p class="Tp"></p>
					</td>
					<td width="99" valign="top" style="width:74.4pt;padding:0in 0in 0in 0in">
						<p class="Tp"><b style="mso-bidi-font-weight:normal">JNE</b></p>
						<p class="Tp"></p>
					</td>
					<td width="150" colspan="2" valign="top" style="width:112.5pt;padding:0in 0in 0in 0in">
						<p class="Tp">ZF = 0</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="86" valign="top" style="width:.9in;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">JG/JNLE</b></p>
						<p class="Tpf"></p>
					</td>
					<td width="125" valign="top" style="width:1.3in;padding:0in 0in 0in 0in">
						<p class="Tp">ZF = 0 and SF = OF</p>
						<p class="Tp"></p>
					</td>
					<td width="20" valign="top" style="width:14.7pt;padding:0in 0in 0in 0in">
						<p class="Tp"></p>
						<p class="Tp"></p>
					</td>
					<td width="99" valign="top" style="width:74.4pt;padding:0in 0in 0in 0in">
						<p class="Tp"><b style="mso-bidi-font-weight:normal">JA/JNBE</b></p>
						<p class="Tp"></p>
					</td>
					<td width="150" colspan="2" valign="top" style="width:112.5pt;padding:0in 0in 0in 0in">
						<p class="Tp">CF = 0 and ZF = 0</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="86" valign="top" style="width:.9in;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">JLE/JNG</b></p>
						<p class="Tpf"></p>
					</td>
					<td width="125" valign="top" style="width:1.3in;padding:0in 0in 0in 0in">
						<p class="Tp">ZF = 1 or SF <!--[if supportFields]><span style='mso-element:
  field-begin'></span>SYMBOL 185 \f &quot;Symbol&quot;<![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						OF</p>
						<p class="Tp"></p>
					</td>
					<td width="20" valign="top" style="width:14.7pt;padding:0in 0in 0in 0in">
						<p class="Tp"></p>
						<p class="Tp"></p>
					</td>
					<td width="99" valign="top" style="width:74.4pt;padding:0in 0in 0in 0in">
						<p class="Tp"><b style="mso-bidi-font-weight:normal">JBE/JNA</b></p>
						<p class="Tp"></p>
					</td>
					<td width="150" colspan="2" valign="top" style="width:112.5pt;padding:0in 0in 0in 0in">
						<p class="Tp">CF = 1 or ZF = 1</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="86" valign="top" style="width:.9in;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">JL/JNGE</b></p>
						<p class="Tpf"></p>
					</td>
					<td width="125" valign="top" style="width:1.3in;padding:0in 0in 0in 0in">
						<p class="Tp">SF <!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
  185 \f &quot;Symbol&quot;<![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						OF</p>
						<p class="Tp"></p>
					</td>
					<td width="20" valign="top" style="width:14.7pt;padding:0in 0in 0in 0in">
						<p class="Tp"></p>
						<p class="Tp"></p>
					</td>
					<td width="99" valign="top" style="width:74.4pt;padding:0in 0in 0in 0in">
						<p class="Tp"><b style="mso-bidi-font-weight:normal">JB/JNAE</b></p>
						<p class="Tp"></p>
					</td>
					<td width="150" colspan="2" valign="top" style="width:112.5pt;padding:0in 0in 0in 0in">
						<p class="Tp">CF = 1</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="86" valign="top" style="width:.9in;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">JGE/JNL</b></p>
						<p class="Tpf"></p>
					</td>
					<td width="125" valign="top" style="width:1.3in;padding:0in 0in 0in 0in">
						<p class="Tp">SF = OF</p>
						<p class="Tp"></p>
					</td>
					<td width="20" valign="top" style="width:14.7pt;padding:0in 0in 0in 0in">
						<p class="Tp"></p>
						<p class="Tp"></p>
					</td>
					<td width="99" valign="top" style="width:74.4pt;padding:0in 0in 0in 0in">
						<p class="Tp"><b style="mso-bidi-font-weight:normal">JAE/JNB</b></p>
						<p class="Tp"></p>
					</td>
					<td width="150" colspan="2" valign="top" style="width:112.5pt;padding:0in 0in 0in 0in">
						<p class="Tp">CF = 0</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<![if !supportMisalignedColumns]>
				<tr height="0">
					<td width="86" style="border:none"></td>
					<td width="125" style="border:none"></td>
					<td width="20" style="border:none"></td>
					<td width="99" style="border:none"></td>
					<td width="134" style="border:none"></td>
					<td width="16" style="border:none"></td>
				</tr>
				<![endif]>
			</table>
			<div style="border:none;border-top:solid windowtext .75pt;padding:1.0pt 0in 0in 0in">
				<p class="Te"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			</div>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1395&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The mnemonic names of jumps always refer to the comparison of <b style="mso-bidi-font-weight:normal">CMP</b>&#146;s first operand (destination) with the second operand (source). For instance, in this example, <b style="mso-bidi-font-weight:normal">JG</b> tests whether the first operand is greater than the second.</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>cmp<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, bx ; Compare AX and BX<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>jg<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>next1<span style="mso-spacerun: yes">&nbsp; </span>; Equivalent to: If ( AX &gt; BX ) goto next1</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>jl<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>next2<span style="mso-spacerun: yes">&nbsp; </span>; Equivalent to: If ( AX &lt; BX ) goto next2<br style="mso-special-character:
line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<h4>Jumps Based on Bit Settings</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Jumps:conditional:bit status&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1032&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:TEST&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1033&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;TEST instruction&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1034&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The individual bit settings in a single value can also serve as the criteria for a conditional jump. The <b style="mso-bidi-font-weight:
normal">TEST</b> instruction tests whether specific bits in an operand are on or off (set or clear), and sets the zero flag accordingly.</p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1396&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The <b style="mso-bidi-font-weight:normal">TEST</b> instruction is the same as the <b style="mso-bidi-font-weight:normal">AND</b> instruction, except that <b style="mso-bidi-font-weight:normal">TEST</b> changes neither operand. The following example shows an application of <b style="mso-bidi-font-weight:normal">TEST</b>.</p>
			<p class="Ex" style="page-break-after:auto"><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.DATA<br>
			bits<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>BYTE<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>?<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.CODE<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			; If bit 2 or bit 4 is set, then call task_a<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Assume &quot;bits&quot; is 0D3h<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>11010011<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>test<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>bits, 10100y<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>; If 2 or 4 is set<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>AND 00010100<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>jz<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>skip1<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>--------<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>call<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>task_a<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Then call task_a<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>00010000<br>
			skip1:<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Jump taken<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			; If bits 2 and 4 are clear, then call task_b<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Assume &quot;bits&quot; is 0E9h<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>11101001<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>test<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>bits, 10100y<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>; If 2 and 4 are clear AND 00010100<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>jnz<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>skip2<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>--------<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>call<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>task_b<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Then call task_b<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>00000000<br>
			skip2:<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Jump taken<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1397&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The source operand for <b style="mso-bidi-font-weight:normal">TEST</b> is often a mask in which the test bits are the only bits set. The destination operand contains the value to be tested. If all the bits set in the mask are clear in the destination operand, <b style="mso-bidi-font-weight:normal">TEST</b> sets the zero flag. If any of the flags set in the mask are also set in the destination operand, <b style="mso-bidi-font-weight:normal">TEST</b> clears the zero flag.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Instructions:TEST&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1035&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;TEST instruction&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1036&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The 80386/486 processors provide additional bit-testing instructions. The <b style="mso-bidi-font-weight:normal">BT</b> (Bit Test) series of instructions copy a specified bit from the destination operand to the carry flag. A <b style="mso-bidi-font-weight:normal">JC</b> or <b style="mso-bidi-font-weight:normal">JNC</b> can then route program flow depending on the result. For variations on the <b style="mso-bidi-font-weight:
normal">BT</b> instruction, see the <i style="mso-bidi-font-style:normal">Reference</i>.</p>
			<h4>Jumps Based on a Value of Zero</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Instructions:OR&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1037&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;OR instruction&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1038&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Testing for zero&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1039&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Jumps:conditional:zero
value&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1040&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;aa&quot; \z
&quot;FLOWWW.DOC-1398&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">A program often needs to jump based on whether a particular register contains a value of zero. We&#146;ve seen how the <b style="mso-bidi-font-weight:
normal">JCXZ</b> instruction jumps depending on the value in the CX register. You can test for zero in other data registers nearly as efficiently with the <b style="mso-bidi-font-weight:normal">OR</b> instruction. A program can <b style="mso-bidi-font-weight:normal">OR</b> a register with itself without changing the register&#146;s contents, then act on the resulting flags status. For example, the following example tests whether BX is zero:</p>
			<p class="Ex" style="page-break-after:auto"><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>or<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>bx, bx<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Is BX = 0?<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>jz<span style="mso-spacerun:
yes">&nbsp; </span><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;</span>is_zero<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Jump if so<br style="mso-special-character:
line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1399&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">This code is functionally equivalent to:</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>cmp<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>bx, 0<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Is BX = 0?<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>je<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>is_zero<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Jump if so<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1400&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">but produces smaller and faster code, since it does not use an immediate number as an operand. The same technique also lets you test a register&#146;s sign bit:</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>or<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>dx, dx<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Is DX sign bit set?<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>js<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>sign_set<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Jump if so<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Jumps:conditional:extending&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1041&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Jumps:extension,
automatic&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1042&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Operators:NEAR&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1043&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Operators:FAR&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1044&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Operators:SHORT&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1045&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<h3>Jump Extending<span style="mso-spacerun: yes">&nbsp; </span></h3>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1401&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Unlike an unconditional jump, a conditional jump cannot reference a label more than 128 bytes away. For example, the following statement is valid as long as <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>target</span> is within a distance of 128 bytes:</p>
			<p class="Ex">; Jump to target less than 128 bytes away<br>
			<span style="mso-spacerun: yes">&nbsp;</span><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>jz<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>target<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; If previous operation resulted<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>in zero, jump to target<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Jumps:conditional:extending&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1046&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Jumps:automatic&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1047&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">However, if <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>target</span> is too distant, the following sequence is necessary to enable a longer jump. Note this sequence is logically equivalent to the preceding example:</p>
			<p class="Ex">; Jumps to distant targets previously required two steps<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>jnz<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>skip<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; If previous operation result is<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>NOT zero, jump to &quot;skip&quot;<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>jmp<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>target<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>Otherwise, jump to target<br>
			skip:<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;NEAR operator&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1048&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;FAR operator&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1049&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;SHORT operator&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1050&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">MASM can automate jump-extending for you. If you target a conditional jump to a label farther than 128 bytes away, MASM rewrites the instruction with an unconditional jump, which ensures that the jump can reach its target. If <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>target</span> lies within a 128-byte range, the assembler encodes the instruction <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>jz target</span> as is. Otherwise, MASM generates two substitute instructions:</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>jne $ + 2 + (length in bytes of the next instruction)<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>jmp NEAR PTR target<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1402&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The assembler generates this same code sequence if you specify the distance with <b style="mso-bidi-font-weight:normal">NEAR PTR</b>, <b style="mso-bidi-font-weight:normal">FAR PTR</b>, or <b style="mso-bidi-font-weight:
normal">SHORT</b>. Therefore,</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>jz<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>NEAR PTR target<br style="mso-special-character:
line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1403&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">becomes</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>jne<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>$ + 5<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>jmp<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>NEAR PTR target<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1404&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">even if <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>target</span> is less than 128 bytes away.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;OPTION directive:NOLJMP&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1051&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;NOLJMP argument, OPTION
directive&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1052&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">MASM enables automatic jump expansion by default, but you can turn it off with the <b style="mso-bidi-font-weight:normal">NOLJMP</b> form of the <b style="mso-bidi-font-weight:normal">OPTION</b> directive. For information about the <b style="mso-bidi-font-weight:normal">OPTION</b> directive, see page 24.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1405&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">If the assembler generates code to extend a conditional jump, it issues a level 3 warning saying that the conditional jump has been lengthened. You can set the warning level to 1 for development and to level 3 for a final optimizing pass to see if you can shorten jumps by reorganizing.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1406&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">If you specify the distance for the jump and the target is out of range for that distance, a &#147;Jump out of Range&#148; error results.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Instructions:JCXZ&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1053&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:JECXZ&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1054&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;JCXZ instruction&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1055&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;JECXZ instruction&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1056&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:jump&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1057&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Since the <b style="mso-bidi-font-weight:normal">JCXZ</b> and <b style="mso-bidi-font-weight:normal">JECXZ</b> instructions do not have logical negations, expansion of the jump instruction to handle targets with unspecified distances cannot be performed for those instructions. Therefore, the distance must always be short.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1407&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The size and distance of the target operand determines the encoding for conditional or unconditional jumps to externals or targets in different segments. The jump-extending and optimization features do not apply in this case.</p>
			<div style="border:none;border-bottom:solid windowtext .75pt;padding:0in 0in 1.0pt 0in">
				<p class="Ns"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			</div>
			<div style="mso-element:frame;mso-element-wrap:around">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" height="16" align="left">
					<tr>
						<td valign="top" align="left" height="16" style="padding-top:0in;padding-right:
  6.5pt;padding-bottom:0in;padding-left:6.5pt">
							<p class="Nh">Note</p>
						</td>
					</tr>
				</table>
			</div>
			<p class="Np1">Conditional jumps on the 80386 and 80486 processors can be to targets up to 32K away, so jump extension occurs only for targets greater than that distance.</p>
			<div style="border:none;border-top:solid windowtext .75pt;padding:1.0pt 0in 0in 0in">
				<p class="Ne"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			</div>
			<h3>Anonymous Labels</h3>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Jumps:anonymous&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1058&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Labels:anonymous&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1059&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">When you code jumps in assembly language, you must invent many label names. One alternative to continually thinking up new label names is to use anonymous labels, which you can use anywhere in your program. But because anonymous labels do not provide meaningful names, they are best used for jumping over only a few lines of code. You should mark major divisions of a program with actual named labels.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Anonymous label (@@\\:)&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1060&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;@@\\: (anonymous label)&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1061&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Use two at signs (@@) followed by a colon (:) as an anonymous label. To jump to the nearest preceding anonymous label, use <b style="mso-bidi-font-weight:normal">@B</b> (back) in the jump instruction&#146;s operand field; to jump to the nearest following anonymous label, use <b style="mso-bidi-font-weight:normal">@F</b> (forward) in the operand field.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1408&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The jump in the following example targets an anonymous label:</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>jge<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>@F<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			@@:<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1409&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The items <span style='font-family:"Lucida Sans Typewriter"'>@B</span> and <span style='font-family:"Lucida Sans Typewriter"'>@F</span> always refer to the nearest occurrences of @@:, so there is never any conflict between different anonymous labels.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Directives:decision&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1062&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Jumps:directives for&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1063&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Directives:.IF&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1064&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Directives:.ELSEIF&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1065&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Directives:.ELSE&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1066&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Directives:.ENDIF&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1067&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;.IF directive&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1068&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;.ELSEIF directive&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1069&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;.ELSE directive&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1070&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;.ENDIF directive&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1071&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<h3>Decision Directives</h3>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1410&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The high-level structures you can use for decision-making are the <b style="mso-bidi-font-weight:normal">.IF</b>, <b style="mso-bidi-font-weight:
normal">.ELSEIF</b>, and <b style="mso-bidi-font-weight:normal">.ELSE</b> statements. These directives generate conditional jumps. The expression following the <b style="mso-bidi-font-weight:normal">.IF</b> directive is evaluated, and if true, the following instructions are executed until the next <b style="mso-bidi-font-weight:normal">.ENDIF</b>, <b style="mso-bidi-font-weight:
normal">.ELSE</b>, or <b style="mso-bidi-font-weight:normal">.ELSEIF</b> directive is reached. The <b style="mso-bidi-font-weight:normal">.ELSE</b> statements execute if the expression is false. Using the <b style="mso-bidi-font-weight:
normal">.ELSEIF</b> directive puts a new expression inside the alternative part of the original <b style="mso-bidi-font-weight:normal">.IF</b> statement to be evaluated. The syntax is:</p>
			<p class="Syn"><b style="mso-bidi-font-weight:normal">.IF </b><i style="mso-bidi-font-style:normal">condition1<br>
			statements<br>
			</i><span style="font-family:Times;letter-spacing:-1.5pt">[</span><span style="font-family:Times">[</span><b style="mso-bidi-font-weight:normal">.ELSEIF </b><i style="mso-bidi-font-style:normal">condition2<br>
			statements</i><span style="font-family:Times;letter-spacing:-1.5pt">]</span><span style="font-family:Times">]</span><br>
			<span style="font-family:Times;letter-spacing:-1.5pt">[</span><span style="font-family:Times">[</span><b style="mso-bidi-font-weight:normal">.ELSE</b><br>
			<i style="mso-bidi-font-style:normal">statements</i><span style="font-family:
Times;letter-spacing:-1.5pt">]</span><span style="font-family:Times">]</span><br>
			<b style="mso-bidi-font-weight:normal">.ENDIF</b></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1411&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The decision structure</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.IF<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>cx == 20<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>dx, 20<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.ELSE<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>dx, 30<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.ENDIF<br style="mso-special-character:
line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1412&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">generates this code:</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.IF<span style="mso-spacerun: yes">&nbsp; </span>cx == 20<br>
			0017<span style="mso-spacerun: yes">&nbsp; </span>83 F9 14<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>*<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>cmp<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>cx, 014h<br>
			001A<span style="mso-spacerun: yes">&nbsp; </span>75 05<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>*<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>jne<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>@C0001<br>
			001C<span style="mso-spacerun: yes">&nbsp; </span>BA 0014<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>dx, 20<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.ELSE<br>
			001F<span style="mso-spacerun: yes">&nbsp; </span>EB 03<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>*<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>jmp<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>@C0003<br>
			0021<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>*@C0001:<br>
			0021<span style="mso-spacerun: yes">&nbsp; </span>BA 001E<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>dx, 30<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.ENDIF<br>
			0024<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>*@C0003:</p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<h1 style="margin-left:0in">Loops</h1>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Loops:instructions (list)&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1072&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:LOOP&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1073&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;LOOP instruction&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1074&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Loops repeat an action until a termination condition is reached. This condition can be a counter or the result of an expression&#146;s evaluation. MASM 6.1 offers many ways to set up loops in your programs. The following list compares MASM loop structures:</p>
			<table border="0" cellspacing="0" cellpadding="0" style="margin-left:.4pt;border-collapse:
 collapse;mso-padding-alt:0in 0in 0in 0in">
				<tr>
					<td width="107" valign="top" style="width:80.4pt;padding:0in 0in 0in 0in">
						<p class="Thf">Instructions</p>
						<p class="Thf"></p>
					</td>
					<td width="357" valign="top" style="width:267.6pt;padding:0in 0in 0in 0in">
						<p class="Th">Action</p>
						<p class="Th"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="464" colspan="2" valign="top" style="width:348.0pt;padding:0in 0in 0in 0in">
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="107" valign="top" style="width:80.4pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">LOOP</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="357" valign="top" style="width:267.6pt;padding:0in 0in 0in 0in">
						<p class="Tp">Automatically decrements CX. When CX = 0, the loop ends. The top of the loop cannot be greater than 128 bytes from the <b style="mso-bidi-font-weight:
  normal"><span style="font-size:9.0pt">LOOP</span></b> instruction. (This is true for all <b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">LOOP</span></b> instructions.)</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
				</tr>
				<tr>
					<td width="107" valign="top" style="width:80.4pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">LOOPE</span></b>/<b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">LOOPZ</span></b>,<br>
						<b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">LOOPNE</span></b>/<b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">LOOPNZ</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="357" valign="top" style="width:267.6pt;padding:0in 0in 0in 0in">
						<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
  &quot;Instructions:LOOPE&quot;<span style='mso-hide:none'> \z
  &quot;FLOWWW.DOC-1075&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-begin'></span>XE &quot;Instructions:LOOPZ&quot;<span
  style='mso-hide:none'> \z &quot;FLOWWW.DOC-1076&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-begin'></span>XE &quot;Instructions:LOOPNE&quot;<span
  style='mso-hide:none'> \z &quot;FLOWWW.DOC-1077&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-begin'></span>XE &quot;Instructions:LOOPNZ&quot;<span
  style='mso-hide:none'> \z &quot;FLOWWW.DOC-1078&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-begin'></span>XE &quot;LOOPE instruction&quot;<span
  style='mso-hide:none'> \z &quot;FLOWWW.DOC-1079&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-begin'></span>XE &quot;LOOPZ instruction&quot;<span
  style='mso-hide:none'> \z &quot;FLOWWW.DOC-1080&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-begin'></span>XE &quot;LOOPNE instruction&quot;<span
  style='mso-hide:none'> \z &quot;FLOWWW.DOC-1081&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-begin'></span>XE &quot;LOOPNZ instruction&quot;<span
  style='mso-hide:none'> \z &quot;FLOWWW.DOC-1082&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						</p>
						<p class="Tp">Loops while equal or not equal. Checks both CX and the state of the zero flag. <b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">LOOPZ</span></b> ends when either CX=0 or the zero flag is clear, whichever occurs first. <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">LOOPNZ</span></b> ends when either CX=0 or the zero flag is set, whichever occurs first. <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">LOOPE</span></b> and <b style="mso-bidi-font-weight:
  normal"><span style="font-size:9.0pt">LOOPZ</span></b> assemble to the same machine instruction, as do <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">LOOPNE</span></b> and <b style="mso-bidi-font-weight:
  normal"><span style="font-size:9.0pt">LOOPNZ</span></b>. Use whichever mnemonic best fits the context of your loop. Set CX to a number out of range if you don&#146;t want a count to control the loop.</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="107" valign="top" style="width:80.4pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">JCXZ</span></b>, <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">JECXZ</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="357" valign="top" style="width:267.6pt;padding:0in 0in 0in 0in">
						<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
  &quot;Instructions:JCXZ&quot;<span style='mso-hide:none'> \z
  &quot;FLOWWW.DOC-1083&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-begin'></span>XE &quot;Instructions:JECXZ&quot;<span
  style='mso-hide:none'> \z &quot;FLOWWW.DOC-1084&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-begin'></span>XE &quot;JCXZ instruction&quot;<span
  style='mso-hide:none'> \z &quot;FLOWWW.DOC-1085&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-begin'></span>XE &quot;JECXZ instruction&quot;<span
  style='mso-hide:none'> \z &quot;FLOWWW.DOC-1086&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						</p>
						<p class="Tp">Branches to a label only if CX = 0 or ECX = 0. Unlike other conditional-jump instructions, which can jump to either a near or a short label under the 80386 or 80486, <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">JCXZ</span></b> and<span style="font-size:9.0pt"> <b style="mso-bidi-font-weight:normal">JECXZ</b></span> always jump to a short label.</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="107" valign="top" style="width:80.4pt;padding:0in 0in 0in 0in">
						<p class="Tpf">Conditional jumps</p>
						<p class="Tpf"></p>
					</td>
					<td width="357" valign="top" style="width:267.6pt;padding:0in 0in 0in 0in">
						<p class="Tp">Acts only if certain conditions met. Necessary if several conditions must be tested. See &#147;Conditional Jumps,&#148; page 164.</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
			</table>
			<p class="Le"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1413&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The following examples illustrate these loop constructions.</p>
			<p class="Ex" style="page-break-after:auto">; The LOOP instruction: For 200 to 0 do task<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>cx, 200<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Set counter<br>
			next:<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>.<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Do the task here<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>loop<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>next<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Do again<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Continue after loop<br>
			<br>
			; The LOOPNE instruction: While AX is not 'Y', do task<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>cx, 256<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Set count too high to interfere<br>
			wend:<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>.<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; But don't do more than 256 times<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Some statements that change AX<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>cmp<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>al, 'Y'<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Is it Y or too many times?<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>loopne<span style="mso-spacerun:
yes">&nbsp; </span>wend<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; No? Repeat<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Yes? Continue<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Instructions:JCXZ&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1087&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:JECXZ&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1088&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;JCXZ instruction&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1089&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;JECXZ instruction&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1090&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:jump&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1091&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The <b style="mso-bidi-font-weight:normal">JCXZ</b> and <b style="mso-bidi-font-weight:normal">JECXZ</b> instructions provide an efficient way to avoid executing loops when the loop counter CX is empty. For example, consider the following loops:</p>
			<p class="Ex">mov<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>cx, LoopCount<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Load loop counter<br>
			next:<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>.<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Iterate loop CX times<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>loop<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>next<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Do again<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1414&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">If <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>LoopCount</span> is zero, CX decrements to -1 on the first pass. It then must decrement 65,535 more times before reaching 0. Use a <b style="mso-bidi-font-weight:normal">JCXZ</b> to avoid this problem:</p>
			<p class="Ex">mov<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>cx, LoopCount<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Load loop counter<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>jcxz<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>done<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Skip loop if count is 0<br>
			next:<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>.<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Else iterate loop CX times<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>loop<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>next<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Do again<br>
			done:<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Continue after loop<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<h2 style="margin-left:0in">Loop-Generating Directives</h2>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Loops:directives that generate:.WHILE&quot;<span style='mso-hide:none'>
\z &quot;FLOWWW.DOC-1092&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Loops:directives that
generate:.REPEAT&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1093&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Directives:loop-generating&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1094&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The high-level control structures generate loop structures for you. These directives are similar to the <b style="mso-bidi-font-weight:
normal">while</b> and <b style="mso-bidi-font-weight:normal">repeat</b> loops of C or Pascal, and can make your assembly programs easier to code and to read. The assembler generates the appropriate assembly code. These directives are summarized as follows:</p>
			<table border="0" cellspacing="0" cellpadding="0" style="margin-left:.4pt;border-collapse:
 collapse;mso-padding-alt:0in 0in 0in 0in">
				<tr>
					<td width="144" valign="top" style="width:107.9pt;padding:0in 0in 0in 0in">
						<p class="Thf">Directives</p>
						<p class="Thf"></p>
					</td>
					<td width="325" valign="top" style="width:243.6pt;padding:0in 0in 0in 0in">
						<p class="Th">Action</p>
						<p class="Th"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="469" colspan="2" valign="top" style="width:351.5pt;padding:0in 0in 0in 0in">
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
				</tr>
				<tr>
					<td width="144" valign="top" style="width:107.9pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">.WHILE </span></b><span style="mso-spacerun: yes">&nbsp;</span>...<span style="mso-spacerun: yes">&nbsp; </span><b style="mso-bidi-font-weight:normal">.</b><b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">ENDW</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="325" valign="top" style="width:243.6pt;padding:0in 0in 0in 0in">
						<p class="Tp">The statements between <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">.WHILE</span></b> <i style="mso-bidi-font-style:normal">condition</i> and <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">.ENDW</span></b> execute while the condition is true.</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
				</tr>
				<tr>
					<td width="144" valign="top" style="width:107.9pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">.REPEAT </span></b><span style="mso-spacerun: yes">&nbsp;</span>...<span style="mso-spacerun: yes">&nbsp; </span><b style="mso-bidi-font-weight:normal">.</b><b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">UNTIL</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="325" valign="top" style="width:243.6pt;padding:0in 0in 0in 0in">
						<p class="Tp">The loop executes at least once and continues until the condition given after <b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">.UNTIL</span></b> is true. Generates conditional jumps.</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="144" valign="top" style="width:107.9pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">.REPEAT </span></b><span style="mso-spacerun: yes">&nbsp;</span>...<span style="mso-spacerun: yes">&nbsp; </span><b style="mso-bidi-font-weight:normal">.</b><b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">UNTILCXZ</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="325" valign="top" style="width:243.6pt;padding:0in 0in 0in 0in">
						<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
  &quot;Directives:.WHILE&quot;<span style='mso-hide:none'> \z
  &quot;FLOWWW.DOC-1095&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-begin'></span>XE &quot;Directives:.ENDW&quot;<span
  style='mso-hide:none'> \z &quot;FLOWWW.DOC-1096&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-begin'></span>XE &quot;Directives:.REPEAT&quot;<span
  style='mso-hide:none'> \z &quot;FLOWWW.DOC-1097&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-begin'></span>XE &quot;Directives:.UNTIL&quot;<span
  style='mso-hide:none'> \z &quot;FLOWWW.DOC-1098&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-begin'></span>XE &quot;Directives:.UNTILCXZ&quot;<span
  style='mso-hide:none'> \z &quot;FLOWWW.DOC-1099&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-begin'></span>XE &quot;.WHILE directive&quot;<span
  style='mso-hide:none'> \z &quot;FLOWWW.DOC-1100&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-begin'></span>XE &quot;.ENDW directive&quot;<span
  style='mso-hide:none'> \z &quot;FLOWWW.DOC-1101&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-begin'></span>XE &quot;.REPEAT directive&quot;<span
  style='mso-hide:none'> \z &quot;FLOWWW.DOC-1102&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-begin'></span>XE &quot;.UNTIL directive&quot;<span
  style='mso-hide:none'> \z &quot;FLOWWW.DOC-1103&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-begin'></span>XE &quot;.UNTILCXZ directive&quot;<span
  style='mso-hide:none'> \z &quot;FLOWWW.DOC-1104&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						</p>
						<p class="Tp">Compares label to an expression and generates appropriate loop instructions.</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="144" valign="top" style="width:107.9pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">.BREAK</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="325" valign="top" style="width:243.6pt;padding:0in 0in 0in 0in">
						<p class="Tp">End a <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">.REPEAT</span></b> or a <b style="mso-bidi-font-weight:
  normal"><span style="font-size:9.0pt">.WHILE</span></b> loop unconditionally.</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="144" valign="top" style="width:107.9pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">.CONTINUE</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="325" valign="top" style="width:243.6pt;padding:0in 0in 0in 0in">
						<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
  &quot;Directives:.BREAK&quot;<span style='mso-hide:none'> \z
  &quot;FLOWWW.DOC-1105&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-begin'></span>XE &quot;Directives:.CONTINUE&quot;<span
  style='mso-hide:none'> \z &quot;FLOWWW.DOC-1106&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-begin'></span>XE &quot;.BREAK directive&quot;<span
  style='mso-hide:none'> \z &quot;FLOWWW.DOC-1107&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-begin'></span>XE &quot;.CONTINUE directive&quot;<span
  style='mso-hide:none'> \z &quot;FLOWWW.DOC-1108&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						</p>
						<p class="Tp">Jump unconditionally past any remaining code to bottom of loop.</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
			</table>
			<p class="Le"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1415&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">These constructs work much as they do in a high-level language such as C or Pascal. Keep in mind the following points:</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1416&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>These directives generate appropriate processor instructions. They are not new instructions.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1417&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>They require proper use of signed and unsigned data declarations.</p>
			<p class="Le"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1418&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">These directives cause a set of instructions to execute based on the evaluation of some <i style="mso-bidi-font-style:normal">condition</i>. This <i style="mso-bidi-font-style:normal">condition</i> can be an expression that evaluates to a signed or unsigned value, an expression using the binary operators in C (<b style="mso-bidi-font-weight:normal">&amp;&amp;</b>, <b style="mso-bidi-font-weight:normal">||</b>, or <b style="mso-bidi-font-weight:
normal">!</b>), or the state of a flag. For more information about expression operators, see page 178.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1419&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The evaluation of the <i style="mso-bidi-font-style:normal">condition</i> requires the assembler to know if the operands in the condition are signed or unsigned. To state explicitly that a named memory<br>
			location contains a signed integer, use the signed data allocation directives <b style="mso-bidi-font-weight:normal">SBYTE</b>, <b style="mso-bidi-font-weight:
normal">SWORD</b>, and <b style="mso-bidi-font-weight:normal">SDWORD</b>.</p>
			<h3>.WHILE Loops</h3>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Loops:directives that generate:.WHILE&quot;<span style='mso-hide:none'>
\z &quot;FLOWWW.DOC-1109&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">As with <b style="mso-bidi-font-weight:normal">while</b> loops in C or Pascal, the test condition for <b style="mso-bidi-font-weight:
normal">.WHILE</b> is checked before the statements inside the loop execute. If the test condition is false, the loop does not execute. While the condition is true, the statements inside the loop repeat.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Loops:directives that generate:.WHILE&quot;<span style='mso-hide:none'>
\z &quot;FLOWWW.DOC-1110&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Use the <b style="mso-bidi-font-weight:normal">.ENDW</b> directive to mark the end of the <b style="mso-bidi-font-weight:normal">.WHILE</b> loop. When the condition becomes false, program execution begins at the first statement following the <b style="mso-bidi-font-weight:normal">.ENDW</b> directive. The <b style="mso-bidi-font-weight:normal">.WHILE</b> directive generates appropriate compare and jump statements. The syntax is:</p>
			<p class="index"><!--[if supportFields]><b style='mso-bidi-font-weight:normal'><span
style='mso-element:field-begin'></span>xe &quot;aa&quot; \z
&quot;FLOWWW.DOC-1420&quot;</b><![endif]-->
			<!--[if supportFields]><b
style='mso-bidi-font-weight:normal'><span style='mso-element:field-end'></span></b><![endif]-->
			</p>
			<p class="MsoNormal"><b style="mso-bidi-font-weight:normal">.WHILE</b> <i style="mso-bidi-font-style:normal">condition</i><br>
			<i style="mso-bidi-font-style:normal">statements</i><br>
			<b style="mso-bidi-font-weight:normal">.ENDW</b></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1421&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">For example, this loop copies the contents of one buffer to another until a &#145;$&#146; character (marking the end of the string) is found:</p>
			<p class="Ex" style="page-break-after:auto"><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.DATA<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>buf1<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>BYTE &quot;This is a string&quot;,'$'<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>buf2<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>BYTE 100 DUP (?)<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.CODE<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>sub<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>bx, bx<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Zero out bx<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.WHILE<span style="mso-spacerun:
yes">&nbsp; </span>(buf1[bx] != '$')<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>al, buf1[bx]<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Get a character<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>buf2[bx], al<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Move it to buffer 2<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>inc<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>bx<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Count forward<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.ENDW<br style="mso-special-character:
line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<h3>.REPEAT Loops</h3>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Loops:directives that generate:.REPEAT&quot;<span style='mso-hide:none'>
\z &quot;FLOWWW.DOC-1111&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">MASM&#146;s <b style="mso-bidi-font-weight:normal">.REPEAT</b> directive allows for loop constructions like the <b style="mso-bidi-font-weight:
normal">do</b> loop of C and the <b style="mso-bidi-font-weight:normal">REPEAT</b> loop of Pascal. The loop executes until the condition following the <b style="mso-bidi-font-weight:normal">.UNTIL</b> (or <b style="mso-bidi-font-weight:
normal">.UNTILCXZ</b>) directive becomes true. Since the condition is checked at the end of the loop, the loop always executes at least once. The <b style="mso-bidi-font-weight:normal">.REPEAT</b> directive generates conditional jumps. The syntax is:</p>
			<p class="Syn"><b style="mso-bidi-font-weight:normal">.REPEAT</b><br>
			<i style="mso-bidi-font-style:normal">statements<br>
			</i><b style="mso-bidi-font-weight:normal">.UNTIL </b><i style="mso-bidi-font-style:
normal">condition</i></p>
			<p class="Syn"><b style="mso-bidi-font-weight:normal">.REPEAT</b><br>
			<i style="mso-bidi-font-style:normal">statements</i><br>
			<b style="mso-bidi-font-weight:normal">.UNTILCXZ</b> <span style="font-family:
Times;letter-spacing:-1.5pt">[</span><span style="font-family:Times">[</span><i style="mso-bidi-font-style:normal">condition</i><span style="font-family:Times;
letter-spacing:-1.5pt">]</span><span style="font-family:Times">]</span></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1422&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">where <i style="mso-bidi-font-style:normal">condition</i> can also be <i style="mso-bidi-font-style:normal">expr1 == expr2</i> or <i style="mso-bidi-font-style:normal">expr1 != expr2</i>. When two conditions are used, <i style="mso-bidi-font-style:normal">expr2</i> can be an immediate expression, a register, or (if <i style="mso-bidi-font-style:normal">expr1</i> is a register) a memory location.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1423&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">For example, the following code fills a buffer with characters typed at the keyboard. The loop ends when the <span style="font-size:8.5pt">ENTER</span> key (character 13) is pressed:</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.DATA<br>
			buffer<span style="mso-spacerun: yes">&nbsp; </span>BYTE<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>100 DUP (0)<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.CODE<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>sub<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>bx, bx<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Zero out bx<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.REPEAT<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ah, 01h<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>int<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>21h<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Get a key<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>buffer[bx], al<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>; Put it in the buffer<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>inc<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>bx<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Increment the count<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.UNTIL (al == 13)<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Continue until al is 13<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Loops:directives that generate:.REPEAT&quot;<span style='mso-hide:none'>
\z &quot;FLOWWW.DOC-1112&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The <b style="mso-bidi-font-weight:normal">.UNTIL</b> directive generates conditional jumps, but the <b style="mso-bidi-font-weight:
normal">.UNTILCXZ</b> directive generates a <b style="mso-bidi-font-weight:
normal">LOOP</b> instruction, as shown by the listing file code for these examples. In a listing file, assembler-generated code is preceded by an asterisk.</p>
			<p class="Ex">ASSUME<span style="mso-spacerun: yes">&nbsp; </span>bx:PTR SomeStruct<br>
			<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.REPEAT<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>*@C0001:<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>inc<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>ax<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.UNTIL<span style="mso-spacerun: yes">&nbsp; </span>ax==6<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>*<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>cmp<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>ax, 006h<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>*<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>jne<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>@C0001</p>
			<p class="Ex">.REPEAT<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>*@C0003:<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>ax, 1<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.UNTILCXZ<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>*<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>loop<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>@C0003<br>
			<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.REPEAT<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>*@C0004:<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.UNTILCXZ<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>[bx].field != 6<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>*<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>cmp<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>[bx].field, 006h<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>*<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>loope<span style="mso-spacerun: yes">&nbsp; </span>@C0004<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<h3>.BREAK and .CONTINUE Directives</h3>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Loops:controlling:.BREAK&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1113&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE
&quot;Loops:controlling:.CONTINUE&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1114&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The <b style="mso-bidi-font-weight:normal">.BREAK</b> and <b style="mso-bidi-font-weight:normal">.CONTINUE</b> directives terminate a <b style="mso-bidi-font-weight:normal">.REPEAT</b> or <b style="mso-bidi-font-weight:
normal">.WHILE</b> loop prematurely. These directives allow an optional <b style="mso-bidi-font-weight:normal">.IF</b> clause for conditional breaks. The syntax is:</p>
			<p class="Syn"><b style="mso-bidi-font-weight:normal">.BREAK </b><span style="font-family:Times;letter-spacing:-1.5pt">[</span><span style="font-family:
Times">[</span><b style="mso-bidi-font-weight:normal">.IF</b> <i style="mso-bidi-font-style:normal">condition</i><span style="font-family:Times;
letter-spacing:-1.5pt">]</span><span style="font-family:Times">]</span><br>
			<b style="mso-bidi-font-weight:normal">.CONTINUE </b><span style="font-family:
Times;letter-spacing:-1.5pt">[</span><span style="font-family:Times">[</span><b style="mso-bidi-font-weight:normal">.IF</b> <i style="mso-bidi-font-style:normal">condition</i><span style="font-family:Times;letter-spacing:-1.5pt">]</span><span style="font-family:
Times">]</span></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1424&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Note that <b style="mso-bidi-font-weight:normal">.ENDIF</b> is not used with the <b style="mso-bidi-font-weight:normal">.IF</b> forms of <b style="mso-bidi-font-weight:normal">.BREAK</b> and <b style="mso-bidi-font-weight:
normal">.CONTINUE</b> in this context. The <b style="mso-bidi-font-weight:normal">.BREAK</b> and <b style="mso-bidi-font-weight:normal">.CONTINUE</b> directives work the same way as the <b style="mso-bidi-font-weight:normal">break</b> and <b style="mso-bidi-font-weight:normal">continue</b> instructions in C. Execution continues at the instruction following the <b style="mso-bidi-font-weight:normal">.UNTIL</b>, <b style="mso-bidi-font-weight:normal">.UNTILCXZ</b>, or <b style="mso-bidi-font-weight:
normal">.ENDW</b> of the nearest enclosing loop.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Directives:.BREAK&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1115&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Directives:.CONTINUE&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1116&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;.BREAK directive&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1117&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;.CONTINUE directive&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1118&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Instead of ending the loop execution as <b style="mso-bidi-font-weight:
normal">.BREAK</b> does, <b style="mso-bidi-font-weight:normal">.CONTINUE</b> causes loop execution to jump directly to the code that evaluates the loop condition of the nearest enclosing loop.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Loops:directives that generate:.REPEAT&quot;<span style='mso-hide:none'>
\z &quot;FLOWWW.DOC-1119&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Loops:directives that
generate:.WHILE&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1120&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The following loop accepts only the keys in the range &#145;0&#146; to &#145;9&#146; and terminates when you press <span style="font-size:8.5pt">ENTER</span>.</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.WHILE 1<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Loop forever<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ah, 08h<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Get key without echo<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>int<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>21h<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.BREAK .IF al == 13<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>; If ENTER, break out of the loop<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.CONTINUE .IF (al &lt; '0') || (al &gt; '9')<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; If not a digit, continue looping<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>dl, al<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Save the character for processing<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ah, 02h<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Output the character<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>int<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>21h<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.ENDW</p>
			<p class="Ex"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Loops:directives that generate:.REPEAT&quot;<span style='mso-hide:none'>
\z &quot;FLOWWW.DOC-1121&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Loops:directives that
generate:.WHILE&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1122&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">If you assemble the preceding source code with the /Fl and /Sg command-line options and then view the results in the listing file, you will see this code:</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.WHILE 1<br>
			<span style="mso-spacerun: yes">&nbsp;</span>0017<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>*@C0001:<br>
			<span style="mso-spacerun: yes">&nbsp;</span>0017<span style="mso-spacerun: yes">&nbsp; </span>B4 08<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>ah, 08h<br>
			<span style="mso-spacerun: yes">&nbsp;</span>0019<span style="mso-spacerun: yes">&nbsp; </span>CD 21<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>int<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>21h<br>
			<span style="mso-spacerun: yes">&nbsp;</span><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.BREAK .IF al == 13<span style="mso-spacerun: yes">&nbsp; </span><br>
			<span style="mso-spacerun: yes">&nbsp;</span>001B<span style="mso-spacerun: yes">&nbsp; </span>3C 0D<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>*<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>cmp<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>al, 00Dh<br>
			<span style="mso-spacerun: yes">&nbsp;</span>001D<span style="mso-spacerun: yes">&nbsp; </span>74 10<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>*<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>je<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>@C0002<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.CONTINUE .IF (al<span style="mso-spacerun: yes">&nbsp; </span>'0') || (al<span style="mso-spacerun: yes">&nbsp; </span>'9')<br>
			<span style="mso-spacerun: yes">&nbsp;</span>001F<span style="mso-spacerun: yes">&nbsp; </span>3C 30<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>*<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>cmp<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>al, '0'<br>
			<span style="mso-spacerun: yes">&nbsp;</span>0021<span style="mso-spacerun: yes">&nbsp; </span>72 F4<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>*<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>jb<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>@C0001<br>
			<span style="mso-spacerun: yes">&nbsp;</span>0023<span style="mso-spacerun: yes">&nbsp; </span>3C 39<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>*<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>cmp<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>al, '9'<br>
			<span style="mso-spacerun: yes">&nbsp;</span>0025<span style="mso-spacerun: yes">&nbsp; </span>77 F0<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>*<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>ja<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>@C0001<br>
			<span style="mso-spacerun: yes">&nbsp;</span>0027<span style="mso-spacerun: yes">&nbsp; </span>8A D0<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>dl, al<br>
			<span style="mso-spacerun: yes">&nbsp;</span>0029<span style="mso-spacerun: yes">&nbsp; </span>B4 02<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>ah, 02h<br>
			<span style="mso-spacerun: yes">&nbsp;</span>002B<span style="mso-spacerun: yes">&nbsp; </span>CD 21<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>int<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>21h<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.ENDW<br>
			<span style="mso-spacerun: yes">&nbsp;</span>002D<span style="mso-spacerun: yes">&nbsp; </span>EB E8<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>*<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>jmp<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>@C0001<br>
			<span style="mso-spacerun: yes">&nbsp;</span>002F<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>*@C0002:<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1425&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The high-level control structures can be nested. That is, <b style="mso-bidi-font-weight:normal">.REPEAT</b> or <b style="mso-bidi-font-weight:
normal">.WHILE</b> loops can contain <b style="mso-bidi-font-weight:normal">.REPEAT</b> or <b style="mso-bidi-font-weight:normal">.WHILE</b> loops as well as <b style="mso-bidi-font-weight:normal">.IF</b> statements.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1426&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">If the code generated by a <b style="mso-bidi-font-weight:
normal">.WHILE</b> loop, <b style="mso-bidi-font-weight:normal">.REPEAT</b> loop, or <b style="mso-bidi-font-weight:normal">.IF</b> statement generates a conditional or unconditional jump, MASM encodes the jump using the jump extension and jump optimization techniques described in &#147;Unconditional Jumps,&#148; page 162, and &#147;Conditional Jumps,&#148; page 164.</p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<h2 style="margin-left:0in">Writing Loop Conditions</h2>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Loops:conditions:writing&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1123&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">You can express the conditions of the <b style="mso-bidi-font-weight:
normal">.IF</b>, <b style="mso-bidi-font-weight:normal">.REPEAT</b>, and <b style="mso-bidi-font-weight:normal">.WHILE</b> directives using relational operators, and you can express the attributes of the operand with the <b style="mso-bidi-font-weight:normal">PTR</b> operator. To write loop conditions, you also need to know how the assembler evaluates the operators and operands in the condition. This section explains the operators, attributes, precedence level, and expression evaluation order for the conditions used with loop-generating directives.</p>
			<h3>Expression Operators</h3>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Loops:conditions:relational operators for (list)&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1124&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Operators:relational
(list)&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1125&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Relational operators
(list)&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1126&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The binary relational operators in MASM 6.1 are the same binary operators used in C. These operators generate MASM compare, test, and conditional jump instructions. High-level control instructions include:</p>
			<table border="0" cellspacing="0" cellpadding="0" style="margin-left:.4pt;border-collapse:
 collapse;mso-padding-alt:0in 0in 0in 0in">
				<tr>
					<td width="93" valign="top" style="width:69.6pt;padding:0in 0in 0in 0in">
						<p class="Thf">Operator</p>
						<p class="Thf"></p>
					</td>
					<td width="371" valign="top" style="width:278.4pt;padding:0in 0in 0in 0in">
						<p class="Th">Meaning</p>
						<p class="Th"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="464" colspan="2" valign="top" style="width:348.0pt;padding:0in 0in 0in 0in">
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
							<p class="Tr"></p>
						</div>
					</td>
					<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
						<p class="Tr"></p>
					</div>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="93" valign="top" style="width:69.6pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">==<o:p></o:p></b></p>
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
					</td>
					<td width="371" valign="top" style="width:278.4pt;padding:0in 0in 0in 0in">
						<p class="Tp">Equal</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
				</tr>
				<tr>
					<td width="93" valign="top" style="width:69.6pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">!=<o:p></o:p></b></p>
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
					</td>
					<td width="371" valign="top" style="width:278.4pt;padding:0in 0in 0in 0in">
						<p class="Tp">Not equal</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="93" valign="top" style="width:69.6pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">&gt;<o:p></o:p></b></p>
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
					</td>
					<td width="371" valign="top" style="width:278.4pt;padding:0in 0in 0in 0in">
						<p class="Tp">Greater than</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="93" valign="top" style="width:69.6pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">&gt;=<o:p></o:p></b></p>
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
					</td>
					<td width="371" valign="top" style="width:278.4pt;padding:0in 0in 0in 0in">
						<p class="Tp">Greater than or equal to</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="93" valign="top" style="width:69.6pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">&lt;<o:p></o:p></b></p>
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
					</td>
					<td width="371" valign="top" style="width:278.4pt;padding:0in 0in 0in 0in">
						<p class="Tp">Less than</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="93" valign="top" style="width:69.6pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">&lt;=<o:p></o:p></b></p>
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
					</td>
					<td width="371" valign="top" style="width:278.4pt;padding:0in 0in 0in 0in">
						<p class="Tp">Less than or equal to</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="93" valign="top" style="width:69.6pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">&amp;<o:p></o:p></b></p>
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
					</td>
					<td width="371" valign="top" style="width:278.4pt;padding:0in 0in 0in 0in">
						<p class="Tp">Bit test</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="93" valign="top" style="width:69.6pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">!<o:p></o:p></b></p>
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
					</td>
					<td width="371" valign="top" style="width:278.4pt;padding:0in 0in 0in 0in">
						<p class="Tp">Logical NOT</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="93" valign="top" style="width:69.6pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">&amp;&amp;<o:p></o:p></b></p>
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
					</td>
					<td width="371" valign="top" style="width:278.4pt;padding:0in 0in 0in 0in">
						<p class="Tp">Logical AND</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="93" valign="top" style="width:69.6pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">||<o:p></o:p></b></p>
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
					</td>
					<td width="371" valign="top" style="width:278.4pt;padding:0in 0in 0in 0in">
						<p class="Tp">Logical OR</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
			</table>
			<p class="Le"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;== (equal operator)&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1127&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Expression operators&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1128&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;!= (not equal operator)&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1129&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;&gt; (greater than
operator)&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1130&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;&lt; (less than operator)&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1131&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;&amp;&amp; (logical AND
operator)&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1132&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Logical AND&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1133&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;|| (Logical OR operator)&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1134&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;ZERO? operand&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1135&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;CARRY? operand&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1136&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;OVERFLOW? flag&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1137&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;SIGN? operand&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1138&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;PARITY? operand&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1139&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">A condition without operators (other than <b style="mso-bidi-font-weight:normal">!</b>) tests for nonzero as it does in C. For example, <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>.WHILE (x)</span> is the same as <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>.WHILE (x != 0)</span>, and <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>.WHILE (!x)</span> is the same as <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>.WHILE (x == 0)</span>.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Flags:operands, as&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1140&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Flags:ZERO?&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1141&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Flags:CARRY?&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1142&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Flags:OVERFLOW?&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1143&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Flags:SIGN?&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1144&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Flags:PARITY?&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1145&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">You can also use the flag names (<b style="mso-bidi-font-weight:
normal">ZERO?</b>, <b style="mso-bidi-font-weight:normal">CARRY?</b>, <b style="mso-bidi-font-weight:normal">OVERFLOW?</b>, <b style="mso-bidi-font-weight:
normal">SIGN?</b>, and <b style="mso-bidi-font-weight:normal">PARITY?</b>) as operands in conditions with the high-level control structures. For example, in <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>.WHILE (CARRY?)</span>, the value of the carry flag determines the outcome of the condition.</p>
			<h3>Signed and Unsigned Operands</h3>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Loops:conditions:signed operands&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1146&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Loops:conditions:PTR operator
in&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1147&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;PTR operator:signed number,
specifying&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1148&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe Operators:PTR \t &quot;See PTR
operator&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1149&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Expression operators generate unsigned jumps by default. However, if either side of the operation is signed, the assembler considers the entire operation signed.</p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1427&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">You can use the <b style="mso-bidi-font-weight:normal">PTR</b> operator to tell the assembler that a particular operand in a register or constant is a signed number, as in these examples:</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.WHILE<span style="mso-spacerun: yes">&nbsp; </span>SWORD PTR [bx] &lt;= 0<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.IF<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>SWORD PTR mem1 &gt;<span style="mso-spacerun: yes">&nbsp; </span>0<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1428&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Without the <b style="mso-bidi-font-weight:normal">PTR</b> operator, the assembler would treat the contents of BX as an unsigned value.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1429&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">You can also specify the size attributes of operands in memory locations with <b style="mso-bidi-font-weight:normal">SBYTE</b>, <b style="mso-bidi-font-weight:normal">SWORD</b>, and <b style="mso-bidi-font-weight:
normal">SDWORD</b>, for use with <b style="mso-bidi-font-weight:normal">.IF</b>, <b style="mso-bidi-font-weight:normal">.WHILE</b>, and <b style="mso-bidi-font-weight:
normal">.REPEAT</b>.</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.DATA<br>
			mem1<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>SBYTE<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>?<br>
			mem2<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>WORD<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>?<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.IF<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>mem1 &gt; 0<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.WHILE<span style="mso-spacerun:
yes">&nbsp; </span>mem2 &lt; bx<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.WHILE<span style="mso-spacerun:
yes">&nbsp; </span>SWORD PTR ax &lt; count<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<h3>Precedence Level</h3>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Loops:conditions:precedence&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1150&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Loops:conditions:expression
evaluation&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1151&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">As with C, you can concatenate conditions with the <b style="mso-bidi-font-weight:normal">&amp;&amp;</b> operator for AND, the <b style="mso-bidi-font-weight:normal">||</b> operator for OR, and the <b style="mso-bidi-font-weight:normal">!</b> operator for negate. The precedence level is <b style="mso-bidi-font-weight:normal">!</b>, <b style="mso-bidi-font-weight:
normal">&amp;&amp;</b>, and <b style="mso-bidi-font-weight:normal">||</b>, with <b style="mso-bidi-font-weight:normal">!</b> having the highest priority. Like expressions in high-level languages, precedence is evaluated left to right.</p>
			<h3>Expression Evaluation</h3>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Expressions:loop conditions, evaluating&quot;<span style='mso-hide:none'>
\z &quot;FLOWWW.DOC-1152&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The assembler evaluates conditions created with high-level control structures according to short-circuit evaluation. If the evaluation of a particular condition automatically determines the final result (such as a condition that evaluates to false in a compound statement concatenated with <b style="mso-bidi-font-weight:normal">AND</b>), the evaluation does not continue.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1430&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">For example, in this <b style="mso-bidi-font-weight:normal">.WHILE</b> statement,</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.WHILE (ax &gt; 0) &amp;&amp; (WORD PTR [bx] == 0)<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1431&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">the assembler evaluates the first condition. If this condition is false (that is, if AX is less than or equal to 0), the evaluation is finished. The second condition is not checked and the loop does not execute, because a compound condition containing <b style="mso-bidi-font-weight:normal">&amp;&amp;</b> requires both expressions to be true for the entire condition to be true.</p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<h1 style="margin-left:0in">Procedures</h1>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Procedures:overview&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1153&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Organizing your code into procedures that execute specific tasks divides large programs into manageable units, allows for separate testing, and makes code more efficient for repetitive tasks.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1432&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Assembly-language procedures are similar to functions, subroutines, and procedures in high-level languages such as C, FORTRAN, and Pascal. Two instructions control the use of assembly-language procedures. <b style="mso-bidi-font-weight:normal">CALL</b> pushes the return address onto the stack and transfers control to a procedure, and <b style="mso-bidi-font-weight:
normal">RET</b> pops the return address off the stack and returns control to that location.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;Directives:PROC&quot; \z &quot;FLOWWW.DOC-1154&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;PROC directive&quot; \z
&quot;FLOWWW.DOC-1155&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;Directives:ENDP&quot; \z
&quot;FLOWWW.DOC-1156&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;ENDP directive&quot; \z
&quot;FLOWWW.DOC-1157&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The <b style="mso-bidi-font-weight:normal">PROC</b> and <b style="mso-bidi-font-weight:normal">ENDP</b> directives mark the beginning and end of a procedure. Additionally, <b style="mso-bidi-font-weight:normal">PROC</b> can automatically:</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1433&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>Preserve register values that should not change but that the procedure might otherwise alter.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1434&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>Set up a local stack pointer, so that you can access parameters and local variables placed on the stack.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1435&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>Adjust the stack when the procedure ends.</p>
			<p class="Le"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<h2 style="margin-left:0in">Defining Procedures</h2>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;Directives:PROC&quot; \z &quot;FLOWWW.DOC-1158&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;PROC directive&quot; \z
&quot;FLOWWW.DOC-1159&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;Directives:ENDP&quot; \z
&quot;FLOWWW.DOC-1160&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;ENDP directive&quot; \z
&quot;FLOWWW.DOC-1161&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Procedures:defining&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1162&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Procedures:RET
instruction&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1163&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Procedures:CALL
instruction&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1164&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;RET instruction:PROC,
with&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1165&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe Instructions:RET \t &quot;See RET
instruction&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1166&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:CALL&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1167&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Procedures require a label at the start of the procedure and a <b style="mso-bidi-font-weight:normal">RET</b> instruction<b style="mso-bidi-font-weight:normal"> </b>at the end. Procedures are normally defined by using the <b style="mso-bidi-font-weight:normal">PROC</b> directive at the start of the procedure and the <b style="mso-bidi-font-weight:normal">ENDP</b> directive at the end. The <b style="mso-bidi-font-weight:normal">RET</b> instruction normally is placed immediately before the <b style="mso-bidi-font-weight:
normal">ENDP</b> directive. The assembler makes sure the distance of the <b style="mso-bidi-font-weight:normal">RET</b> instruction matches the distance defined by the <b style="mso-bidi-font-weight:normal">PROC</b> directive. The basic syntax for <b style="mso-bidi-font-weight:normal">PROC</b> is:</p>
			<p class="Syn"><i style="mso-bidi-font-style:normal">label </i><b style="mso-bidi-font-weight:normal">PROC</b> <span style="font-family:Times;
letter-spacing:-1.5pt">[</span><span style="font-family:Times">[</span><b style="mso-bidi-font-weight:normal">NEAR</b> | <b style="mso-bidi-font-weight:
normal">FAR</b><span style="font-family:Times;letter-spacing:-1.5pt">]</span><span style="font-family:Times">]</span><br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<b style="mso-bidi-font-weight:normal">RET</b> <span style="font-family:Times;
letter-spacing:-1.5pt">[</span><span style="font-family:Times">[</span><i style="mso-bidi-font-style:normal">constant</i><span style="font-family:Times;
letter-spacing:-1.5pt">]</span><span style="font-family:Times">]</span><br>
			<i style="mso-bidi-font-style:normal">label</i> <b style="mso-bidi-font-weight:
normal">ENDP</b></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;CALL instruction&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1168&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The <b style="mso-bidi-font-weight:normal">CALL</b> instruction pushes the address of the next instruction in your code onto the stack and passes control to a specified address. The syntax is:</p>
			<p class="Syn"><b style="mso-bidi-font-weight:normal">CALL</b> {<i style="mso-bidi-font-style:normal">label</i> | <i style="mso-bidi-font-style:
normal">register</i> | <i style="mso-bidi-font-style:normal">memory</i>}</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1436&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The operand contains a value calculated at run time. Since that operand can be a register, direct memory operand, or indirect memory operand, you can write call tables similar to the example code on page 164.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1437&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Calls can be near or far. Near calls push only the offset portion of the calling address and therefore must target a procedure within the same segment or group. You can specify the type for the target operand. If you do not, MASM uses the declared distance (<b style="mso-bidi-font-weight:normal">NEAR</b> or <b style="mso-bidi-font-weight:normal">FAR</b>) for operands that are labels and for the size of register or memory operands. The assembler then encodes the call appropriately, as it does with unconditional jumps. (See previous &#147;Unconditional Jumps&#148; and &#147;Conditional Jumps.&#148;)</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Procedures:calls:optimizing&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1169&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">MASM optimizes a call to a far non-external label when the label is in the current segment by generating the code for a near call, saving one byte.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;Directives:PROC&quot; \z &quot;FLOWWW.DOC-1170&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;PROC directive&quot; \z
&quot;FLOWWW.DOC-1171&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;Directives:ENDP&quot; \z
&quot;FLOWWW.DOC-1172&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;ENDP directive&quot; \z
&quot;FLOWWW.DOC-1173&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">You can define procedures without <b style="mso-bidi-font-weight:
normal">PROC</b> and <b style="mso-bidi-font-weight:normal">ENDP</b>, but if you do, you must make sure that the size of the <b style="mso-bidi-font-weight:
normal">CALL</b> matches the size of the <b style="mso-bidi-font-weight:normal">RET</b>. You can specify the <b style="mso-bidi-font-weight:normal">RET</b> instruction as <b style="mso-bidi-font-weight:normal">RETN</b> (Return Near) or <b style="mso-bidi-font-weight:normal">RETF</b> (Return Far) to override the default size:</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>call<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>NEAR PTR task<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>; Call is declared near<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>; Return comes to here<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			task:<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Procedure begins with near label<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Instructions go here<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>retn<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Return declared near<br style="mso-special-character:
line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Instructions:RETN&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1174&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:RETF&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1175&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;RETF instruction&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1176&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;RETN instruction&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1177&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Procedures:RETN
instruction&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1178&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Procedures:RETF
instruction&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1179&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The syntax for <b style="mso-bidi-font-weight:normal">RETN</b> and <b style="mso-bidi-font-weight:normal">RETF</b> is:</p>
			<p class="Syn"><i style="mso-bidi-font-style:normal">label</i>: <b style="mso-bidi-font-weight:normal">|</b> <i style="mso-bidi-font-style:normal">label </i><b style="mso-bidi-font-weight:normal">LABEL</b> <b style="mso-bidi-font-weight:
normal">NEAR</b><br>
			<i style="mso-bidi-font-style:normal">statements<br>
			</i><b style="mso-bidi-font-weight:normal">RETN</b> <span style="font-family:
Times;letter-spacing:-1.5pt">[</span><span style="font-family:Times">[</span><i style="mso-bidi-font-style:normal">constant</i><span style="font-family:Times;
letter-spacing:-1.5pt">]</span><span style="font-family:Times">]</span></p>
			<p class="Syn"><i style="mso-bidi-font-style:normal">label</i> <b style="mso-bidi-font-weight:normal">LABEL FAR<br>
			</b><i style="mso-bidi-font-style:normal">statements<br>
			</i><b style="mso-bidi-font-weight:normal">RETF</b> <span style="font-family:
Times;letter-spacing:-1.5pt">[</span><span style="font-family:Times">[</span><i style="mso-bidi-font-style:normal">constant</i><span style="font-family:Times;
letter-spacing:-1.5pt">]</span><span style="font-family:Times">]</span></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1438&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The <b style="mso-bidi-font-weight:normal">RET</b> instruction (and its <b style="mso-bidi-font-weight:normal">RETF</b> and <b style="mso-bidi-font-weight:normal">RETN</b> variations) allows an optional constant operand that specifies a number of bytes to be added to the value of the SP register after the return. This operand adjusts for arguments passed to the procedure before the call, as shown in the example in &#147;Using Local Variables,&#148; following.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;Directives:PROC&quot; \z &quot;FLOWWW.DOC-1180&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;PROC directive&quot; \z
&quot;FLOWWW.DOC-1181&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;Directives:ENDP&quot; \z
&quot;FLOWWW.DOC-1182&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;ENDP directive&quot; \z
&quot;FLOWWW.DOC-1183&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">When you define procedures without <b style="mso-bidi-font-weight:
normal">PROC</b> and <b style="mso-bidi-font-weight:normal">ENDP</b>, you must make sure that calls have the same size as corresponding returns. For example, <b style="mso-bidi-font-weight:normal">RETF</b> pops two words off the stack. If a <b style="mso-bidi-font-weight:normal">NEAR</b> call is made to a procedure with a far return, the popped value is meaningless, and the stack status may cause the execution to return to a random memory location, resulting in program failure.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1439&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">An extended <b style="mso-bidi-font-weight:normal">PROC</b> syntax automates many of the details of accessing arguments and saving registers. See &#147;Declaring Parameters with the PROC Directive,&#148; later in this chapter.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Procedures:arguments:passing&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1184&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Arguments:stack, on&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1185&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Stacks:passing arguments
on&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1186&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<h2 style="margin-left:0in">Passing Arguments on the Stack</h2>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1440&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Each time you call a procedure, you may want it to operate on different data. This data, called &#147;arguments,&#148; can be passed to the procedure in various ways. Although you can pass arguments to a procedure in registers or in variables, the most common method is the stack. Microsoft languages have specific conventions for passing arguments. These conventions for assembly-language modules shared with modules from high-level languages are explained in Chapter 12, &#147;Mixed-Language Programming.&#148;</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1441&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Procedures:arguments:passing&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1187&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">This section describes how a procedure accesses the arguments passed to it on the stack. Each argument is accessed as an offset from BP. However, if you use the <b style="mso-bidi-font-weight:normal">PROC</b> directive to declare parameters, the assembler calculates these offsets for you and lets you refer to parameters by name. The next section, &#147;Declaring Parameters with the PROC Directive,&#148; explains how to use <b style="mso-bidi-font-weight:
normal">PROC</b> this way. This example shows how to pass arguments to a procedure. The procedure expects to find those arguments on the stack. As this example shows, arguments must be accessed as offsets of BP.</p>
			<p class="Ex" style="page-break-after:auto">; C-style procedure call and definition<br>
			<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, 10<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Load and<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>push<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>ax<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>push constant as third argument<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>push<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>arg2<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Push memory as second argument<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>push<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>cx<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Push register as first argument<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>call<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>addup<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Call the procedure<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>add<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>sp, 6<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Destroy the pushed arguments<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>(equivalent to three pops)<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			addup<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>PROC<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>NEAR<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Return address for near call<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>takes two bytes<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>push<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>bp<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Save base pointer - takes two bytes<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>so arguments start at fourth byte<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>bp, sp<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Load stack into base pointer<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, [bp+4]<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Get first argument from<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>fourth byte above pointer<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>add<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, [bp+6]<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Add second argument from<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>sixth byte above pointer<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>add<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, [bp+8]<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Add third argument from<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>eighth byte above pointer<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>pop<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>bp<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Restore BP<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>ret<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Return result in AX<br>
			addup<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>ENDP</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1442&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Figure 7.1 shows the stack condition at key points in the process.</p>
			<p class="Art" style="margin-left:0in"><span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp; </span><span style='mso-field-code:"include M\:\\\\SLM\\\\SRC\\\\MASM61\\\\APPS\\\\ART\\\\mpchp07\.doc art_mp0701_eps  \\\\* mergeformat"'><a name="art_mp0701_eps"></a><a name="space_mp0701_eps"><span style="mso-bookmark:
art_mp0701_eps"></span></a><!--[if supportFields]><span style='mso-bookmark:
space_mp0701_eps'><span style='mso-bookmark:art_mp0701_eps'></span></span><span
style='mso-element:field-begin'></span><span style='mso-bookmark:space_mp0701_eps'><span
style='mso-bookmark:art_mp0701_eps'>IMPORT
M:\\SLM\\SRC\\MASM61\\APPS\\ART\\MP0701.EPS \* mergeformat<span
style='mso-element:field-separator'></span></span></span><![endif]-->
			<span style="mso-bookmark:space_mp0701_eps"><span style="mso-bookmark:art_mp0701_eps"><!--[if gte vml 1]><v:shapetype
 id="_x0000_t75" coordsize="21600,21600" o:spt="75" o:preferrelative="t"
 path="m@4@5l@4@11@9@11@9@5xe" filled="f" stroked="f">
 <v:stroke joinstyle="miter"/>
 <v:formulas>
  <v:f eqn="if lineDrawn pixelLineWidth 0"/>
  <v:f eqn="sum @0 1 0"/>
  <v:f eqn="sum 0 0 @1"/>
  <v:f eqn="prod @2 1 2"/>
  <v:f eqn="prod @3 21600 pixelWidth"/>
  <v:f eqn="prod @3 21600 pixelHeight"/>
  <v:f eqn="sum @0 0 1"/>
  <v:f eqn="prod @6 1 2"/>
  <v:f eqn="prod @7 21600 pixelWidth"/>
  <v:f eqn="sum @8 21600 0"/>
  <v:f eqn="prod @7 21600 pixelHeight"/>
  <v:f eqn="sum @10 21600 0"/>
 </v:formulas>
 <v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"/>
 <o:lock v:ext="edit" aspectratio="t"/>
</v:shapetype><v:shape id="_x0000_i1025" type="#_x0000_t75" style='width:284.25pt;
 height:348.75pt'>
 <v:imagedata src="./Chap_07_files/image001.wmz" o:href="file:///M:/SLM/SRC/MASM61/APPS/ART/MP0701.EPS"/>
</v:shape><![endif]-->
			<![if !vml]><img width="379" height="465" src="Chap_07_files/image002.gif" v:shapes="_x0000_i1025"><![endif]></span></span><!--[if supportFields]><span
style='mso-bookmark:space_mp0701_eps'><span style='mso-bookmark:art_mp0701_eps'></span></span><span
style='mso-element:field-end'></span><![endif]-->
			 <span style="mso-bookmark:
space_mp0701_eps"><span style="mso-bookmark:art_mp0701_eps"></span></span></span></p>
			<p class="Cap">Figure <!--[if supportFields]><span style='font-family:Times'><span
style='mso-element:field-begin'></span>SEQ chapter \c<span style='mso-element:
field-separator'></span></span><![endif]-->
			<span style="font-family:Times">7</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-end'></span></span><![endif]-->
			 <span style="font-family:Times">.</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-begin'></span>SEQ
figure<span style='mso-element:field-separator'></span></span><![endif]-->
			 <span style="font-family:Times">1</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-end'></span></span><![endif]-->
			 <span style="font-family:Helvetica-Narrow"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span></span>Procedure Arguments on the Stack</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Instructions:ENTER&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1188&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:LEAVE&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1189&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;ENTER instruction&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1190&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;LEAVE instruction&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1191&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Starting with the 80186 processor, the <b style="mso-bidi-font-weight:
normal">ENTER</b> and <b style="mso-bidi-font-weight:normal">LEAVE</b> instructions simplify the stack setup and restore instructions at the beginning and end of procedures. However, <b style="mso-bidi-font-weight:normal">ENTER</b> uses a lot of time. It is necessary only with nested, statically-scoped procedures. Thus, a Pascal compiler may sometimes generate <b style="mso-bidi-font-weight:
normal">ENTER</b>. The <b style="mso-bidi-font-weight:normal">LEAVE</b> instruction, on the other hand, is an efficient way to do the stack cleanup. <b style="mso-bidi-font-weight:normal">LEAVE</b> reverses the effect of the last <b style="mso-bidi-font-weight:normal">ENTER</b> instruction by restoring BP and SP to their values before the procedure call.</p>
			<h2 style="margin-left:0in">Declaring Parameters with the PROC Directive</h2>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;Directives:PROC&quot; \z &quot;FLOWWW.DOC-1192&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;PROC directive&quot; \z
&quot;FLOWWW.DOC-1193&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE
&quot;Procedures:parameters:declaring&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1194&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Procedures:syntax
description&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1195&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">With the <b style="mso-bidi-font-weight:normal">PROC</b> directive, you can specify registers to be saved, define param-<br>
			eters to the procedure, and assign symbol names to parameters (rather than as offsets from BP). This section describes how to use the<b style="mso-bidi-font-weight:
normal"> PROC</b> directive to automate the parameter-accessing techniques described in the last section.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;USES in PROC statement&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1196&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">For example, the following diagram shows a valid <b style="mso-bidi-font-weight:normal">PROC</b> statement for a procedure called from C. It takes two parameters, <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>var1</span> and <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>arg1</span>, and uses (and must save) the DI and SI registers:</p>
			<p class="Art" style="margin-left:0in"><span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp; </span><span style='mso-field-code:"include M\:\\\\SLM\\\\SRC\\\\MASM61\\\\APPS\\\\ART\\\\mpchp07\.doc art_mp0702_eps  \\\\* mergeformat"'><a name="art_mp0702_eps"></a><a name="space_mp0702_eps"><span style="mso-bookmark:
art_mp0702_eps"></span></a><!--[if supportFields]><span style='mso-bookmark:
space_mp0702_eps'><span style='mso-bookmark:art_mp0702_eps'></span></span><span
style='mso-element:field-begin'></span><span style='mso-bookmark:space_mp0702_eps'><span
style='mso-bookmark:art_mp0702_eps'>IMPORT
M:\\SLM\\SRC\\MASM61\\APPS\\ART\\MP0702.EPS \* mergeformat<span
style='mso-element:field-separator'></span></span></span><![endif]-->
			<span style="mso-bookmark:space_mp0702_eps"><span style="mso-bookmark:art_mp0702_eps"><!--[if gte vml 1]><v:shape
 id="_x0000_i1026" type="#_x0000_t75" style='width:341.25pt;height:33.75pt'>
 <v:imagedata src="./Chap_07_files/image003.wmz" o:href="file:///M:/SLM/SRC/MASM61/APPS/ART/MP0702.EPS"/>
</v:shape><![endif]-->
			<![if !vml]><img width="455" height="45" src="Chap_07_files/image004.gif" v:shapes="_x0000_i1026"><![endif]></span></span><!--[if supportFields]><span
style='mso-bookmark:space_mp0702_eps'><span style='mso-bookmark:art_mp0702_eps'></span></span><span
style='mso-element:field-end'></span><![endif]-->
			 <span style="mso-bookmark:
space_mp0702_eps"><span style="mso-bookmark:art_mp0702_eps"></span></span></span></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;Directives:PROC&quot; \z &quot;FLOWWW.DOC-1197&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;PROC directive&quot; \z
&quot;FLOWWW.DOC-1198&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The syntax for <b style="mso-bidi-font-weight:normal">PROC</b> is:</p>
			<p class="Syn"><i style="mso-bidi-font-style:normal">label</i> <b style="mso-bidi-font-weight:normal">PROC</b> <span style="font-family:Times;
letter-spacing:-1.5pt">[</span><span style="font-family:Times">[</span><i style="mso-bidi-font-style:normal">attributes</i><span style="font-family:Times;
letter-spacing:-1.5pt">]</span><span style="font-family:Times">]</span> <span style="font-family:Times;letter-spacing:-1.5pt">[</span><span style="font-family:
Times">[</span><b style="mso-bidi-font-weight:normal">USES </b><i style="mso-bidi-font-style:normal">reglist</i><span style="font-family:Times;
letter-spacing:-1.5pt">]</span><span style="font-family:Times">] <span style="letter-spacing:-1.5pt">[</span>[</span><i style="mso-bidi-font-style:
normal">, </i><span style="font-family:Times;letter-spacing:-1.5pt">]</span><span style="font-family:Times">]</span> <span style="font-family:Times;letter-spacing:
-1.5pt">[</span><span style="font-family:Times">[</span><i style="mso-bidi-font-style:
normal">parameter</i><span style="font-family:Times;letter-spacing:-1.5pt">[</span><span style="font-family:Times">[</span>:<i style="mso-bidi-font-style:normal">tag</i><span style="font-family:Times;letter-spacing:-1.5pt">]</span><span style="font-family:
Times">]</span><b style="mso-bidi-font-weight:normal">...</b> <span style="font-family:Times;letter-spacing:-1.5pt">]</span><span style="font-family:
Times">]</span></p>
			<p class="MsoNormal">The parts of the <b style="mso-bidi-font-weight:normal">PROC</b> directive include:</p>
			<table border="0" cellspacing="0" cellpadding="0" style="margin-left:.4pt;border-collapse:
 collapse;mso-padding-alt:0in 0in 0in 0in">
				<tr>
					<td width="63" valign="top" style="width:47.5pt;padding:0in 0in 0in 0in">
						<p class="Thf">Argument</p>
						<p class="Thf"></p>
					</td>
					<td width="401" valign="top" style="width:300.5pt;padding:0in 0in 0in 0in">
						<p class="Th">Description</p>
						<p class="Th"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="464" colspan="2" valign="top" style="width:348.0pt;padding:0in 0in 0in 0in">
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
							<p class="Tr"></p>
						</div>
					</td>
					<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
						<p class="Tr"></p>
					</div>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="63" valign="top" style="width:47.5pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><i style="mso-bidi-font-style:normal">label</i></p>
						<p class="Tpf"></p>
					</td>
					<td width="401" valign="top" style="width:300.5pt;padding:0in 0in 0in 0in">
						<p class="Tp">The name of the procedure.</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
				</tr>
				<tr>
					<td width="63" valign="top" style="width:47.5pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><i style="mso-bidi-font-style:normal">attributes</i></p>
						<p class="Tpf"></p>
					</td>
					<td width="401" valign="top" style="width:300.5pt;padding:0in 0in 0in 0in">
						<p class="Tp">Any of several attributes of the procedure, including the distance, <i style="mso-bidi-font-style:normal">langtype</i>, and <i style="mso-bidi-font-style:normal">visibility</i> of the procedure. The syntax for <i style="mso-bidi-font-style:normal">attributes</i> is given on the following page.</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="63" valign="top" style="width:47.5pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><i style="mso-bidi-font-style:normal">reglist</i></p>
						<p class="Tpf"></p>
					</td>
					<td width="401" valign="top" style="width:300.5pt;padding:0in 0in 0in 0in">
						<p class="Tp">A list of registers following the <b style="mso-bidi-font-weight:
  normal"><span style="font-size:9.0pt">USES</span></b> keyword that the procedure uses, and that should be saved on entry. Registers in the list must be separated by blanks or tabs, not by commas. The assembler generates prologue code to push these registers onto the stack. When you exit, the assembler generates epilogue code to pop the saved register values off the stack.</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="63" valign="top" style="width:47.5pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><i style="mso-bidi-font-style:normal">parameter</i></p>
						<p class="Tpf"></p>
					</td>
					<td width="401" valign="top" style="width:300.5pt;padding:0in 0in 0in 0in">
						<p class="Tp">The list of parameters passed to the procedure on the stack. The list can have a variable number of parameters. See the discussion following for the syntax of <i style="mso-bidi-font-style:normal">parameter</i>. This list can be longer than one line if the continued line ends with a comma.</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
			</table>
			<p class="Le"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;Directives:PROC&quot; \z &quot;FLOWWW.DOC-1199&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;PROC directive&quot; \z
&quot;FLOWWW.DOC-1200&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">This diagram shows a valid<i style="mso-bidi-font-style:
normal"> </i><b style="mso-bidi-font-weight:normal">PROC</b> definition that uses several attributes:</p>
			<p class="Art" style="margin-left:0in"><span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp; </span><span style='mso-field-code:"include M\:\\\\SLM\\\\SRC\\\\MASM61\\\\APPS\\\\ART\\\\mpchp07\.doc art_mp0703_eps  \\\\* mergeformat"'><a name="art_mp0703_eps"></a><a name="space_mp0703_eps"><span style="mso-bookmark:
art_mp0703_eps"></span></a><!--[if supportFields]><span style='mso-bookmark:
space_mp0703_eps'><span style='mso-bookmark:art_mp0703_eps'></span></span><span
style='mso-element:field-begin'></span><span style='mso-bookmark:space_mp0703_eps'><span
style='mso-bookmark:art_mp0703_eps'>IMPORT
M:\\SLM\\SRC\\MASM61\\APPS\\ART\\MP0703.EPS \* mergeformat<span
style='mso-element:field-separator'></span></span></span><![endif]-->
			<span style="mso-bookmark:space_mp0703_eps"><span style="mso-bookmark:art_mp0703_eps"><!--[if gte vml 1]><v:shape
 id="_x0000_i1027" type="#_x0000_t75" style='width:348pt;height:73.5pt'>
 <v:imagedata src="./Chap_07_files/image005.wmz" o:href="file:///M:/SLM/SRC/MASM61/APPS/ART/MP0703.EPS"/>
</v:shape><![endif]-->
			<![if !vml]><img width="464" height="98" src="Chap_07_files/image006.gif" v:shapes="_x0000_i1027"><![endif]></span></span><!--[if supportFields]><span
style='mso-bookmark:space_mp0703_eps'><span style='mso-bookmark:art_mp0703_eps'></span></span><span
style='mso-element:field-end'></span><![endif]-->
			 <span style="mso-bookmark:
space_mp0703_eps"><span style="mso-bookmark:art_mp0703_eps"></span></span></span></p>
			<h3>Attributes</h3>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1443&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The syntax for the attributes field is:</p>
			<p class="Syn"><b style="mso-bidi-font-weight:normal"><span style="font-family:
Times;letter-spacing:-1.5pt">[</span></b><b style="mso-bidi-font-weight:normal"><span style="font-family:Times">[</span></b><i style="mso-bidi-font-style:normal">distance</i><span style="font-family:Times;letter-spacing:-1.5pt">]</span><b style="mso-bidi-font-weight:
normal"><span style="font-family:Times">]</span> </b><b style="mso-bidi-font-weight:
normal"><span style="font-family:Times;letter-spacing:-1.5pt">[</span></b><b style="mso-bidi-font-weight:normal"><span style="font-family:Times">[</span></b><i style="mso-bidi-font-style:normal">langtype</i><b style="mso-bidi-font-weight:
normal"><span style="font-family:Times;letter-spacing:-1.5pt">]</span></b><b style="mso-bidi-font-weight:normal"><span style="font-family:Times">]</span> </b><b style="mso-bidi-font-weight:normal"><span style="font-family:Times;letter-spacing:
-1.5pt">[</span></b><b style="mso-bidi-font-weight:normal"><span style="font-family:Times">[</span></b><i style="mso-bidi-font-style:normal">visibility</i><span style="font-family:Times;letter-spacing:-1.5pt">]</span><b style="mso-bidi-font-weight:
normal"><span style="font-family:Times">]</span> </b><b style="mso-bidi-font-weight:
normal"><span style="font-family:Times;letter-spacing:-1.5pt">[</span></b><span style="font-family:Times">[</span>&lt;<i style="mso-bidi-font-style:normal">prologuearg</i>&gt;<span style="font-family:Times;letter-spacing:-1.5pt">]</span><b style="mso-bidi-font-weight:
normal"><span style="font-family:Times">]</span> </b></p>
			<p class="MsoNormal">The explanations for these options include:</p>
			<table border="0" cellspacing="0" cellpadding="0" style="margin-left:.4pt;border-collapse:
 collapse;mso-padding-alt:0in 0in 0in 0in">
				<tr>
					<td width="66" valign="top" style="width:49.35pt;padding:0in 0in 0in 0in">
						<p class="Thf">Argument</p>
						<p class="Thf"></p>
					</td>
					<td width="415" colspan="2" valign="top" style="width:311.4pt;padding:0in 0in 0in 0in">
						<p class="Th">Description</p>
						<p class="Th"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr style="mso-row-margin-right:12.75pt">
					<td width="464" colspan="2" valign="top" style="width:348.0pt;padding:0in 0in 0in 0in">
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
							<p class="Tr"></p>
						</div>
					</td>
					<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
						<p class="Tr"></p>
					</div>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
					<td style="mso-cell-special:placeholder;border:none;padding:0in 0in 0in 0in" width="17">
						<p class="MsoNormal">&nbsp;</td>
				</tr>
				<tr>
					<td width="66" valign="top" style="width:49.35pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><i style="mso-bidi-font-style:normal">distance</i></p>
						<p class="Tpf"></p>
					</td>
					<td width="415" colspan="2" valign="top" style="width:311.4pt;padding:0in 0in 0in 0in">
						<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
  &quot;Procedures:PROC attributes, specifying&quot;<span style='mso-hide:none'>
  \z &quot;FLOWWW.DOC-1201&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-begin'></span>XE &quot;Procedures:PROC attributes,
  specifying&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1202&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-begin'></span>XE &quot;Procedures:PROC attributes,
  specifying&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1203&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-begin'></span>XE &quot;Procedures:PROC attributes,
  specifying&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1204&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-begin'></span>XE &quot;NEAR operator&quot;<span
  style='mso-hide:none'> \z &quot;FLOWWW.DOC-1205&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-begin'></span>XE &quot;FAR operator&quot;<span
  style='mso-hide:none'> \z &quot;FLOWWW.DOC-1206&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-begin'></span>XE &quot;Operator:NEAR&quot;<span
  style='mso-hide:none'> \z &quot;FLOWWW.DOC-1207&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-begin'></span>XE &quot;Operator:FAR&quot;<span
  style='mso-hide:none'> \z &quot;FLOWWW.DOC-1208&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						</p>
						<p class="Tp">Controls the form of the <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">RET</span></b> instruction generated. Can be <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">NEAR</span></b> or <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">FAR</span></b>. If <i style="mso-bidi-font-style:normal">distance</i> is not specified, it is determined from the model declared with the <b style="mso-bidi-font-weight:
  normal"><span style="font-size:9.0pt">.MODEL</span></b> directive. <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">NEAR</span></b> distance is assumed for <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">TINY, SMALL</span></b>, <b style="mso-bidi-font-weight:
  normal"><span style="font-size:9.0pt">COMPACT</span></b>, and <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">FLAT</span></b>. The assembler assumes <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">FAR</span></b> distance for <b style="mso-bidi-font-weight:
  normal"><span style="font-size:9.0pt">MEDIUM</span></b>, <b style="mso-bidi-font-weight:
  normal"><span style="font-size:9.0pt">LARGE</span></b>, and <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">HUGE</span></b>. For 80386/486 programming with 16- and 32-bit segments, you can specify <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">NEAR16</span></b>,<b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt"> NEAR32</span></b>,<b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt"> FAR16</span></b>, or <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">FAR32</span></b>.</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
				</tr>
				<tr>
					<td width="66" valign="top" style="width:49.35pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><i style="mso-bidi-font-style:normal">langtype</i></p>
						<p class="Tpf"></p>
					</td>
					<td width="415" colspan="2" valign="top" style="width:311.4pt;padding:0in 0in 0in 0in">
						<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
  &quot;Stacks:cleaning&quot;<span style='mso-hide:none'> \z
  &quot;FLOWWW.DOC-1209&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-begin'></span>XE &quot;Cleaning the stack&quot;<span
  style='mso-hide:none'> \z &quot;FLOWWW.DOC-1210&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-begin'></span>XE &quot;Memory models:specifying in
  PROC statement&quot;<span style='mso-hide:none'> \z
  &quot;FLOWWW.DOC-1211&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-begin'></span>XE &quot;Visibility:PROC
  statement&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1212&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						</p>
						<p class="Tp">Determines the calling convention used to access parameters and restore the stack. The <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">BASIC</span></b>, <b style="mso-bidi-font-weight:
  normal"><span style="font-size:9.0pt">FORTRAN</span></b>, and <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">PASCAL</span></b> <i style="mso-bidi-font-style:normal">langtypes</i> convert procedure names to uppercase, place the last parameter in the parameter list lowest on the stack, and generate a <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">RET</span></b> <i style="mso-bidi-font-style:normal">num</i> instruction to end the procedure. The <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">RET</span></b> adjusts the stack upward by <i style="mso-bidi-font-style:normal">num</i>, which represents the number of bytes in the argument list. This step, called &#147;cleaning the stack,&#148; returns the stack pointer SP to the value it had before the caller pushed any arguments.</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="66" valign="top" style="width:49.35pt;padding:0in 0in 0in 0in">
						<p class="Tpf"></p>
						<p class="Tpf"></p>
					</td>
					<td width="415" colspan="2" valign="top" style="width:311.4pt;padding:0in 0in 0in 0in">
						<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
  Scope \t &quot;See also Visibility&quot;<span style='mso-hide:none'> \z
  &quot;FLOWWW.DOC-1213&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						</p>
						<p class="Tp">The <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">C</span></b> and <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">STDCALL</span></b> <i style="mso-bidi-font-style:
  normal">langtype</i> prefixes an underscore to the procedure name when the procedure&#146;s scope is <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">PUBLIC</span></b> or <b style="mso-bidi-font-weight:
  normal"><span style="font-size:9.0pt">EXPORT</span></b> and places the first parameter lowest on the stack. <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">SYSCALL</span></b> is equivalent to the <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">C</span></b> calling convention with no underscore prefixed to the procedure&#146;s name. <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">STDCALL</span></b> uses caller stack cleanup when <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">:VARARG</span></b> is specified; otherwise the called routine must clean up the stack (see Chapter 12).</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="66" valign="top" style="width:49.35pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><i style="mso-bidi-font-style:normal">visibility</i></p>
						<p class="Tpf"></p>
					</td>
					<td width="415" colspan="2" valign="top" style="width:311.4pt;padding:0in 0in 0in 0in">
						<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
  &quot;PUBLIC directive&quot;<span style='mso-hide:none'> \z
  &quot;FLOWWW.DOC-1214&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-begin'></span>XE &quot;PRIVATE operand&quot;<span
  style='mso-hide:none'> \z &quot;FLOWWW.DOC-1215&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-begin'></span>XE &quot;EXPORT operand&quot;<span
  style='mso-hide:none'> \z &quot;FLOWWW.DOC-1216&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-begin'></span>XE &quot;OPTION directive:PROC&quot;<span
  style='mso-hide:none'> \z &quot;FLOWWW.DOC-1217&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						</p>
						<p class="Tp">Indicates whether the procedure is available to other modules. The <i style="mso-bidi-font-style:normal">visibility</i> can be <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">PRIVATE, PUBLIC</span></b>, or <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">EXPORT</span></b>. A procedure name is <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">PUBLIC</span></b> unless it is explicitly declared as <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">PRIVATE</span></b>. If the <i style="mso-bidi-font-style:
  normal">visibility</i> is <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">EXPORT</span></b>, the linker places the procedure&#146;s name in the export table for segmented executables. <b style="mso-bidi-font-weight:
  normal"><span style="font-size:9.0pt">EXPORT</span></b> also enables <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">PUBLIC</span></b> visibility.</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="66" valign="top" style="width:49.35pt;padding:0in 0in 0in 0in">
						<p class="Tpf"></p>
						<p class="Tpf"></p>
					</td>
					<td width="415" colspan="2" valign="top" style="width:311.4pt;padding:0in 0in 0in 0in">
						<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
  &quot;PROC\\:PUBLIC argument, OPTION directive&quot;<span style='mso-hide:
  none'> \z &quot;FLOWWW.DOC-1218&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						</p>
						<p class="Tp">You can explicitly set the default <i style="mso-bidi-font-style:
  normal">visibility</i> with the <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">OPTION</span></b> directive. <b style="mso-bidi-font-weight:
  normal"><span style="font-size:9.0pt">OPTION PROC:PUBLIC</span></b> sets the default to public. For more information, see Chapter 1, &#147;Using the Option Directive.&#148;</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="66" valign="top" style="width:49.35pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><i style="mso-bidi-font-style:normal">prologuearg</i></p>
						<p class="Tpf"></p>
					</td>
					<td width="415" colspan="2" valign="top" style="width:311.4pt;padding:0in 0in 0in 0in">
						<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
  &quot;Prologue code:arguments, specifying&quot;<span style='mso-hide:none'>
  \z &quot;FLOWWW.DOC-1219&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-begin'></span>XE &quot;Epilogue code:PROC statement,
  specifying arguments in&quot;<span style='mso-hide:none'> \z
  &quot;FLOWWW.DOC-1220&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						</p>
						<p class="Tp">Specifies the arguments that affect the generation of prologue and epilogue code (the code MASM generates when it encounters a <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">PROC</span></b> directive or the end of a procedure). For an explanation of prologue and epilogue code, see &#147;Generating Prologue and Epilogue Code,&#148; later in this chapter.</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<![if !supportMisalignedColumns]>
				<tr height="0">
					<td width="66" style="border:none"></td>
					<td width="382" style="border:none"></td>
					<td width="16" style="border:none"></td>
				</tr>
				<![endif]>
			</table>
			<p class="Le"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<h3>Parameters</h3>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Procedures:parameters:declaring&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1221&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Procedures:parameters:variable
numbers of&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1222&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Procedures:VARARG keyword&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1223&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;VARARG keyword:procedures, used
with&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1224&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The comma that separates <i style="mso-bidi-font-style:normal">parameters</i> from <i style="mso-bidi-font-style:normal">reglist</i> is optional, if both fields appear on the same line. If <i style="mso-bidi-font-style:normal">parameters</i> appears on a separate line, you must end the <i style="mso-bidi-font-style:
normal">reglist</i> field with a comma. In the syntax:</p>
			<p class="Syn"><i style="mso-bidi-font-style:normal">parmname</i> <span style="font-family:Times;letter-spacing:-1.5pt">[</span><span style="font-family:
Times">[</span><b style="mso-bidi-font-weight:normal">:</b><i style="mso-bidi-font-style:
normal">tag</i><b style="mso-bidi-font-weight:normal"><span style="font-family:
Times;letter-spacing:-1.5pt">]</span></b></p>
			<p class="index"><!--[if supportFields]><i style='mso-bidi-font-style:normal'><span
style='mso-element:field-begin'></span>xe &quot;aa&quot; \z
&quot;FLOWWW.DOC-1444&quot;</i><![endif]-->
			<!--[if supportFields]><i
style='mso-bidi-font-style:normal'><span style='mso-element:field-end'></span></i><![endif]-->
			</p>
			<p class="MsoNormal"><i style="mso-bidi-font-style:normal">parmname </i>is the name of the parameter. The <i style="mso-bidi-font-style:normal">tag</i> can be the <i style="mso-bidi-font-style:normal">qualifiedtype</i> or the keyword <b style="mso-bidi-font-weight:normal">VARARG</b>. However, only the last parameter in a list of param-<br>
			eters can use the <b style="mso-bidi-font-weight:normal">VARARG</b> keyword. The <i style="mso-bidi-font-style:normal">qualifiedtype</i> is discussed in &#147;Data Types,&#148; Chapter 1. An example showing how to reference <b style="mso-bidi-font-weight:normal">VARARG</b> param-<br>
			eters appears later in this section. You can nest procedures if they do not have parameters or <b style="mso-bidi-font-weight:normal">USES</b> register lists. This diagram shows a procedure definition with one parameter definition.</p>
			<p class="Art" style="margin-left:0in"><span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp; </span><span style='mso-field-code:"include M\:\\\\SLM\\\\SRC\\\\MASM61\\\\APPS\\\\ART\\\\mpchp07\.doc art_mp0704_eps  \\\\* mergeformat"'><a name="art_mp0704_eps"></a><a name="space_mp0704_eps"><span style="mso-bookmark:
art_mp0704_eps"></span></a><!--[if supportFields]><span style='mso-bookmark:
space_mp0704_eps'><span style='mso-bookmark:art_mp0704_eps'></span></span><span
style='mso-element:field-begin'></span><span style='mso-bookmark:space_mp0704_eps'><span
style='mso-bookmark:art_mp0704_eps'>IMPORT
M:\\SLM\\SRC\\MASM61\\APPS\\ART\\MP0704.EPS \* mergeformat<span
style='mso-element:field-separator'></span></span></span><![endif]-->
			<span style="mso-bookmark:space_mp0704_eps"><span style="mso-bookmark:art_mp0704_eps"><!--[if gte vml 1]><v:shape
 id="_x0000_i1028" type="#_x0000_t75" style='width:341.25pt;height:75pt'>
 <v:imagedata src="./Chap_07_files/image007.wmz" o:href="file:///M:/SLM/SRC/MASM61/APPS/ART/MP0704.EPS"/>
</v:shape><![endif]-->
			<![if !vml]><img width="455" height="100" src="Chap_07_files/image008.gif" v:shapes="_x0000_i1028"><![endif]></span></span><!--[if supportFields]><span
style='mso-bookmark:space_mp0704_eps'><span style='mso-bookmark:art_mp0704_eps'></span></span><span
style='mso-element:field-end'></span><![endif]-->
			 <span style="mso-bookmark:
space_mp0704_eps"><span style="mso-bookmark:art_mp0704_eps"></span></span></span></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1445&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The procedure presented in &#147;Passing Arguments on the Stack,&#148; page 182, is here rewritten using the extended <b style="mso-bidi-font-weight:
normal">PROC</b> functionality. Prior to the procedure call, you must push the arguments onto the stack unless you use <b style="mso-bidi-font-weight:normal">INVOKE.</b> (See &#147;Calling Procedures with INVOKE,&#148; later in this chapter.)</p>
			<p class="Ex">addup<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>PROC NEAR C,<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>arg1:WORD, arg2:WORD, count:WORD<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, arg1<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>add<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, count<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>add<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, arg2<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>ret<br>
			addup<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>ENDP<br style="mso-special-character:
line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1446&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">If the arguments for a procedure are pointers, the assembler does not generate any code to get the value or values that the pointers reference; your program must still explicitly treat the argument as a pointer. (For more information about using pointers, see Chapter 3, &#147;Using Addresses and Pointers.&#148;)</p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1447&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">In the following example, even though the procedure declares the parameters as near pointers, you must code two <b style="mso-bidi-font-weight:
normal">MOV</b> instructions to get the values of the param-<br>
			eters. The first <b style="mso-bidi-font-weight:normal">MOV</b> gets the address of the parameters, and the second <b style="mso-bidi-font-weight:normal">MOV</b> gets the parameter.</p>
			<p class="Ex">; Call from C as a FUNCTION returning an integer<br>
			<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.MODEL medium, c<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.CODE<br>
			myadd<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>PROC<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>arg1:NEAR PTR WORD, arg2:NEAR PTR WORD<br>
			<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>bx, arg1<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>; Load first argument<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, [bx]<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>bx, arg2<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>; Add second argument<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>add<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, [bx]<br>
			<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>ret<br>
			<br>
			myadd<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>ENDP<br style="mso-special-character:
line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
Assembly:conditional \t &quot;See Conditional assembly&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1225&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Conditional assembly:pointers,
with&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1226&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">You can use conditional-assembly directives to make sure your pointer parameters are loaded correctly for the memory model. For example, the following version of <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>myadd</span> treats the parameters as <b style="mso-bidi-font-weight:normal">FAR</b> parameters, if necessary.</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.MODEL<span style="mso-spacerun: yes">&nbsp; </span>medium, c<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Could be any model<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.CODE<br>
			myadd<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>PROC<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>arg1:PTR WORD,<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>arg2:PTR WORD<br>
			<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>IF<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>@DataSize<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>les<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>bx, arg1<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Far parameters<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, es:[bx]<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>les<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>bx, arg2<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>add<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, es:[bx]<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>ELSE<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span><br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>bx, arg1<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Near parameters<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, [bx]<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>bx, arg2<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>add<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, [bx]<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>ENDIF<br>
			<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>ret<br>
			myadd<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>ENDP<br style="mso-special-character:
line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<h3>Using VARARG</h3>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Procedures:parameters:variable numbers of&quot;<span style='mso-hide:
none'> \z &quot;FLOWWW.DOC-1227&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Procedures:VARARG keyword&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1228&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;VARARG keyword:procedures, used
with&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1229&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">In the <b style="mso-bidi-font-weight:normal">PROC</b> statement, you can append the <b style="mso-bidi-font-weight:normal">:VARARG</b> keyword to the last parameter to indicate that the procedure accepts a variable number of arguments. However, <b style="mso-bidi-font-weight:normal">:VARARG</b> applies only to the <b style="mso-bidi-font-weight:normal">C</b>, <b style="mso-bidi-font-weight:normal">SYSCALL</b>, or <b style="mso-bidi-font-weight:
normal">STDCALL</b> calling conventions (see Chapter 12). A symbol must precede <b style="mso-bidi-font-weight:normal">:VARARG</b> so the procedure can access arguments as offsets from the given variable name, as this example illustrates:</p>
			<p class="Ex">addup3<span style="mso-spacerun: yes">&nbsp; </span>PROTO NEAR C, argcount:WORD, arg1:VARARG<br>
			<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>invoke<span style="mso-spacerun:
yes">&nbsp; </span>addup3, 3, 5, 2, 4<br>
			<br>
			addup3<span style="mso-spacerun: yes">&nbsp; </span>PROC<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>NEAR C, argcount:WORD, arg1:VARARG<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>sub<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, ax<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Clear work register<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>sub<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>si, si<br>
			<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.WHILE<span style="mso-spacerun:
yes">&nbsp; </span>argcount &gt; 0<span style="mso-spacerun: yes">&nbsp; </span>; Argcount has number of arguments<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>add<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, arg1[si]<span style="mso-spacerun: yes">&nbsp; </span>; Arg1 has the first argument<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>dec<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>argcount<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Point to next argument<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>inc<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>si<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>inc<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>si<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.ENDW<br>
			<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>ret<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Total is in AX<br>
			addup3<span style="mso-spacerun: yes">&nbsp; </span>ENDP<br style="mso-special-character:
line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1448&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">You can pass non-default-sized pointers in the <b style="mso-bidi-font-weight:normal">VARARG</b> portion of the parameter list by separately passing the segment portion and the offset portion of the address.</p>
			<div style="border:none;border-bottom:solid windowtext .75pt;padding:0in 0in 1.0pt 0in">
				<p class="Ns"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			</div>
			<div style="mso-element:frame;mso-element-wrap:around">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" height="16" align="left">
					<tr>
						<td valign="top" align="left" height="16" style="padding-top:0in;padding-right:
  6.5pt;padding-bottom:0in;padding-left:6.5pt">
							<p class="Nh">Note</p>
						</td>
					</tr>
				</table>
			</div>
			<p class="Np1">When you use the extended <b style="mso-bidi-font-weight:normal">PROC</b> features and the assembler encounters a<b style="mso-bidi-font-weight:normal"> RET </b>instruction, it automatically generates instructions to pop saved registers, remove local variables from the stack, and, if necessary, remove parameters. It generates this code for each <b style="mso-bidi-font-weight:
normal">RET</b> instruction it encounters. You can reduce code size by having only one return and jumping to it from various locations.</p>
			<div style="border:none;border-top:solid windowtext .75pt;padding:1.0pt 0in 0in 0in">
				<p class="Ne"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			</div>
			<h2 style="margin-left:0in">Using Local Variables</h2>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Local variables:procedures, in&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1230&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe Variables:local \t &quot;See Local
variables&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1231&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Procedures:local
variables&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1232&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;LOCAL directive&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1233&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Directives:LOCAL&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1234&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Stacks:local variables on&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1235&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">In high-level languages, local variables are visible only within a procedure. In Microsoft languages, these variables are usually stored on the stack. In assembly-language programs, you can also have local variables. These variables should not be confused with labels or variable names that are local to a module, as described in Chapter 8, &#147;Sharing Data and Procedures Among Modules and Libraries.&#148;</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Directives:LOCAL&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1236&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Local variables:creating&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1237&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">This section outlines the standard methods for creating local variables. The next section shows how to use the <b style="mso-bidi-font-weight:
normal">LOCAL</b> directive to make the assembler</p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<p class="MsoNormal">automatically generate local variables. When you use this directive, the assembler generates the same instructions as those demonstrated in this section but handles some of the details for you.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1449&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">If your procedure has relatively few variables, you can usually write the most efficient code by placing these values in registers. Use local (stack) data when you have a large amount of temporary data for the procedure.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1450&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">To use a local variable, you must save stack space for it at the start of the procedure. A procedure can then reference the variable by its position in the stack. At the end of the procedure, you must clean the stack by restoring the stack pointer. This effectively throws away all local variables and regains the stack space they occupied.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1451&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">This example subtracts 2 bytes from the SP register to make room for a local word variable, then accesses the variable as <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>[bp-2]</span>.</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>push<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>ax<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Push one argument<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>call<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>task<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Call<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<br>
			task<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>PROC<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>NEAR<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>push<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>bp<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Save base pointer<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>bp, sp<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Load stack into base pointer<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>sub<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>sp, 2<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Save two bytes for local variable<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>WORD PTR [bp-2], 3 ; Initialize local variable<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>add<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, [bp-2]<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Add local variable to AX<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>sub<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>[bp+4], ax<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Subtract local from argument<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Use [bp-2] and [bp+4] in<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>other operations<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>sp, bp<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Clear local variables<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>pop<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>bp<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Restore base<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>ret<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>2<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Return result in AX and pop<br>
			task<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>ENDP<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>two bytes to clear parameter<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1452&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Notice the instruction <span style='font-size:9.5pt;
font-family:"Lucida Sans Typewriter"'>mov sp,bp</span> at the end of the procedure restores the original value of SP. The statement is required only if the value of SP changes inside the procedure (usually by allocating local variables). The argument passed to the procedure is removed with the <b style="mso-bidi-font-weight:normal">RET</b> instruction. Contrast this to the example in &#147;Passing Arguments on the Stack,&#148; page 182, in which the calling code adjusts the stack for the argument.</p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1453&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Figure 7.2 shows the stack at key points in the process.</p>
			<p class="Art" style="margin-left:0in"><span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp; </span><span style='mso-field-code:"include M\:\\\\SLM\\\\SRC\\\\MASM61\\\\APPS\\\\ART\\\\mpchp07\.doc art_mp0705_eps  \\\\* mergeformat"'><a name="art_mp0705_eps"></a><a name="space_mp0705_eps"><span style="mso-bookmark:
art_mp0705_eps"></span></a><!--[if supportFields]><span style='mso-bookmark:
space_mp0705_eps'><span style='mso-bookmark:art_mp0705_eps'></span></span><span
style='mso-element:field-begin'></span><span style='mso-bookmark:space_mp0705_eps'><span
style='mso-bookmark:art_mp0705_eps'>IMPORT
M:\\SLM\\SRC\\MASM61\\APPS\\ART\\MP0705.EPS \* mergeformat<span
style='mso-element:field-separator'></span></span></span><![endif]-->
			<span style="mso-bookmark:space_mp0705_eps"><span style="mso-bookmark:art_mp0705_eps"><!--[if gte vml 1]><v:shape
 id="_x0000_i1029" type="#_x0000_t75" style='width:284.25pt;height:315pt'>
 <v:imagedata src="./Chap_07_files/image009.wmz" o:href="file:///M:/SLM/SRC/MASM61/APPS/ART/MP0705.EPS"/>
</v:shape><![endif]-->
			<![if !vml]><img width="379" height="420" src="Chap_07_files/image010.gif" v:shapes="_x0000_i1029"><![endif]></span></span><!--[if supportFields]><span
style='mso-bookmark:space_mp0705_eps'><span style='mso-bookmark:art_mp0705_eps'></span></span><span
style='mso-element:field-end'></span><![endif]-->
			 <span style="mso-bookmark:
space_mp0705_eps"><span style="mso-bookmark:art_mp0705_eps"></span></span></span></p>
			<p class="Cap">Figure <!--[if supportFields]><span style='font-family:Times'><span
style='mso-element:field-begin'></span>SEQ chapter \c<span style='mso-element:
field-separator'></span></span><![endif]-->
			<span style="font-family:Times">7</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-end'></span></span><![endif]-->
			 <span style="font-family:Times">.</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-begin'></span>SEQ
figure<span style='mso-element:field-separator'></span></span><![endif]-->
			 <span style="font-family:Times">2</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-end'></span></span><![endif]-->
			 <span style="font-family:Helvetica-Narrow"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span></span>Local Variables on the Stack</p>
			<h2 style="margin-left:0in">Creating Local Variables Automatically</h2>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Procedures:local variables&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1238&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;LOCAL directive&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1239&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Directives:LOCAL&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1240&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Stacks:local variables on&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1241&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">MASM&#146;s <b style="mso-bidi-font-weight:normal">LOCAL</b> directive automates the process for creating local variables on the stack. <b style="mso-bidi-font-weight:normal">LOCAL</b> frees you from having to count stack words, and it makes your code easier to write and maintain. This section illustrates the advantages of creating temporary data with the <b style="mso-bidi-font-weight:normal">LOCAL</b> directive.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Procedures:local variables&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1242&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;LOCAL directive&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1243&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Directives:LOCAL&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1244&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Stacks:local variables on&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1245&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">To use the <b style="mso-bidi-font-weight:normal">LOCAL</b> directive, list the variables you want to create, giving a type for each one. The assembler calculates how much space is required on the stack. It also generates instructions to properly decrement SP (as described in the previous section) and to reset SP when you return from the procedure.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1454&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">When you create local variables this way, your source code can refer to each local variable by name rather than as an offset of the stack pointer. Moreover, the assembler generates debugging information for each local variable. If you have programmed before in a high-level language that allows scoping, local variables will seem familiar. For example, a C compiler sets up variables with automatic storage class in the same way as the <b style="mso-bidi-font-weight:normal">LOCAL</b> directive.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1455&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">We can simplify the procedure in the previous section with the following code:</p>
			<p class="Ex">task<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>PROC<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>NEAR<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>arg:WORD<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>LOCAL<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>loc:WORD<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>loc, 3<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Initialize local variable<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>add<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, loc<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>; Add local variable to AX<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>sub<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>arg, ax<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>; Subtract local from argument<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Use &quot;loc&quot; and &quot;arg&quot; in other operations<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>ret<br>
			task<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>ENDP<br style="mso-special-character:
line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Directives:LOCAL&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1246&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The <b style="mso-bidi-font-weight:normal">LOCAL</b> directive must be on the line immediately following the <b style="mso-bidi-font-weight:
normal">PROC</b> statement with the following syntax:</p>
			<p class="Syn"><b style="mso-bidi-font-weight:normal">LOCAL </b><i style="mso-bidi-font-style:normal">vardef</i><b style="mso-bidi-font-weight:
normal"> </b><span style="font-family:Times;letter-spacing:-1.5pt">[</span><span style="font-family:Times">[</span><b style="mso-bidi-font-weight:normal">, </b><i style="mso-bidi-font-style:normal">vardef</i><span style="font-family:Times;
letter-spacing:-1.5pt">]</span><span style="font-family:Times">]</span>...</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Procedures:local variables&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1247&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;LOCAL directive&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1248&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Directives:LOCAL&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1249&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Stacks:local variables on&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1250&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Each <i style="mso-bidi-font-style:normal">vardef</i> defines a local variable. A local variable definition has this form:</p>
			<p class="Syn"><i style="mso-bidi-font-style:normal">label</i><span style="font-family:Times;letter-spacing:-1.5pt">[[ </span>[<i style="mso-bidi-font-style:
normal">count</i><b style="mso-bidi-font-weight:normal">]</b><span style="font-family:Times;letter-spacing:-1.5pt">]</span><span style="font-family:
Times">]<span style="letter-spacing:-1.5pt">[</span>[</span><b style="mso-bidi-font-weight:normal">:</b><i style="mso-bidi-font-style:normal">qualifiedtype</i><span style="font-family:Times;letter-spacing:-1.5pt">]</span><span style="font-family:
Times">]</span></p>
			<p class="MsoNormal">These are the parameters in local variable definitions:</p>
			<table border="0" cellspacing="0" cellpadding="0" style="margin-left:.4pt;border-collapse:
 collapse;mso-padding-alt:0in 0in 0in 0in">
				<tr>
					<td width="74" valign="top" style="width:55.5pt;padding:0in 0in 0in 0in">
						<p class="Thf">Argument</p>
						<p class="Thf"></p>
					</td>
					<td width="390" valign="top" style="width:292.5pt;padding:0in 0in 0in 0in">
						<p class="Th">Description</p>
						<p class="Th"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="464" colspan="2" valign="top" style="width:348.0pt;padding:0in 0in 0in 0in">
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
							<p class="Tr"></p>
						</div>
					</td>
					<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
						<p class="Tr"></p>
					</div>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="74" valign="top" style="width:55.5pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><i style="mso-bidi-font-style:normal">label</i></p>
						<p class="Tpf"></p>
					</td>
					<td width="390" valign="top" style="width:292.5pt;padding:0in 0in 0in 0in">
						<p class="Tp">The name given to the local variable. You can use this name to access the variable.</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
				</tr>
				<tr>
					<td width="74" valign="top" style="width:55.5pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><i style="mso-bidi-font-style:normal">count</i></p>
						<p class="Tpf"></p>
					</td>
					<td width="390" valign="top" style="width:292.5pt;padding:0in 0in 0in 0in">
						<p class="Tp">The number of elements of this name and type to allocate on the stack. You can allocate a simple array on the stack with <i style="mso-bidi-font-style:
  normal">count</i>. The brackets around <i style="mso-bidi-font-style:normal">count</i> are required. If this field is omitted, one data object is assumed.</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="74" valign="top" style="width:55.5pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><i style="mso-bidi-font-style:normal">qualifiedtype</i></p>
						<p class="Tpf"></p>
					</td>
					<td width="390" valign="top" style="width:292.5pt;padding:0in 0in 0in 0in">
						<p class="Tp">A simple MASM type or a type defined with other types and attributes. For more information, see &#147;Data Types&#148; in Chapter 1.</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
			</table>
			<p class="Le"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1456&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">If the number of local variables exceeds one line, you can place a comma at the end of the first line and continue the list on the next line. Alternatively, you can use several consecutive <b style="mso-bidi-font-weight:
normal">LOCAL</b> directives.</p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1457&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The assembler does not initialize local variables. Your program must include code to perform any necessary initializations. For example, the following code fragment sets up a local array and initializes it to zero:</p>
			<p class="Ex">arraysz EQU<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>20<br>
			<br>
			aproc<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>PROC<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>USES di<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>LOCAL<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>var1[arraysz]:WORD, var2:WORD<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			; Initialize local array to zero<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>push<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>ss<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>pop<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>es<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Set ES=SS<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>lea<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>di, var1<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; ES:DI now points to array<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp; </span><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>mov<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>cx, arraysz<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>; Load count<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>sub<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, ax<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>rep<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>stosw<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Store zeros<br>
			; Use the array...<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>ret<br>
			aproc<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>ENDP<br style="mso-special-character:
line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Procedures:local variables&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1251&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Even though you can reference stack variables by name, the assembler treats them as offsets of BP, and they are not visible outside the procedure. In the following procedure, <span style='font-size:9.5pt;font-family:
"Lucida Sans Typewriter"'>array</span> is a local variable.</p>
			<p class="Ex">index<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>EQU<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>10<br>
			test<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>PROC<span style="mso-spacerun:
yes">&nbsp; </span>NEAR<br>
			LOCAL<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>array[index]:WORD<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp; </span><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>bx, index<br>
			;<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>array[bx], 5<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Not legal!<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1458&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The second <b style="mso-bidi-font-weight:normal">MOV</b> statement may appear to be legal, but since <span style='font-size:9.5pt;
font-family:"Lucida Sans Typewriter"'>array</span> is an<br>
			offset of BP, this statement is the same as</p>
			<p class="Ex">;<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov [bp + bx + arrayoffset], 5<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>; Not legal!<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1459&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">BP and BX can be added only to SI and DI. This example would be legal, however, if the index value were moved to SI or DI. This type of error in your program can be difficult to find unless you keep in mind that local variables in procedures are offsets of BP.</p>
			<h2 style="margin-left:0in">Declaring Procedure Prototypes</h2>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;Directives:PROC&quot; \z &quot;FLOWWW.DOC-1252&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;PROC directive&quot; \z
&quot;FLOWWW.DOC-1253&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE
&quot;Procedures:prototypes:writing&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1254&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Procedures:PROTO
directive&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1255&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Procedures:INVOKE
directive&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1256&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE
&quot;Prototypes:procedure:overview&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1257&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe Directives:EXTERNDEF \t &quot;See
EXTERNDEF directive&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1258&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;TYPEDEF directive:procedure
prototypes&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1259&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe Directives:INVOKE \t &quot;See INVOKE
directive&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1260&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe Directives:PROTO \t &quot;See PROTO
directive&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1261&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;EXTERNDEF directive:procedure
prototypes, declaring&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1262&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;TYPEDEF directive:procedure
declarations, for&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1263&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;INVOKE directive:procedures,
calling&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1264&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;PROTO directive:procedure
prototypes, defined with&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1265&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;EXTERN directive:procedure
prototypes, declaring&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1266&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">MASM provides the <b style="mso-bidi-font-weight:normal">INVOKE</b> directive to handle many of the details important to procedure calls, such as pushing parameters according to the correct calling conventions. To use <b style="mso-bidi-font-weight:normal">INVOKE</b>, the procedure called must have been declared previously with a <b style="mso-bidi-font-weight:normal">PROC</b> statement, an <b style="mso-bidi-font-weight:normal">EXTERNDEF</b> (or <b style="mso-bidi-font-weight:normal">EXTERN</b>) statement, or a <b style="mso-bidi-font-weight:normal">TYPEDEF</b>. You can also place a prototype defined with <b style="mso-bidi-font-weight:normal">PROTO</b> before the <b style="mso-bidi-font-weight:normal">INVOKE</b> if the procedure type does not appear before the <b style="mso-bidi-font-weight:normal">INVOKE</b>. Procedure prototypes defined with <b style="mso-bidi-font-weight:normal">PROTO</b> inform the assembler of types and numbers of arguments so the assembler can check for errors and provide automatic conversions when <b style="mso-bidi-font-weight:
normal">INVOKE</b> calls the procedure.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Procedures:PROTO directive&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1267&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE
&quot;Procedures:prototypes:writing&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1268&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Declaring procedure prototypes is good programming practice, but is optional. Prototypes in MASM perform the same function as prototypes in C and other high-level languages. A procedure prototype includes the procedure name, the types, and (optionally) the names of all parameters the procedure expects. Prototypes usually are placed at the beginning of an assembly program or in a separate include file so the assembler encounters the prototype before the actual procedure.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1460&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Prototypes enable the assembler to check for unmatched parameters and are especially useful for procedures called from other modules and other languages. If you write routines for a library, you may want to put prototypes into an include file for all the procedures used in that library. For more information about using include files, see Chapter 8, &#147;Sharing Data and Procedures among Modules and Libraries.&#148;</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1461&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The <b style="mso-bidi-font-weight:normal">PROTO</b> directive provides one way to define a procedure prototype. The syntax for a prototype definition is the same as for a procedure declaration (see &#147;Declaring Parameters with the PROC Directive,&#148; earlier in this chapter), except that you do not include the list of registers, <i style="mso-bidi-font-style:normal">prologuearg</i> list, or the scope of the procedure.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;LANGUAGE argument, OPTION directive&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1269&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Also, the <b style="mso-bidi-font-weight:normal">PROTO</b> keyword precedes the <i style="mso-bidi-font-style:normal">langtype</i> and <i style="mso-bidi-font-style:normal">distance</i> attributes. The attributes (like <b style="mso-bidi-font-weight:normal">C</b> and <b style="mso-bidi-font-weight:
normal">FAR</b>) are optional. However, if they are not specified, the defaults are based on any <b style="mso-bidi-font-weight:normal">.MODEL</b> or <b style="mso-bidi-font-weight:normal">OPTION LANGUAGE</b> statement. The names of the parameters are also optional, but you must list parameter types. A label preceding <b style="mso-bidi-font-weight:normal">:VARARG</b> is also optional in the prototype but not in the <b style="mso-bidi-font-weight:normal">PROC</b> statement.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Prototypes:procedure:directives for&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1270&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;OPTION directive:LANGUAGE&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1271&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Directives:PROC&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1272&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe Directives:PROTO \t &quot;See PROTO
directive&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1273&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;PROC directive&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1274&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;PROTO directive:procedure
prototypes, defined with&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1275&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">If a <b style="mso-bidi-font-weight:normal">PROTO</b> and a <b style="mso-bidi-font-weight:normal">PROC</b> for the same function appear in the same module, they must match in attribute, number of parameters, and parameter types. The easiest way to create prototypes with <b style="mso-bidi-font-weight:
normal">PROTO</b> is to write your procedure and then copy the first line (the line that contains the <b style="mso-bidi-font-weight:normal">PROC</b> keyword) to a location in your program that follows the data declarations. Change <b style="mso-bidi-font-weight:normal">PROC</b> to <b style="mso-bidi-font-weight:
normal">PROTO</b> and remove the <b style="mso-bidi-font-weight:normal">USES</b> <i style="mso-bidi-font-style:normal">reglist</i>, the <i style="mso-bidi-font-style:
normal">prologuearg</i> field, and the <i style="mso-bidi-font-style:normal">visibility</i> field. It is important that the prototype follow the declarations for any types used in it to avoid any forward references used by the parameters in the prototype.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1462&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The following example illustrates how to define and then declare two typical procedures. In both prototype and declaration, the comma before the argument list is optional only when the list does not appear on a separate line:</p>
			<p class="Ex">; Procedure prototypes.<br>
			<br>
			addup<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>PROTO NEAR C argcount:WORD, arg2:WORD, arg3:WORD<br>
			myproc<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>PROTO FAR C, argcount:WORD, arg2:VARARG<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="Ex">; Procedure declarations<br>
			<br>
			addup<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>PROC NEAR C, argcount:WORD, arg2:WORD, arg3:WORD<br>
			.<br>
			.<br>
			.<br>
			myproc<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>PROC FAR C PUBLIC &lt;callcount&gt; USES di si,<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>argcount:WORD,<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>arg2:VARARG<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
Directives:INVOKE \t &quot;See INVOKE directive&quot;<span style='mso-hide:
none'> \z &quot;FLOWWW.DOC-1276&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;INVOKE directive:type
conversions&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1277&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">When you call a procedure with <b style="mso-bidi-font-weight:
normal">INVOKE</b>, the assembler checks the arguments given by <b style="mso-bidi-font-weight:normal">INVOKE</b> against the parameters expected by the procedure. If the data types of the arguments do not match, MASM reports an error or converts the type to the expected type. These conversions are explained in the next section.</p>
			<h2 style="margin-left:0in">Calling Procedures with INVOKE</h2>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Procedures:INVOKE directive&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1278&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;INVOKE directive:actions&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1279&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal"><b style="mso-bidi-font-weight:normal">INVOKE</b> generates a sequence of instructions that push arguments and call a procedure. This helps maintain code if arguments or <i style="mso-bidi-font-style:normal">langtype</i> for a procedure are changed. <b style="mso-bidi-font-weight:normal">INVOKE</b> generates procedure calls and automatically:</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1463&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>Converts arguments to the expected types.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1464&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>Pushes arguments on the stack in the correct order.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1465&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>Cleans the stack when the procedure returns.</p>
			<p class="Le"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1466&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">If arguments do not match in number or if the type is not one the assembler can convert, an error results.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Procedures:parameters:variable numbers of&quot;<span style='mso-hide:
none'> \z &quot;FLOWWW.DOC-1280&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Procedures:VARARG keyword&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1281&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;VARARG keyword:procedures, used
with&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1282&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">If the procedure uses <b style="mso-bidi-font-weight:normal">VARARG</b>, <b style="mso-bidi-font-weight:normal">INVOKE</b> can pass a number of arguments different from the number in the parameter list without generating an error or warning. Any additional arguments must be at the end of the <b style="mso-bidi-font-weight:normal">INVOKE</b> argument list. All other arguments must match those in the prototype parameter list.</p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1467&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The syntax for <b style="mso-bidi-font-weight:normal">INVOKE</b> is:</p>
			<p class="Syn"><b style="mso-bidi-font-weight:normal">INVOKE</b><span style="mso-spacerun: yes">&nbsp; </span><i style="mso-bidi-font-style:normal">expression</i><span style="mso-spacerun: yes">&nbsp; </span><span style="font-family:Times;letter-spacing:
-1.5pt">[</span><span style="font-family:Times">[</span><b style="mso-bidi-font-weight:
normal">,</b> <i style="mso-bidi-font-style:normal">arguments</i><span style="font-family:Times;letter-spacing:-1.5pt">]</span><span style="font-family:
Times">]</span></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1468&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">where <i style="mso-bidi-font-style:normal">expression</i> can be the procedure&#146;s label or an indirect reference to a procedure, and <i style="mso-bidi-font-style:normal">arguments</i> can be an expression, a register pair, or an expression preceded with <b style="mso-bidi-font-weight:normal">ADDR</b>. (The <b style="mso-bidi-font-weight:normal">ADDR</b> operator is discussed later in this chapter.)</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1469&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Procedures with these prototypes</p>
			<p class="Ex">addup<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>PROTO NEAR C argcount:WORD, arg2:WORD, arg3:WORD<br>
			myproc<span style="mso-spacerun: yes">&nbsp; </span>PROTO FAR C, argcount:WORD, arg2:VARARG<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1470&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">and these procedure declarations</p>
			<p class="Ex">addup<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>PROC NEAR C, argcount:WORD, arg2:WORD, arg3:WORD<br>
			.<br>
			.<br>
			.<br>
			myproc<span style="mso-spacerun: yes">&nbsp; </span>PROC FAR C PUBLIC &lt;callcount&gt; USES di si,<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>argcount:WORD,<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>arg2:VARARG<br style="mso-special-character:
line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1471&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">can be called with <b style="mso-bidi-font-weight:normal">INVOKE</b> statements like this:</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>INVOKE<span style="mso-spacerun: yes">&nbsp; </span>addup,<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>ax, x,<span style="mso-spacerun: yes">&nbsp; </span>y<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>INVOKE<span style="mso-spacerun:
yes">&nbsp; </span>myproc,<span style="mso-spacerun: yes">&nbsp; </span>bx, cx, 100, 10<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Procedures:arguments:type conversions&quot;<span style='mso-hide:none'>
\z &quot;FLOWWW.DOC-1283&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;INVOKE directive:type
conversions&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1284&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe Directives:INVOKE \t &quot;See INVOKE
directive&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1285&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The assembler can convert some arguments and parameter type combinations so that the correct type can be passed. The signed or unsigned qualities of the arguments in the <b style="mso-bidi-font-weight:normal">INVOKE</b> statements determine how the assembler converts them to the types expected by the procedure.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1472&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>addup</span> procedure, for example, expects parameters of type <b style="mso-bidi-font-weight:
normal">WORD</b>, but the arguments passed by <b style="mso-bidi-font-weight:
normal">INVOKE</b> to the <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>addup</span> procedure can be any of these types:</p>
			<p class="index"><!--[if supportFields]><b style='mso-bidi-font-weight:normal'><span
style='mso-element:field-begin'></span>xe &quot;aa&quot; \z
&quot;FLOWWW.DOC-1473&quot;</b><![endif]-->
			<!--[if supportFields]><b
style='mso-bidi-font-weight:normal'><span style='mso-element:field-end'></span></b><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><b style='mso-bidi-font-weight:normal'><span
style='mso-element:field-begin'></span>SYMBOL 117 \f &quot;MSIcons&quot; \s 9.5
\h </b><![endif]-->
			<!--[if supportFields]><b style='mso-bidi-font-weight:normal'><span
style='mso-element:field-end'></span></b><![endif]-->
			<b style="mso-bidi-font-weight:
normal"><span style="mso-tab-count:1">&nbsp; </span>BYTE</b>, <b style="mso-bidi-font-weight:
normal">SBYTE</b>, <b style="mso-bidi-font-weight:normal">WORD</b>, or <b style="mso-bidi-font-weight:normal">SWORD</b></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1474&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>An expression whose type is specified with the <b style="mso-bidi-font-weight:
normal">PTR</b> operator to be one of those types</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1475&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>An 8-bit or 16-bit register</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1476&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>An immediate expression in the range &#150;32K to +64K</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1477&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>A <b style="mso-bidi-font-weight:normal">NEAR PTR</b></p>
			<p class="Le"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1478&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">If the type is smaller than that expected by the procedure, MASM widens the argument to match.</p>
			<h3>Widening Arguments</h3>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;INVOKE directive:arguments, widening&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1286&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Procedures:arguments:type
conversions&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1287&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Procedures:INVOKE
directive&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1288&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">For <b style="mso-bidi-font-weight:normal">INVOKE</b> to correctly handle type conversions, you must use the signed data types for any signed assignments. MASM widens an argument to match the type expected by a procedure&#146;s parameters in these cases:</p>
			<table border="0" cellspacing="0" cellpadding="0" style="margin-left:.4pt;border-collapse:
 collapse;mso-padding-alt:0in 0in 0in 0in">
				<tr>
					<td width="139" valign="top" style="width:1.45in;padding:0in 0in 0in 0in">
						<p class="Thf">Type Passed</p>
						<p class="Thf"></p>
					</td>
					<td width="325" valign="top" style="width:243.6pt;padding:0in 0in 0in 0in">
						<p class="Th">Type Expected</p>
						<p class="Th"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="464" colspan="2" valign="top" style="width:348.0pt;padding:0in 0in 0in 0in">
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
							<p class="Tr"></p>
						</div>
					</td>
					<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
						<p class="Tr"></p>
					</div>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="139" valign="top" style="width:1.45in;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">BYTE</span></b><span style="font-size:9.0pt">, <b style="mso-bidi-font-weight:
  normal">SBYTE</b></span></p>
						<p class="Tpf"></p>
					</td>
					<td width="325" valign="top" style="width:243.6pt;padding:0in 0in 0in 0in">
						<p class="Tp"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">WORD</span></b>, <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">SWORD</span></b>, <b style="mso-bidi-font-weight:
  normal"><span style="font-size:9.0pt">DWORD</span></b>, <b style="mso-bidi-font-weight:
  normal"><span style="font-size:9.0pt">SDWORD</span></b></p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
				</tr>
				<tr>
					<td width="139" valign="top" style="width:1.45in;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">WORD</span></b>, <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">SWORD</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="325" valign="top" style="width:243.6pt;padding:0in 0in 0in 0in">
						<p class="Tp"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">DWORD</span></b>, <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">SDWORD</span></b></p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
			</table>
			<p class="Le"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1479&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The assembler can extend a segment if far data is expected, and it can convert the type given in the list to the types expected. If the assembler cannot convert the type, however, it generates an error.</p>
			<h3>Detecting Errors</h3>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1480&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">If the assembler needs to widen an argument, it first copies the value to AL or AX. It widens an unsigned value by placing a zero in the higher register area, and widens a signed value with a <b style="mso-bidi-font-weight:
normal">CBW</b>, <b style="mso-bidi-font-weight:normal">CWD</b>, or <b style="mso-bidi-font-weight:normal">CWDE</b> instruction as required. Similarly, the assembler copies a constant argument value into AL or AX when the <b style="mso-bidi-font-weight:normal">.8086</b> directive is in effect. You can see these generated instructions in the listing file when you include the /Sg command-line option.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
Directives:INVOKE \t &quot;See INVOKE directive&quot;<span style='mso-hide:
none'> \z &quot;FLOWWW.DOC-1289&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;INVOKE directive:error
detection&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1290&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Using the accumulator register to widen or copy an argument may lead to an error if you attempt to pass AX as another argument. For example, consider the following <b style="mso-bidi-font-weight:normal">INVOKE</b> statement for a procedure with the C calling convention</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>INVOKE<span style="mso-spacerun: yes">&nbsp; </span>myprocA, ax, cx, 100, arg<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1481&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">where <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>arg</span> is a <b style="mso-bidi-font-weight:normal">BYTE</b> variable and <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>myproc</span> expects four arguments of type <b style="mso-bidi-font-weight:normal">WORD</b>. The assembler widens and then pushes <span style='font-size:9.5pt;font-family:
"Lucida Sans Typewriter"'>arg</span> like this:</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>al, DGROUP:arg<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>xor<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ah, ah<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>push<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>ax<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1482&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The generated code thus overwrites the last argument (AX) passed to the procedure. The assembler generates an error in this case, requiring you to rewrite the <b style="mso-bidi-font-weight:normal">INVOKE</b> statement.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Arguments:errors&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1291&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Errors:argument passing&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1292&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">To summarize, the <b style="mso-bidi-font-weight:normal">INVOKE</b> directive overwrites AX and perhaps DX when widening arguments. It also uses AX to push constants on the 8088 and 8086. If you use these registers (or EAX and EDX on an 80386/486) to pass arguments, they may be overwritten. The assembler&#146;s error detection prevents this from ever becoming a run-time bug, but AX and DX should remain your last choice for holding arguments.</p>
			<h3>Invoking Far Addresses</h3>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
Directives:INVOKE \t &quot;See INVOKE directive&quot;<span style='mso-hide:
none'> \z &quot;FLOWWW.DOC-1293&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;INVOKE directive:far addresses,
invoking&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1294&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;\\:\\: (double colon)&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1295&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Procedures:INVOKE
directive&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1296&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Procedures:arguments:far
pointers&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1297&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Double colon (\\:\\:)&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1298&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">You can pass a <b style="mso-bidi-font-weight:normal">FAR</b> pointer in a <i style="mso-bidi-font-style:normal">segment</i><b style="mso-bidi-font-weight:normal">::</b><i style="mso-bidi-font-style:normal">offset</i> pair, as shown in the following. Note the use of double colons to separate the register pair. The registers could be any other register pair, including a pair that an MS-DOS call uses to return values.</p>
			<p class="Ex">FPWORD<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>TYPEDEF FAR PTR WORD<br>
			SomeProc PROTO var1:DWORD, var2:WORD, var3:WORD<br>
			<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>pfaritem<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>FPWORD<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>faritem<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>les<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>bx, pfaritem<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>INVOKE<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>SomeProc, ES::BX, arg1, arg2<br style="mso-special-character:
line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1483&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">However, <b style="mso-bidi-font-weight:normal">INVOKE</b> cannot combine into a single address one argument for the segment and one for the offset.</p>
			<h3>Passing an Address</h3>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Operators:ADDR&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1299&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;ADDR operator&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1300&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;INVOKE directive:ADDR,
invoking&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1301&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Procedures:arguments:near
addresses&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1302&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">You can use the <b style="mso-bidi-font-weight:normal">ADDR</b> operator to pass the address of an expression to a procedure that expects a <b style="mso-bidi-font-weight:normal">NEAR</b> or <b style="mso-bidi-font-weight:
normal">FAR</b> pointer. This example generates code to pass a far pointer (to <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>arg1</span>) to the procedure <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>proc1</span>.</p>
			<p class="Ex">PBYTE<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>TYPEDEF FAR PTR BYTE<br>
			arg1<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>BYTE<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>&quot;This is a string&quot;<br>
			proc1<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>PROTO<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>NEAR C fparg:PBYTE<br>
			<span style="mso-spacerun: yes">&nbsp;</span><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			INVOKE<span style="mso-spacerun: yes">&nbsp; </span>proc1, ADDR arg1<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1484&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">For information on defining pointers with <b style="mso-bidi-font-weight:normal">TYPEDEF,</b> see &#147;Defining Pointer Types with TYPEDEF&#148; in Chapter 3.</p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<h3>Invoking Procedures Indirectly</h3>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
Directives:INVOKE \t &quot;See INVOKE directive&quot;<span style='mso-hide:
none'> \z &quot;FLOWWW.DOC-1303&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;INVOKE directive:indirect
procedure calls&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1304&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Procedures:calls:indirect&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1305&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">You can make an indirect procedure call such as <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>call [bx + si]</span> by using a pointer to a function prototype with <b style="mso-bidi-font-weight:
normal">TYPEDEF</b>, as shown in this example:</p>
			<p class="Ex">FUNCPROTO<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>TYPEDEF PROTO NEAR ARG1:WORD<br>
			FUNCPTR<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>TYPEDEF PTR FUNCPROTO<br>
			<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.DATA<br>
			pfunc<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>FUNCPTR OFFSET proc1, OFFSET proc2<br>
			<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.CODE<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>bx, OFFSET pfunc<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; BX points to table<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>si, Num<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Num contains 0 or 2<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>INVOKE<span style="mso-spacerun:
yes">&nbsp; </span>FUNCPTR PTR [bx+si], arg1 ; Call proc1 if Num=0<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>or proc2 if Num=2<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1485&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">You can also use <b style="mso-bidi-font-weight:normal">ASSUME</b> to accomplish the same task. The following <b style="mso-bidi-font-weight:normal">ASSUME</b> statement associates the type <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>FUNCPTR</span> with the BX register.</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>ASSUME<span style="mso-spacerun: yes">&nbsp; </span>BX:FUNCPTR<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>bx, OFFSET pfunc<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>si, Num<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>INVOKE<span style="mso-spacerun:
yes">&nbsp; </span>[bx+si], arg1<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<h3>Checking the Code Generated</h3>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;INVOKE directive:generated code, checking&quot;<span style='mso-hide:
none'> \z &quot;FLOWWW.DOC-1306&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Code generated by the <b style="mso-bidi-font-weight:normal">INVOKE</b> directive may vary depending on the processor mode and calling conventions in effect. You can check your listing files to see the code generated by the <b style="mso-bidi-font-weight:normal">INVOKE</b> directive if you use the /Sg command-line<br>
			option.</p>
			<h2 style="margin-left:0in">Generating Prologue and Epilogue Code</h2>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Prologue code:defined&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1307&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Epilogue code:defined&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1308&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">When you use the <b style="mso-bidi-font-weight:normal">PROC</b> directive with its extended syntax and argument list, the assembler automatically generates the prologue and epilogue code in your procedure. &#147;Prologue code&#148; is generated at the start of the procedure. It sets up a stack pointer so you can access parameters from within the procedure. It also saves space on the stack for local variables, initializes registers such as DS, and pushes registers that the procedure uses. Similarly, &#147;epilogue code&#148; is the code at the end of the procedure that pops registers and returns from the procedure.</p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1486&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The assembler automatically generates the prologue code when it encounters the first instruction or label after the <b style="mso-bidi-font-weight:
normal">PROC</b> directive. This means you cannot label the prologue for the purpose of jumping to it. The assembler generates the epilogue code when it encounters a <b style="mso-bidi-font-weight:normal">RET</b> or <b style="mso-bidi-font-weight:normal">IRET</b> instruction. Using the assembler-generated prologue and epilogue code saves time and decreases the number of repetitive lines of code in your procedures.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1487&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The generated prologue or epilogue code depends on the:</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1488&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>Local variables defined.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1489&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>Arguments passed to the procedure.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1490&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>Current processor selected (affects epilogue code only).</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1491&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>Current calling convention.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1492&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>Options passed in the <i style="mso-bidi-font-style:normal">prologuearg</i> of the <b style="mso-bidi-font-weight:normal">PROC</b> directive.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1493&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>Registers being saved.</p>
			<p class="Le"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1494&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The <i style="mso-bidi-font-style:normal">prologuearg</i> list contains options specifying how to generate the prologue or epilogue code. The next section explains how to use these options, gives the standard prologue and epilogue code, and explains the techniques for defining your own prologue and epilogue code.</p>
			<h3>Using Automatic Prologue and Epilogue Code</h3>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Prologue code:standard&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1309&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Epilogue code:standard&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1310&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The standard prologue and epilogue code handles parameters and local variables. If a procedure does not have any parameters or local variables, the prologue and epilogue code that sets up and restores a stack pointer is omitted, unless<br>
			<b style="mso-bidi-font-weight:normal">FORCEFRAME</b> is included in the <i style="mso-bidi-font-style:normal">prologuearg</i> list. (<b style="mso-bidi-font-weight:
normal">FORCEFRAME</b> is discussed later in this section.) Prologue and epilogue code also generates a push and pop for each register in the register list.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1495&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The prologue code consists of three steps:</p>
			<p class="Ln1" style="margin-left:22.0pt"><span style="mso-tab-count:1"></span>1.<span style="mso-tab-count:1">&nbsp; </span>Point BP to top of stack.</p>
			<p class="Ln1" style="margin-left:22.0pt"><span style="mso-tab-count:1"></span>2.<span style="mso-tab-count:1">&nbsp; </span>Make space on stack for local variables.</p>
			<p class="Ln1" style="margin-left:22.0pt"><span style="mso-tab-count:1"></span>3.<span style="mso-tab-count:1">&nbsp; </span>Save registers the procedure must preserve.</p>
			<p class="Le"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1496&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The epilogue cancels these three steps in reverse order, then cleans the stack, if necessary, with a <b style="mso-bidi-font-weight:
normal">RET</b> <i style="mso-bidi-font-style:normal">num</i> instruction. For example, the procedure declaration</p>
			<p class="Ex">myproc<span style="mso-spacerun: yes">&nbsp; </span>PROC NEAR PASCAL USES di si,<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>arg1:WORD, arg2:WORD, arg3:WORD<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>LOCAL local1:WORD, local2:WORD<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1497&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">generates the following prologue code:</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>push<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>bp<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Step 1:<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>bp, sp<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>point BP to stack top<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>sub<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>sp, 4<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Step 2: space for 2 local words<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>push<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>di<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Step 3:<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>push<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>si<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>save registers listed in USES<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1498&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The corresponding epilogue code looks like this:</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>pop<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>si<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Undo Step 3<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>pop<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>di<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>sp, bp<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Undo Step 2<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>pop<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>bp<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Undo Step 1<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>ret<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>6<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Clean stack of pushed arguments<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1499&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Notice the <b style="mso-bidi-font-weight:normal">RET 6</b> instruction cleans the stack of the three word-sized arguments. The instruction appears in the epilogue because the procedure does not use the C calling convention. If <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>myproc</span> used C conventions, the epilogue would end with a <b style="mso-bidi-font-weight:
normal">RET</b> instruction without an operand.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;RET instruction:epilogue code, generating&quot;<span style='mso-hide:
none'> \z &quot;FLOWWW.DOC-1311&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Stack frame&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1312&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The assembler generates standard epilogue code when it encounters a <b style="mso-bidi-font-weight:normal">RET</b> instruction without an operand. It does not generate an epilogue if <b style="mso-bidi-font-weight:
normal">RET</b> has a nonzero operand. To suppress generation of a standard epilogue, use <b style="mso-bidi-font-weight:normal">RETN</b> or <b style="mso-bidi-font-weight:normal">RETF</b> with or without an operand, or use <b style="mso-bidi-font-weight:normal">RET 0</b>.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;LOADDS operand&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1313&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;FORCEFRAME operand&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1314&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The standard prologue and epilogue code recognizes two operands passed in the <i style="mso-bidi-font-style:normal">prologuearg</i> list, <b style="mso-bidi-font-weight:normal">LOADDS</b> and <b style="mso-bidi-font-weight:normal">FORCEFRAME</b>. These operands modify the prologue code. Specifying <b style="mso-bidi-font-weight:normal">LOADDS</b> saves and initializes DS. Specifying<br>
			<b style="mso-bidi-font-weight:normal">FORCEFRAME</b> as an argument generates a stack frame even if no arguments are sent to the procedure and no local variables are declared. If your procedure has any parameters or locals, you do not need to specify <b style="mso-bidi-font-weight:normal">FORCEFRAME</b>.</p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;LOADDS operand&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1315&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">For example, adding <b style="mso-bidi-font-weight:normal">LOADDS</b> to the argument list for <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>myproc</span> creates this prologue:</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>push<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>bp<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Step 1:<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>bp, sp<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>point BP to stack top<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>sub<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>sp, 4<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Step 2: space for 2 locals<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>push<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>ds<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Save DS and point it<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, DGROUP<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>to DGROUP, as<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ds, ax<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>instructed by LOADDS<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>push<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>di<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Step 3:<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>push<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>si<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>save registers listed in USES<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1500&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The epilogue code restores DS:</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>pop<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>si<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Undo Step 3<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>pop<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>di<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>pop<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ds<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Restore DS<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>sp, bp<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Undo Step 2<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>pop<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>bp<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Undo Step 1<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>ret<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>6<span style="mso-spacerun: yes">&nbsp;&nbsp; </span><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>; Clean stack of pushed arguments<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<h3>User-Defined Prologue and Epilogue Code</h3>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Prologue code:user-defined&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1316&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Epilogue
code:user-defined&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1317&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;FORCEFRAME operand&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1318&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE
&quot;Macros:functions:prologues&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1319&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">If you want a different set of instructions for prologue and epilogue code in your procedures, you can write macros that run in place of the standard prologue and epilogue code. For example, while you are debugging your procedures, you may want to include a stack check or track the number of times a procedure is called. You can write your own prologue code to do these things whenever a procedure executes. Different prologue code may also be necessary if you are writing applications for Windows. User-defined prologue macros will respond correctly if you specify <b style="mso-bidi-font-weight:normal">FORCEFRAME</b> in the <i style="mso-bidi-font-style:normal">prologuearg</i> of a procedure.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;EPILOGUE argument, OPTION directive&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1320&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;PROLOGUE argument, OPTION
directive&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1321&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">To write your own prologue or epilogue code, the <b style="mso-bidi-font-weight:normal">OPTION</b> directive must appear in your program. It disables automatic prologue and epilogue code generation. When you specify</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;OPTION directive:PROLOGUE&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1322&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<b style="mso-bidi-font-weight:
normal"><o:p></o:p></b></p>
			<p class="Syn"><b style="mso-bidi-font-weight:normal">OPTION PROLOGUE</b> : <i style="mso-bidi-font-style:normal">macroname</i></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;OPTION directive:EPILOGUE&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1323&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<b style="mso-bidi-font-weight:
normal"><o:p></o:p></b></p>
			<p class="Syn"><b style="mso-bidi-font-weight:normal">OPTION EPILOGUE</b> : <i style="mso-bidi-font-style:normal">macroname</i></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Macros:functions:epilogues&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1324&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Prologue code:macros for&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1325&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Epilogue code:macros&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1326&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">the assembler calls the macro specified in the <b style="mso-bidi-font-weight:normal">OPTION</b> directive instead of generating the standard prologue and epilogue code. The prologue macro must be a macro function, and the epilogue macro must be a macro procedure.</p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1501&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The assembler expects your prologue or epilogue macro to have this form:</p>
			<p class="Syn" style="tab-stops:right 153.0pt left 161.0pt 168.0pt 175.0pt 182.0pt 189.0pt 196.0pt 203.0pt 210.0pt 217.0pt 224.0pt 231.0pt 238.0pt 245.0pt 3.5in 259.0pt 266.0pt 273.0pt 280.0pt 287.0pt 294.0pt 301.0pt 308.0pt 315.0pt 322.0pt 329.0pt 336.0pt 343.0pt"><i style="mso-bidi-font-style:normal"><span style="mso-tab-count:1">&nbsp; </span>macroname</i><span style="mso-spacerun: yes">&nbsp; </span><b style="mso-bidi-font-weight:normal">MACRO</b> <i style="mso-bidi-font-style:normal">procname</i>, \<br>
			<span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i style="mso-bidi-font-style:normal">flag</i>, \<br>
			<span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i style="mso-bidi-font-style:normal">parmbytes</i>, \<br>
			<span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i style="mso-bidi-font-style:normal">localbytes</i>, \<br>
			<span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&lt;<i style="mso-bidi-font-style:normal">reglist</i>&gt;, \<br>
			<span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i style="mso-bidi-font-style:normal">userparms</i></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Prologue code:macros for&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1327&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Epilogue code:macros&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1328&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Your macro must have formal parameters to match all the actual arguments passed. The arguments passed to your macro include:</p>
			<table border="0" cellspacing="0" cellpadding="0" style="margin-left:.4pt;border-collapse:
 collapse;mso-padding-alt:0in 0in 0in 0in">
				<tr>
					<td width="76" valign="top" style="width:57.0pt;padding:0in 0in 0in 0in">
						<p class="Thf">Argument</p>
						<p class="Thf"></p>
					</td>
					<td width="388" colspan="2" valign="top" style="width:291.0pt;padding:0in 0in 0in 0in">
						<p class="Th">Description</p>
						<p class="Th"></p>
					</td>
					<p class="Th"></p>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="464" colspan="3" valign="top" style="width:348.0pt;padding:0in 0in 0in 0in">
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
							<p class="Tr"></p>
						</div>
					</td>
					<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
						<p class="Tr"></p>
						<p class="Tr"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
					</div>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="76" valign="top" style="width:57.0pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><i style="mso-bidi-font-style:normal">procname</i></p>
						<p class="Tpf"></p>
					</td>
					<td width="388" colspan="2" valign="top" style="width:291.0pt;padding:0in 0in 0in 0in">
						<p class="Tp">The name of the procedure.</p>
						<p class="Tp"></p>
					</td>
					<p class="Tp"></p>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
				</tr>
				<tr>
					<td width="76" valign="top" style="width:57.0pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><i style="mso-bidi-font-style:normal">flag</i></p>
						<p class="Tpf"></p>
					</td>
					<td width="388" colspan="2" valign="top" style="width:291.0pt;padding:0in 0in 0in 0in">
						<p class="Tp">A 16-bit flag containing the following information:</p>
						<p class="Tp"></p>
					</td>
					<p class="Tp"></p>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="76" valign="top" style="width:57.0pt;padding:0in 0in 0in 0in">
						<p class="Tpf"></p>
						<p class="Tpf"></p>
					</td>
					<td width="91" valign="top" style="width:68.25pt;padding:0in 0in 0in 0in">
						<p class="Th">Bit = Value</p>
						<p class="Th"></p>
					</td>
					<td width="297" valign="top" style="width:222.75pt;padding:0in 0in 0in 0in">
						<p class="Th">Description</p>
						<p class="Th"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="76" valign="top" style="width:57.0pt;padding:0in 0in 0in 0in">
						<p class="Tpf"></p>
						<p class="Tpf"></p>
					</td>
					<td width="91" valign="top" style="width:68.25pt;padding:0in 0in 0in 0in">
						<p class="Tp">Bit 0, 1, 2</p>
						<p class="Tp"></p>
					</td>
					<td width="297" valign="top" style="width:222.75pt;padding:0in 0in 0in 0in">
						<p class="Tp">For calling conventions (000=unspecified language type, 001=<b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">C</span></b>, 010=<b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">SYSCALL</span></b>, 011=<b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">STDCALL</span></b>, 100=<b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">PASCAL</span></b>, 101=<b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">FORTRAN</span></b>, 110=<b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">BASIC</span></b>).</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
				</tr>
				<tr>
					<td width="76" valign="top" style="width:57.0pt;padding:0in 0in 0in 0in">
						<p class="Tpf"></p>
						<p class="Tpf"></p>
					</td>
					<td width="91" valign="top" style="width:68.25pt;padding:0in 0in 0in 0in">
						<p class="Tp">Bit 3</p>
						<p class="Tp"></p>
					</td>
					<td width="297" valign="top" style="width:222.75pt;padding:0in 0in 0in 0in">
						<p class="Tp">Undefined (not necessarily zero).</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="76" valign="top" style="width:57.0pt;padding:0in 0in 0in 0in">
						<p class="Tpf"></p>
						<p class="Tpf"></p>
					</td>
					<td width="91" valign="top" style="width:68.25pt;padding:0in 0in 0in 0in">
						<p class="Tp">Bit 4</p>
						<p class="Tp"></p>
					</td>
					<td width="297" valign="top" style="width:222.75pt;padding:0in 0in 0in 0in">
						<p class="Tp">Set if the caller restores the stack<br>
						(use <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">RET</span></b>, not <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">RET</span></b><i style="mso-bidi-font-style:normal">n</i>).</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="76" valign="top" style="width:57.0pt;padding:0in 0in 0in 0in">
						<p class="Tpf"></p>
						<p class="Tpf"></p>
					</td>
					<td width="91" valign="top" style="width:68.25pt;padding:0in 0in 0in 0in">
						<p class="Tp">Bit 5</p>
						<p class="Tp"></p>
					</td>
					<td width="297" valign="top" style="width:222.75pt;padding:0in 0in 0in 0in">
						<p class="Tp">Set if procedure is <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">FAR</span></b>.</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="76" valign="top" style="width:57.0pt;padding:0in 0in 0in 0in">
						<p class="Tpf"></p>
						<p class="Tpf"></p>
					</td>
					<td width="91" valign="top" style="width:68.25pt;padding:0in 0in 0in 0in">
						<p class="Tp">Bit 6</p>
						<p class="Tp"></p>
					</td>
					<td width="297" valign="top" style="width:222.75pt;padding:0in 0in 0in 0in">
						<p class="Tp">Set if procedure is <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">PRIVATE</span></b>.</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="76" valign="top" style="width:57.0pt;padding:0in 0in 0in 0in">
						<p class="Tpf"></p>
						<p class="Tpf"></p>
					</td>
					<td width="91" valign="top" style="width:68.25pt;padding:0in 0in 0in 0in">
						<p class="Tp">Bit 7</p>
						<p class="Tp"></p>
					</td>
					<td width="297" valign="top" style="width:222.75pt;padding:0in 0in 0in 0in">
						<p class="Tp">Set if procedure is <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">EXPORT</span></b>.</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="76" valign="top" style="width:57.0pt;padding:0in 0in 0in 0in">
						<p class="Tpf"></p>
						<p class="Tpf"></p>
					</td>
					<td width="91" valign="top" style="width:68.25pt;padding:0in 0in 0in 0in">
						<p class="Tp">Bit 8</p>
						<p class="Tp"></p>
					</td>
					<td width="297" valign="top" style="width:222.75pt;padding:0in 0in 0in 0in">
						<p class="Tp">Set if the epilogue is generated as a result of an <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">IRET</span></b> instruction and cleared if the epilogue is generated as a result of a <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">RET</span></b> instruction.</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="76" valign="top" style="width:57.0pt;padding:0in 0in 0in 0in">
						<p class="Tpf"></p>
						<p class="Tpf"></p>
					</td>
					<td width="91" valign="top" style="width:68.25pt;padding:0in 0in 0in 0in">
						<p class="Tp">Bits 9&#150;15</p>
						<p class="Tp"></p>
					</td>
					<td width="297" valign="top" style="width:222.75pt;padding:0in 0in 0in 0in">
						<p class="Tp">Undefined (not necessarily zero).</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="76" valign="top" style="width:57.0pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><i style="mso-bidi-font-style:normal">parmbytes</i></p>
						<p class="Tpf"></p>
					</td>
					<td width="388" colspan="2" valign="top" style="width:291.0pt;padding:0in 0in 0in 0in">
						<p class="Tp">The accumulated count in bytes of all parameters given in the <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">PROC</span></b> statement.</p>
						<p class="Tp"></p>
					</td>
					<p class="Tp"></p>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="76" valign="top" style="width:57.0pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><i style="mso-bidi-font-style:normal">localbytes</i></p>
						<p class="Tpf"></p>
					</td>
					<td width="388" colspan="2" valign="top" style="width:291.0pt;padding:0in 0in 0in 0in">
						<p class="Tp">The count in bytes of all locals defined with the <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">LOCAL</span></b> directive.</p>
						<p class="Tp"></p>
					</td>
					<p class="Tp"></p>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="76" valign="top" style="width:57.0pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><i style="mso-bidi-font-style:normal">reglist</i></p>
						<p class="Tpf"></p>
					</td>
					<td width="388" colspan="2" valign="top" style="width:291.0pt;padding:0in 0in 0in 0in">
						<p class="Tp">A list of the registers following the <b style="mso-bidi-font-weight:
  normal"><span style="font-size:9.0pt">USES</span></b> operator in the procedure declaration. Enclose this list with angle brackets (&lt; &gt;) and separate each item with commas. Reverse the list for epilogues.</p>
						<p class="Tp"></p>
					</td>
					<p class="Tp"></p>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="76" valign="top" style="width:57.0pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><i style="mso-bidi-font-style:normal">userparms</i></p>
						<p class="Tpf"></p>
					</td>
					<td width="388" colspan="2" valign="top" style="width:291.0pt;padding:0in 0in 0in 0in">
						<p class="Tp">Any argument you want to pass to the macro. The prologuearg (if there is one) specified in the <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">PROC </span></b>directive is passed to this argument.</p>
						<p class="Tp"></p>
					</td>
					<p class="Tp"></p>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
			</table>
			<p class="Le"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;&lt;&lt; &gt; (angle brackets):epilogues&quot;<span style='mso-hide:none'>
\z &quot;FLOWWW.DOC-1329&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Angle brackets (&lt;&lt; &gt;):epilogues&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1330&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;&lt;&lt; &gt; (angle
brackets):prologues&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1331&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Angle brackets (&lt;&lt;
&gt;):prologues&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1332&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Your macro function must return the <i style="mso-bidi-font-style:
normal">parmbytes</i> parameter. However, if the prologue places other values on the stack after pushing BP and these values are not referenced by any of the local variables, the exit value must be the number of bytes for procedure locals plus any space between BP and the locals. Therefore, <i style="mso-bidi-font-style:normal">parmbytes</i> is not always equal to the bytes occupied by the locals.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Prologue code:macros for&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1333&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The following macro is an example of a user-defined prologue that counts the number of times a procedure is called.</p>
			<p class="Ex">ProfilePro<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>MACRO procname,<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>\<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>flag,<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>\<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>bytecount,<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>\<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>numlocals,<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>\<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>regs,<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>\<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>macroargs<br>
			<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.DATA<br>
			procname&amp;count<span style="mso-spacerun: yes">&nbsp; </span>WORD 0<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.CODE<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>inc<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span><span style="mso-spacerun: yes">&nbsp;&nbsp;</span>procname&amp;count<span style="mso-spacerun: yes">&nbsp; </span>; Accumulates count of times the<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>procedure is called<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>push<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>bp<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>bp, sp<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Other BP operations<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>IFNB &lt;regs&gt;<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>FOR r, regs<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>push r<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>ENDM<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>ENDIF<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>EXITM %bytecount<br>
			ENDM<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1502&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Your program must also include this statement before calling any procedures that use the prologue:</p>
			<p class="Ex">OPTION PROLOGUE:ProfilePro<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;OPTION directive:PROLOGUE&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1334&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;OPTION directive:EPILOGUE&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1335&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">If you define either a prologue or an epilogue macro, the assembler uses the standard prologue or epilogue code for the one you do not define. The form of the code generated depends on the <b style="mso-bidi-font-weight:
normal">.MODEL</b> and <b style="mso-bidi-font-weight:normal">PROC</b> options used.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;PROLOGUE argument, OPTION directive&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1336&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;EPILOGUE argument, OPTION
directive&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1337&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">If you want to revert to the standard prologue or epilogue code, use<br>
			<span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>PROLOGUEDEF</span> or <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>EPILOGUEDEF</span> as the <i style="mso-bidi-font-style:normal">macroname</i> in the <b style="mso-bidi-font-weight:normal">OPTION</b> statement.</p>
			<p class="Ex">OPTION EPILOGUE:EPILOGUEDEF<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1503&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">You can completely suppress prologue or epilogue generation with</p>
			<p class="Ex">OPTION PROLOGUE:None<br>
			OPTION EPILOGUE:None<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1504&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">In this case, no user-defined macro is called, and the assembler does not generate a default code sequence. This state remains in effect until the next <b style="mso-bidi-font-weight:normal">OPTION<br>
			PROLOGUE</b> or <b style="mso-bidi-font-weight:normal">OPTION EPILOGUE</b> is encountered.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1505&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">For additional information about writing macros, see Chapter 9, &#147;Using Macros.&#148; The PROLOGUE.INC file provided in the MASM 6.1 distribution disks can create the prologue and epilogue sequences for the Microsoft C professional development system.</p>
			<h1 style="margin-left:0in">MS-DOS Interrupts</h1>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;MS-DOS Interrupts&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1338&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Interrupts:overview&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1339&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">In addition to jumps, loops, and procedures that alter program execution, interrupt routines transfer execution to a different location. In this case, control goes to an interrupt routine.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;BOUND instruction&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1340&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:BOUND&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1341&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">You can write your own interrupt routines, either to replace an existing routine or to use an undefined interrupt number. For example, you may want to replace an MS-DOS interrupt handler, such as the Critical Error (Interrup 24h) and <span style="font-size:8.0pt">CONTROL+C</span> (Interrupt 23h) handlers. The <b style="mso-bidi-font-weight:normal">BOUND</b> instruction checks array bounds and calls Interrupt 5 when an error occurs. If you use this instruction, you need to write an interrupt handler for it.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1506&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">This section summarizes the following:</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1507&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>How to call interrupts</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1508&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>How the processor handles interrupts</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1509&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>How to redefine an existing interrupt routine</p>
			<p class="Le"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1510&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The example routine in this section handles addition or multiplication overflow and illustrates the steps necessary for writing an interrupt routine. For additional information about MS-DOS and BIOS interrupts, see Chapter 11, &#147;Writing Memory-Resident Software.&#148;</p>
			<h2 style="margin-left:0in">Calling MS-DOS and ROM-BIOS Interrupts<span style="mso-spacerun: yes">&nbsp; </span></h2>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;ROM-BIOS Interrupts&quot; \t &quot;See Interrupts&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1342&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Interrupts:INT
instruction&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1343&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;INT instruction&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1344&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:INT&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1345&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Interrupts provide a way to access MS-DOS and ROM-BIOS from assembly language. They are called with the <b style="mso-bidi-font-weight:
normal">INT</b> instruction, which takes an immediate value between 0 and 255 as its only operand.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1511&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">MS-DOS and ROM-BIOS interrupt routines accept data through registers. For instance, most MS-DOS routines (and many BIOS routines) require a function number in the AH register. Many handler routines also return values in registers. To use an interrupt, you must know what data the handler routine expects and what data, if any, it returns. For information, consult Help or one of the other references mentioned in the Introduction.</p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1512&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The following fragment illustrates a simple call to MS-DOS Function 9, which displays the string <span style='font-size:9.5pt;font-family:
"Lucida Sans Typewriter"'>msg</span> on the screen:</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.DATA<br>
			msg<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>BYTE<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>&quot;This writes to the screen$&quot;<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.CODE<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, SEG msg<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>; Necessary only if DS does not<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ds, ax<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>already point to data segment<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>dx, offset msg<span style="mso-spacerun: yes">&nbsp; </span>; DS:DX points to msg<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ah, 09h<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Request Function 9<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>int<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>21h<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;INT instruction&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1346&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:INT&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1347&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Interrupts:INT
instruction&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1348&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Interrupt vector&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1349&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Interrupts:vector table&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1350&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">When the <b style="mso-bidi-font-weight:normal">INT</b> instruction executes, the processor:</p>
			<p class="Ln1" style="margin-left:22.0pt"><span style="mso-tab-count:1"></span>1.<span style="mso-tab-count:1">&nbsp; </span>Looks up the address of the interrupt routine in the Interrupt Vector Table. This table starts at the lowest point in memory (segment 0, offset 0) and consists of a series of far pointers called vectors. Each vector comprises a 4-byte address (segment:offset) pointing to an interrupt handler routine. The table sequence implies the number of the interrupt the vector references: the first vector points to the Interrupt 0 handler, the second vector to the Interrupt 1 handler, and so forth. Thus, the vector at 0000:<i style="mso-bidi-font-style:normal">i</i>*4 holds the address of the handler routine for Interrupt <i style="mso-bidi-font-style:normal">i</i>.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Trap flag&quot; \z &quot;FLOWWW.DOC-1351&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Interrupt-enable flag&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1352&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Ln1" style="margin-left:22.0pt"><span style="mso-tab-count:1"></span>2.<span style="mso-tab-count:1">&nbsp; </span>Clears the trap flag (TF) and interrupt enable flag (IF).</p>
			<p class="Ln1" style="margin-left:22.0pt"><span style="mso-tab-count:1"></span>3.<span style="mso-tab-count:1">&nbsp; </span>Pushes the flags register, the current code segment (CS), and the current instruction pointer (IP), in that order. (The current instruction is the one following the <b style="mso-bidi-font-weight:
normal">INT</b> statement.) As with a <b style="mso-bidi-font-weight:normal">CALL</b>, this ensures control returns to the next logical position in the program.</p>
			<p class="Ln1" style="margin-left:22.0pt"><span style="mso-tab-count:1"></span>4.<span style="mso-tab-count:1">&nbsp; </span>Jumps to the address of the interrupt routine, as specified in the Interrupt Vector Table.</p>
			<p class="Ln1" style="margin-left:22.0pt"><span style="mso-tab-count:1"></span>5.<span style="mso-tab-count:1">&nbsp; </span>Executes the code of the interrupt routine until it encounters an <b style="mso-bidi-font-weight:normal">IRET</b><br>
			instruction.</p>
			<p class="Ln1" style="margin-left:22.0pt"><span style="mso-tab-count:1"></span>6.<span style="mso-tab-count:1">&nbsp; </span>Pops the instruction pointer, code segment, and flags.</p>
			<p class="Le"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Interrupts:operation&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1353&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Figure 7.3 illustrates how interrupts work.</p>
			<p class="Art" style="margin-left:0in"><span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp; </span><span style='mso-field-code:"include M\:\\\\SLM\\\\SRC\\\\MASM61\\\\APPS\\\\ART\\\\mpchp07\.doc art_mp0706_eps  \\\\* mergeformat"'><a name="art_mp0706_eps"></a><a name="space_mp0706_eps"><span style="mso-bookmark:
art_mp0706_eps"></span></a><!--[if supportFields]><span style='mso-bookmark:
space_mp0706_eps'><span style='mso-bookmark:art_mp0706_eps'></span></span><span
style='mso-element:field-begin'></span><span style='mso-bookmark:space_mp0706_eps'><span
style='mso-bookmark:art_mp0706_eps'>IMPORT
M:\\SLM\\SRC\\MASM61\\APPS\\ART\\MP0706.EPS \* mergeformat<span
style='mso-element:field-separator'></span></span></span><![endif]-->
			<span style="mso-bookmark:space_mp0706_eps"><span style="mso-bookmark:art_mp0706_eps"><!--[if gte vml 1]><v:shape
 id="_x0000_i1030" type="#_x0000_t75" style='width:324.75pt;height:285.75pt'>
 <v:imagedata src="./Chap_07_files/image011.wmz" o:href="file:///M:/SLM/SRC/MASM61/APPS/ART/MP0706.EPS"/>
</v:shape><![endif]-->
			<![if !vml]><img width="433" height="381" src="Chap_07_files/image012.gif" v:shapes="_x0000_i1030"><![endif]></span></span><!--[if supportFields]><span
style='mso-bookmark:space_mp0706_eps'><span style='mso-bookmark:art_mp0706_eps'></span></span><span
style='mso-element:field-end'></span><![endif]-->
			 <span style="mso-bookmark:
space_mp0706_eps"><span style="mso-bookmark:art_mp0706_eps"></span></span></span></p>
			<p class="Cap">Figure <!--[if supportFields]><span style='font-family:Times'><span
style='mso-element:field-begin'></span>SEQ chapter \c<span style='mso-element:
field-separator'></span></span><![endif]-->
			<span style="font-family:Times">7</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-end'></span></span><![endif]-->
			 <span style="font-family:Times">.</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-begin'></span>SEQ
figure<span style='mso-element:field-separator'></span></span><![endif]-->
			 <span style="font-family:Times">3</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-end'></span></span><![endif]-->
			 <span style="font-family:Helvetica-Narrow"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span></span>Operation of Interrupts</p>
			<h2 style="margin-left:0in">Replacing an Interrupt Routine</h2>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1513&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">To replace an existing interrupt routine, your program must:</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1514&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>Provide a new routine to handle the interrupt.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1515&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>Replace the old routine&#146;s address in the Interrupt Vector Table with the address of your new routine.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1516&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>Replace the old address back into the vector table before your program ends.</p>
			<p class="Le"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;Directives:PROC&quot; \z &quot;FLOWWW.DOC-1354&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;PROC directive&quot; \z
&quot;FLOWWW.DOC-1355&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;Directives:ENDP&quot; \z
&quot;FLOWWW.DOC-1356&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;ENDP directive&quot; \z
&quot;FLOWWW.DOC-1357&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Interrupts:routines&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1358&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Routines:interrupt&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1359&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">You can write an interrupt routine as a procedure by using the <b style="mso-bidi-font-weight:normal">PROC</b> and <b style="mso-bidi-font-weight:
normal">ENDP</b> directives. The routine should always be defined as <b style="mso-bidi-font-weight:normal">FAR</b> and should end with an <b style="mso-bidi-font-weight:normal">IRET</b> instruction instead of a <b style="mso-bidi-font-weight:normal">RET</b> instruction.</p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<div style="border:none;border-bottom:solid windowtext .75pt;padding:0in 0in 1.0pt 0in">
				<p class="Ns"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			</div>
			<div style="mso-element:frame;mso-element-wrap:around">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" height="16" align="left">
					<tr>
						<td valign="top" align="left" height="16" style="padding-top:0in;padding-right:
  6.5pt;padding-bottom:0in;padding-left:6.5pt">
							<p class="Nh">Note</p>
						</td>
					</tr>
				</table>
			</div>
			<p class="Np1">You can use the full extended <b style="mso-bidi-font-weight:normal">PROC</b> syntax (described in &#147;Declaring Parameters with the PROC Directive,&#148; earlier in this chapter) to write interrupt procedures. However, you should not make interrupt procedures <b style="mso-bidi-font-weight:normal">NEAR</b> or specify arguments for them. You can use the <b style="mso-bidi-font-weight:normal">USES</b> keyword, however, to correctly generate code to save and restore a register list in interrupt procedures.</p>
			<div style="border:none;border-top:solid windowtext .75pt;padding:1.0pt 0in 0in 0in">
				<p class="Ne"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			</div>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1517&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The <b style="mso-bidi-font-weight:normal">IRET</b> instruction in MASM 6.1 has two forms that suppress epilogue code. This allows an interrupt to have local variables or use a user-defined prologue. <b style="mso-bidi-font-weight:normal">IRETF</b> pops a <b style="mso-bidi-font-weight:
normal">FAR16</b> return address, and <b style="mso-bidi-font-weight:normal">IRETFD</b> pops a <b style="mso-bidi-font-weight:normal">FAR32</b> return address.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Interrupts:redefining&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1360&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:INTO&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1361&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;INTO instruction&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1362&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The following example shows how to replace the handler for Interrupt 4. Once registered in the Interrupt Vector Table, the new routine takes control when the processor encounters either an <b style="mso-bidi-font-weight:
normal">INT 4</b> instruction or its special variation <b style="mso-bidi-font-weight:
normal">INTO</b> (Interrupt on Overflow). <b style="mso-bidi-font-weight:normal">INTO</b> is a conditional instruction that acts only when the overflow flag is set. With <b style="mso-bidi-font-weight:normal">INTO</b> after a numerical calculation, your code can automatically route control to a handler routine if the calculation results in a numerical overflow. By default, the routine for Interrupt 4 simply consists of an <b style="mso-bidi-font-weight:normal">IRET</b>, so it returns without doing anything. Using <b style="mso-bidi-font-weight:
normal">INTO</b> is an alternative to using <b style="mso-bidi-font-weight:
normal">JO</b> (Jump on Overflow) to jump to another set of instructions.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Interrupts:routines&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1363&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The following example program first executes <b style="mso-bidi-font-weight:normal">INT 21h</b> to invoke MS-DOS Function 35h (Get Interrupt Vector). This function returns the existing vector for Interrupt 4. The program stores the vector, then invokes MS-DOS Function 25h (Set Interrupt Vector) to place the address of the <span style='font-size:9.5pt;
font-family:"Lucida Sans Typewriter"'>ovrflow</span> procedure in the Interrupt Vector Table. From this point on, <span style='font-size:9.5pt;font-family:
"Lucida Sans Typewriter"'>ovrflow</span> gains control whenever the processor executes <b style="mso-bidi-font-weight:normal">INTO</b> while the overflow flag is set. The new routine displays a message and returns with AX and DX set to 0.</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.MODEL LARGE, C<br>
			FPFUNC<span style="mso-spacerun: yes">&nbsp; </span>TYPEDEF FAR PTR<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.DATA<br>
			msg<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>BYTE<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>&quot;Overflow - result set to 0&quot;,13,10,'$'<br>
			vector<span style="mso-spacerun: yes">&nbsp; </span>FPFUNC<span style="mso-spacerun:
yes">&nbsp; </span>?<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.CODE<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.STARTUP<br>
			<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, 3504h<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Load Interrupt 4 and call DOS<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>int<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>21h<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>Get Interrupt Vector<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>WORD PTR vector[2],es<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>; Save segment<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>WORD PTR vector[0],bx<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>and offset<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>push<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>ds<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Save DS<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, cs<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Load segment of new routine<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ds, ax<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>dx, OFFSET ovrflow<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Load offset of new routine<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, 2504h<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Load Interrupt 4 and call DOS<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>int<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>21h<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>Set Interrupt Vector<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>pop<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ds<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Restore<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>add<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, bx<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Do arithmetic<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>into<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Call Interrupt 4 if overflow<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>lds<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>dx, vector<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Load original address<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, 2504h<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Restore it to vector table<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>int<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>21h<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>with DOS set vector function<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, 4C00h<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Terminate function<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>int<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>21h<br>
			<br>
			<br>
			ovrflow PROC<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>FAR<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>sti<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Enable interrupts<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>(turned off by INT)<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ah, 09h<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Display string function<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>dx, OFFSET msg<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Load address<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>int<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>21h<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Call DOS<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>sub<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, ax<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Set AX to 0<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>cwd<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Set DX to 0<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>iret<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Return<br>
			ovrflow ENDP<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>END<br style="mso-special-character:
line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1518&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Before the program ends, it again uses MS-DOS Function 25h to reset the original Interrupt 4 vector back into the Interrupt Vector Table. This reestablishes the original routine as the handler for Interrupt 4.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;FLOWWW.DOC-1519&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The first instruction of the <span style='font-size:9.5pt;
font-family:"Lucida Sans Typewriter"'>ovrflow</span> routine warrants further discussion. When the processor encounters an <b style="mso-bidi-font-weight:
normal">INT</b> instruction, it clears the interrupt flag before branching to the specified interrupt handler routine. The interrupt flag serves a crucial role in smoothing the processor&#146;s tasks, but must not be abused. When clear, the flag inhibits hardware interrupts such as the keyboard or system timer. It should be left clear only briefly and only when absolutely necessary. Unless you have a</p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<p class="MsoNormal">compelling reason to leave the flag clear, always include an <b style="mso-bidi-font-weight:normal">STI</b> (Set Interrupt Flag) instruction at the beginning of your interrupt handler routine to reenable hardware interrupts.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Interrupts:STI instruction&quot;<span style='mso-hide:none'> \z
&quot;FLOWWW.DOC-1364&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Interrupts:CLI
instruction&quot;<span style='mso-hide:none'> \z &quot;FLOWWW.DOC-1365&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:STI&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1366&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:CLI&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1367&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;STI instruction&quot;<span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1368&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<a name="bkEntry"></a><a name="bmXETemp"></a><a name="FindXETemp1"><span style="mso-bookmark:bmXETemp"><span style="mso-bookmark:bkEntry"></span></span></a><!--[if supportFields]><span
style='mso-bookmark:FindXETemp1'><span style='mso-bookmark:bmXETemp'><span
style='mso-bookmark:bkEntry'></span></span></span><span style='mso-element:
field-begin'></span><span style='mso-bookmark:FindXETemp1'><span
style='mso-bookmark:bmXETemp'><span style='mso-bookmark:bkEntry'>XE &quot;CLI
instruction&quot;</span></span></span><span style='mso-bookmark:FindXETemp1'><span
style='mso-bookmark:bmXETemp'><span style='mso-bookmark:bkEntry'><span
style='mso-hide:none'> \z &quot;FLOWWW.DOC-1369&quot;</span></span></span></span><![endif]-->
			<span style="mso-bookmark:FindXETemp1"><span style="mso-bookmark:bmXETemp"><span style="mso-bookmark:bkEntry"></span></span></span><!--[if supportFields]><span
style='mso-bookmark:FindXETemp1'><span style='mso-bookmark:bmXETemp'><span
style='mso-bookmark:bkEntry'></span></span></span><span style='mso-element:
field-end'></span><![endif]-->
			<span style="mso-bookmark:FindXETemp1"><span style="mso-bookmark:bmXETemp"><span style="mso-bookmark:bkEntry"></span></span></span></p>
			<p class="MsoNormal"><a name="FindXETemp"></a><a name="BeginSelect"></a><span style="mso-bookmark:FindXETemp"><b style="mso-bidi-font-weight:normal">CLI</b> (Clear Interrupt Flag) and its corollary <b style="mso-bidi-font-weight:normal">STI</b> are designed to protect small sections of time-dependent code from interruptions by the hardware. If you use <b style="mso-bidi-font-weight:normal">CLI</b> in your program, be sure to include a matching <b style="mso-bidi-font-weight:
normal">STI</b> instruction as well. The sample interrupt handlers in Chapter 11, &#147;Writing Memory-Resident Software,&#148; illustrate how to use these important instructions. </span></p>
			<span style="mso-bookmark:FindXETemp"></span>
			<p class="MsoNormal"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<p class="MsoNormal"><span style="mso-spacerun: yes">&nbsp;</span></p>
		</div>
		<span style='font-size:10.5pt;mso-bidi-font-size:10.0pt;font-family:"Times New Roman";
mso-fareast-font-family:"Times New Roman";mso-ansi-language:EN-US;mso-fareast-language:
EN-US;mso-bidi-language:AR-SA'><br clear="all" style="page-break-before:always;
mso-break-type:section-break">
		</span>
		<div class="Section2">
			<p class="MsoNormal"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
		</div>
		<div style="mso-element:comment-list">
			<![if !supportAnnotations]>
			<hr class="msocomoff" align="left" size="1" width="33%">
			<![endif]></div>
	</body>

</html>
