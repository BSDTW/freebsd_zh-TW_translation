<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40">

	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
		<meta name="ProgId" content="Word.Document">
		<meta name="Generator" content="Microsoft Word 9">
		<meta name="Originator" content="Microsoft Word 9">
		<link rel="File-List" href="Chap_05_files/filelist.xml">
		<!--[if !mso]>
<style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style>
<![endif]-->
		<title>CHAPTER 5</title>
		<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Ruth L Silverio</o:Author>
  <o:Keywords>{artman 1,M:\SLM\SRC\MASM61\APPS\ART\mpchp05.doc}</o:Keywords>
  <o:Description>Converted with 6/12/92 version of Win2Word</o:Description>
  <o:Template>MSGRIDA1.DOT</o:Template>
  <o:LastAuthor>Randall Hyde</o:LastAuthor>
  <o:Revision>2</o:Revision>
  <o:TotalTime>0</o:TotalTime>
  <o:Created>2001-09-06T23:31:00Z</o:Created>
  <o:LastSaved>2001-09-06T23:31:00Z</o:LastSaved>
  <o:Pages>12</o:Pages>
  <o:Words>11300</o:Words>
  <o:Characters>74830</o:Characters>
  <o:Company>Dell Computer Corporation</o:Company>
  <o:Version>9.3821</o:Version>
 </o:DocumentProperties>
</xml><![endif]-->
		<!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:HideSpellingErrors/>
  <w:HideGrammaticalErrors/>
  <w:DoNotHyphenateCaps/>
  <w:DrawingGridHorizontalSpacing>6 pt</w:DrawingGridHorizontalSpacing>
  <w:DrawingGridVerticalSpacing>6 pt</w:DrawingGridVerticalSpacing>
  <w:DisplayVerticalDrawingGridEvery>0</w:DisplayVerticalDrawingGridEvery>
  <w:UseMarginsForDrawingGridOrigin/>
  <w:Compatibility>
   <w:PrintColBlack/>
   <w:ShowBreaksInFrames/>
   <w:SuppressSpBfAfterPgBrk/>
   <w:SwapBordersFacingPages/>
   <w:ConvMailMergeEsc/>
   <w:UsePrinterMetrics/>
   <w:FootnoteLayoutLikeWW8/>
   <w:ShapeLayoutLikeWW8/>
   <w:AlignTablesRowByRow/>
   <w:ForgetLastTabAlignment/>
   <w:NoSpaceRaiseLower/>
   <w:LayoutRawTableWidth/>
   <w:LayoutTableRowsApart/>
  </w:Compatibility>
 </w:WordDocument>
</xml><![endif]-->
		<![if !supportAnnotations]>
		<style id="dynCom" type="text/css"><!-- --></style>
		<script language="JavaScript"><!--
function msoCommentShow(anchor_id, com_id)
{
	if(msoBrowserCheck()) 
		{
		c = document.all(com_id);
		if (null != c)
			{
			a = document.all(anchor_id);
			var cw = c.offsetWidth;
			var ch = c.offsetHeight;
			var aw = a.offsetWidth;
			var ah = a.offsetHeight;
			var x  = a.offsetLeft;
			var y  = a.offsetTop;
			var el = a;
			while (el.tagName != "BODY") 
				{
				el = el.offsetParent;
				x = x + el.offsetLeft;
				y = y + el.offsetTop;
				}
			var bw = document.body.clientWidth;
			var bh = document.body.clientHeight;
			var bsl = document.body.scrollLeft;
			var bst = document.body.scrollTop;
			if (x + cw + ah / 2 > bw + bsl && x + aw - ah / 2 - cw >= bsl ) 
				{ c.style.left = x + aw - ah / 2 - cw; }
			else 
				{ c.style.left = x + ah / 2; }
			if (y + ch + ah / 2 > bh + bst && y + ah / 2 - ch >= bst ) 
				{ c.style.top = y + ah / 2 - ch; }
			else 
				{ c.style.top = y + ah / 2; }
			c.style.visibility = "visible";
}	}	}
function msoCommentHide(com_id) 
{
	if(msoBrowserCheck())
		{
		c = document.all(com_id);
		if (null != c)
		{
		c.style.visibility = "hidden";
		c.style.left = -1000;
		c.style.top = -1000;
		} } 
}
function msoBrowserCheck()
{
	ms = navigator.appVersion.indexOf("MSIE");
	vers = navigator.appVersion.substring(ms + 5, ms + 6);
	ie4 = (ms > 0) && (parseInt(vers) >= 4);
	return ie4;
}
if (msoBrowserCheck())
{
	document.styleSheets.dynCom.addRule(".msocomanchor","background: infobackground");
	document.styleSheets.dynCom.addRule(".msocomoff","display: none");
	document.styleSheets.dynCom.addRule(".msocomtxt","visibility: hidden");
	document.styleSheets.dynCom.addRule(".msocomtxt","position: absolute");
	document.styleSheets.dynCom.addRule(".msocomtxt","top: -1000");
	document.styleSheets.dynCom.addRule(".msocomtxt","left: -1000");
	document.styleSheets.dynCom.addRule(".msocomtxt","width: 33%");
	document.styleSheets.dynCom.addRule(".msocomtxt","background: infobackground");
	document.styleSheets.dynCom.addRule(".msocomtxt","color: infotext");
	document.styleSheets.dynCom.addRule(".msocomtxt","border-top: 1pt solid threedlightshadow");
	document.styleSheets.dynCom.addRule(".msocomtxt","border-right: 2pt solid threedshadow");
	document.styleSheets.dynCom.addRule(".msocomtxt","border-bottom: 2pt solid threedshadow");
	document.styleSheets.dynCom.addRule(".msocomtxt","border-left: 1pt solid threedlightshadow");
	document.styleSheets.dynCom.addRule(".msocomtxt","padding: 3pt 3pt 3pt 3pt");
}
// --></script>
		<![endif]>
		<style>
<!--
 /* Font Definitions */
@font-face
	{font-family:Times;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:0;
	mso-generic-font-family:roman;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:"Tms Rmn";
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:0;
	mso-generic-font-family:roman;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:"Arial Narrow";
	panose-1:2 11 5 6 2 2 2 3 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:647 0 0 0 159 0;}
@font-face
	{font-family:"Lucida Sans Typewriter";
	panose-1:2 11 5 9 3 5 4 3 2 4;
	mso-font-charset:0;
	mso-generic-font-family:modern;
	mso-font-pitch:fixed;
	mso-font-signature:3 0 0 0 1 0;}
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
h1
	{mso-style-parent:"";
	mso-style-next:Normal;
	margin-top:10.0pt;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:-1.25in;
	line-height:22.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-outline-level:1;
	font-size:20.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-font-kerning:0pt;
	mso-bidi-font-weight:normal;}
h2
	{mso-style-parent:"Heading 1";
	mso-style-next:Normal;
	margin-top:7.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:-1.25in;
	line-height:19.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-outline-level:2;
	font-size:17.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-bidi-font-weight:normal;}
h3
	{mso-style-parent:"Heading 1";
	mso-style-next:Normal;
	margin-top:4.0pt;
	margin-right:0in;
	margin-bottom:2.0pt;
	margin-left:0in;
	line-height:17.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-outline-level:3;
	font-size:15.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-bidi-font-weight:normal;}
h4
	{mso-style-parent:"Heading 1";
	mso-style-next:Normal;
	margin-top:3.0pt;
	margin-right:0in;
	margin-bottom:2.0pt;
	margin-left:0in;
	line-height:14.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-bidi-font-weight:normal;}
h5
	{mso-style-parent:"Heading 1";
	mso-style-next:Normal;
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:2.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:5;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-bidi-font-weight:normal;}
h6
	{mso-style-parent:"Heading 1";
	mso-style-next:H6p;
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	line-height:11.9pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:6;
	mso-element:frame;
	mso-element-frame-height:12.75pt;
	mso-element-frame-hspace:6.5pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:column;
	mso-element-top:.05pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-bidi-font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{mso-style-next:"Normal Indent";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:.5in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	mso-outline-level:7;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-style:italic;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{mso-style-next:"Normal Indent";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:.5in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	mso-outline-level:8;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-style:italic;}
p.MsoHeading9, li.MsoHeading9, div.MsoHeading9
	{mso-style-next:"Normal Indent";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:.5in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	mso-outline-level:9;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoIndex1, li.MsoIndex1, div.MsoIndex1
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoIndex2, li.MsoIndex2, div.MsoIndex2
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:.25in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoIndex3, li.MsoIndex3, div.MsoIndex3
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:.5in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoIndex4, li.MsoIndex4, div.MsoIndex4
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:.75in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoIndex5, li.MsoIndex5, div.MsoIndex5
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:1.0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoIndex6, li.MsoIndex6, div.MsoIndex6
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:1.25in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoIndex7, li.MsoIndex7, div.MsoIndex7
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:1.5in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoToc1, li.MsoToc1, div.MsoToc1
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:2.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:right dotted 348.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoToc2, li.MsoToc2, div.MsoToc2
	{mso-style-parent:"TOC 1";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:2.0pt;
	margin-left:14.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:right dotted 348.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoToc3, li.MsoToc3, div.MsoToc3
	{mso-style-parent:"TOC 1";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:2.0pt;
	margin-left:28.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:right dotted 348.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoToc4, li.MsoToc4, div.MsoToc4
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:.5in;
	margin-bottom:8.0pt;
	margin-left:1.5in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	tab-stops:dotted 5.75in right blank 6.0in;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoToc5, li.MsoToc5, div.MsoToc5
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:.5in;
	margin-bottom:8.0pt;
	margin-left:2.0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	tab-stops:dotted 5.75in right blank 6.0in;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoToc6, li.MsoToc6, div.MsoToc6
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:.5in;
	margin-bottom:8.0pt;
	margin-left:2.5in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	tab-stops:dotted 5.75in right blank 6.0in;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoToc7, li.MsoToc7, div.MsoToc7
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:.5in;
	margin-bottom:8.0pt;
	margin-left:3.0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	tab-stops:dotted 5.75in right blank 6.0in;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoToc8, li.MsoToc8, div.MsoToc8
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:.5in;
	margin-bottom:8.0pt;
	margin-left:3.5in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	tab-stops:dotted 5.75in right blank 6.0in;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoNormalIndent, li.MsoNormalIndent, div.MsoNormalIndent
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:14.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoFootnoteText, li.MsoFootnoteText, div.MsoFootnoteText
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoCommentText, li.MsoCommentText, div.MsoCommentText
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:9.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:green;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{mso-style-parent:"";
	mso-style-next:"header rule";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:-1.25in;
	margin-bottom:.0001pt;
	line-height:10.5pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	tab-stops:right 348.0pt;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	line-height:7.0pt;
	mso-pagination:widow-orphan;
	mso-element:frame;
	mso-element-wrap:around;
	mso-element-anchor-vertical:page;
	mso-element-anchor-horizontal:page;
	mso-element-left:100.0pt;
	mso-element-top:735.15pt;
	mso-height-rule:exactly;
	font-size:5.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoIndexHeading, li.MsoIndexHeading, div.MsoIndexHeading
	{mso-style-next:"Index 1";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
span.MsoFootnoteReference
	{mso-ansi-font-size:8.0pt;
	mso-bidi-font-size:8.0pt;
	mso-text-raise:3.0pt;}
span.MsoCommentReference
	{color:green;}
p.Wh, li.Wh, div.Wh
	{mso-style-name:Wh;
	mso-style-parent:Nh;
	mso-style-next:Np1;
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	line-height:11.9pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-element:frame;
	mso-element-frame-height:11.75pt;
	mso-element-frame-hspace:6.5pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:column;
	mso-element-top:.05pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:blue;
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Ws, li.Ws, div.Ws
	{mso-style-name:Ws;
	mso-style-parent:"";
	mso-style-next:Wh;
	margin-top:2.0pt;
	margin-right:1.5pt;
	margin-bottom:0in;
	margin-left:1.5pt;
	margin-bottom:.0001pt;
	line-height:4.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	border:none;
	mso-border-bottom-alt:double blue 2.25pt;
	padding:0in;
	mso-padding-alt:0in 0in 0in 0in;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:white;}
p.We, li.We, div.We
	{mso-style-name:We;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:1.5pt;
	margin-bottom:0in;
	margin-left:1.5pt;
	margin-bottom:.0001pt;
	line-height:10.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	border:none;
	mso-border-top-alt:double blue 2.25pt;
	padding:0in;
	mso-padding-alt:1.0pt 0in 0in 0in;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:white;}
p.Np1, li.Np1, div.Np1
	{mso-style-name:Np1;
	mso-style-parent:Np2;
	mso-style-next:Ne;
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Nh, li.Nh, div.Nh
	{mso-style-name:Nh;
	mso-style-parent:"";
	mso-style-next:Np1;
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	line-height:11.9pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-element:frame;
	mso-element-frame-height:11.75pt;
	mso-element-frame-hspace:6.5pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:column;
	mso-element-top:.05pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Ne, li.Ne, div.Ne
	{mso-style-name:Ne;
	mso-style-parent:"";
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:1.5pt;
	margin-bottom:2.0pt;
	margin-left:1.5pt;
	line-height:7.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	border:none;
	mso-border-top-alt:solid windowtext .75pt;
	padding:0in;
	mso-padding-alt:1.0pt 0in 0in 0in;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:white;}
p.Ns, li.Ns, div.Ns
	{mso-style-name:Ns;
	mso-style-parent:"";
	mso-style-next:Nh;
	margin-top:0in;
	margin-right:1.5pt;
	margin-bottom:0in;
	margin-left:1.5pt;
	margin-bottom:.0001pt;
	line-height:4.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	border:none;
	mso-border-bottom-alt:solid windowtext .75pt;
	padding:0in;
	mso-padding-alt:0in 0in 1.0pt 0in;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:white;}
p.Nhi, li.Nhi, div.Nhi
	{mso-style-name:Nhi;
	mso-style-parent:Nh;
	mso-style-next:Np1i;
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:14.0pt;
	margin-bottom:.0001pt;
	line-height:11.9pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-element:frame;
	mso-element-frame-height:11.75pt;
	mso-element-frame-hspace:6.5pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:column;
	mso-element-top:.05pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Nsi, li.Nsi, div.Nsi
	{mso-style-name:Nsi;
	mso-style-parent:Ns;
	mso-style-next:Nhi;
	margin-top:0in;
	margin-right:1.5pt;
	margin-bottom:0in;
	margin-left:15.5pt;
	margin-bottom:.0001pt;
	line-height:4.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	border:none;
	mso-border-bottom-alt:solid windowtext .75pt;
	padding:0in;
	mso-padding-alt:0in 0in 1.0pt 0in;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:white;}
p.Np1i, li.Np1i, div.Np1i
	{mso-style-name:Np1i;
	mso-style-parent:Np1;
	mso-style-next:Nei;
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:14.0pt;
	text-indent:-14.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Nei, li.Nei, div.Nei
	{mso-style-name:Nei;
	mso-style-parent:Ne;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:1.5pt;
	margin-bottom:0in;
	margin-left:15.5pt;
	margin-bottom:.0001pt;
	line-height:7.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	border:none;
	mso-border-top-alt:solid windowtext .75pt;
	padding:0in;
	mso-padding-alt:1.0pt 0in 0in 0in;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:white;}
p.Wsi, li.Wsi, div.Wsi
	{mso-style-name:Wsi;
	mso-style-parent:Ws;
	mso-style-next:Whi;
	margin-top:2.0pt;
	margin-right:1.5pt;
	margin-bottom:0in;
	margin-left:15.5pt;
	margin-bottom:.0001pt;
	line-height:4.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	border:none;
	mso-border-bottom-alt:double blue 2.25pt;
	padding:0in;
	mso-padding-alt:0in 0in 0in 0in;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:white;}
p.Whi, li.Whi, div.Whi
	{mso-style-name:Whi;
	mso-style-parent:Nhi;
	mso-style-next:Np1i;
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:14.0pt;
	margin-bottom:.0001pt;
	line-height:11.9pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-element:frame;
	mso-element-frame-height:11.75pt;
	mso-element-frame-hspace:6.5pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:column;
	mso-element-top:.05pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:blue;
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Wei, li.Wei, div.Wei
	{mso-style-name:Wei;
	mso-style-parent:We;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:1.5pt;
	margin-bottom:0in;
	margin-left:15.5pt;
	margin-bottom:.0001pt;
	line-height:7.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	border:none;
	mso-border-top-alt:double blue 2.25pt;
	padding:0in;
	mso-padding-alt:1.0pt 0in 0in 0in;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:white;}
p.Sbre, li.Sbre, div.Sbre
	{mso-style-name:Sbre;
	mso-style-parent:"";
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:-12.0pt;
	line-height:10.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Sbrh, li.Sbrh, div.Sbrh
	{mso-style-name:Sbrh;
	mso-style-parent:"";
	mso-style-next:Sbrp;
	margin-top:3.0pt;
	margin-right:14.0pt;
	margin-bottom:2.0pt;
	margin-left:14.0pt;
	line-height:14.0pt;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	background:#FFFFBA;
	mso-shading:windowtext;
	mso-pattern:gray-40 yellow;
	border:none;
	mso-border-alt:solid white 1.5pt;
	padding:0in;
	mso-padding-alt:14.0pt 14.0pt 14.0pt 14.0pt;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Sbrs, li.Sbrs, div.Sbrs
	{mso-style-name:Sbrs;
	mso-style-parent:"";
	mso-style-next:Sbrh;
	margin-top:0in;
	margin-right:14.0pt;
	margin-bottom:0in;
	margin-left:14.0pt;
	margin-bottom:.0001pt;
	line-height:5.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:4.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Tt, li.Tt, div.Tt
	{mso-style-name:Tt;
	mso-style-parent:"";
	mso-style-next:Th;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Th, li.Th, div.Th
	{mso-style-name:Th;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:12.0pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Tp, li.Tp, div.Tp
	{mso-style-name:Tp;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:12.0pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:14.0pt 28.0pt;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Te, li.Te, div.Te
	{mso-style-name:Te;
	mso-style-next:Normal;
	margin-top:4.0pt;
	margin-right:1.5pt;
	margin-bottom:4.0pt;
	margin-left:1.5pt;
	text-align:right;
	line-height:9.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	border:none;
	mso-border-top-alt:solid windowtext .75pt;
	padding:0in;
	mso-padding-alt:1.0pt 0in 0in 0in;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Le, li.Le, div.Le
	{mso-style-name:Le;
	mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	text-align:right;
	line-height:8.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.H6p, li.H6p, div.H6p
	{mso-style-name:H6p;
	mso-style-next:Normal;
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Ttw, li.Ttw, div.Ttw
	{mso-style-name:Ttw;
	mso-style-parent:Tt;
	mso-style-next:Th;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:-1.25in;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.ih, li.ih, div.ih
	{mso-style-name:ih;
	mso-style-parent:"";
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:21.0pt;
	margin-left:-1.25in;
	line-height:30.0pt;
	mso-line-height-rule:exactly;
	page-break-before:always;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:24.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Ch, li.Ch, div.Ch
	{mso-style-name:Ch;
	mso-style-parent:"";
	mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	line-height:27.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-element:frame;
	mso-element-frame-width:336.0pt;
	mso-element-frame-height:123.0pt;
	mso-element-wrap:no-wrap-beside;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:margin;
	mso-element-left:-1.25in;
	mso-element-top:.05pt;
	mso-height-rule:exactly;
	font-size:24.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Ln1, li.Ln1, div.Ln1
	{mso-style-name:Ln1;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:14.0pt;
	text-indent:-22.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:right 8.0pt left 14.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Lb1, li.Lb1, div.Lb1
	{mso-style-name:Lb1;
	mso-style-parent:Ln1;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:14.0pt;
	text-indent:-14.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:14.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Ex, li.Ex, div.Ex
	{mso-style-name:Ex;
	mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:19.0pt 38.0pt 57.0pt 76.0pt 95.0pt 114.0pt 133.0pt 152.0pt 171.0pt 190.0pt;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Lucida Sans Typewriter";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.Proch, li.Proch, div.Proch
	{mso-style-name:Proch;
	mso-style-parent:"";
	mso-style-next:Ln1;
	margin-top:4.0pt;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:0in;
	text-indent:-.25in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:0in;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Hn1, li.Hn1, div.Hn1
	{mso-style-name:Hn1;
	mso-style-parent:"Heading 1";
	mso-style-next:Normal;
	margin-top:10.0pt;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:-1.25in;
	line-height:22.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-outline-level:1;
	font-size:20.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Hn2, li.Hn2, div.Hn2
	{mso-style-name:Hn2;
	mso-style-parent:"Heading 2";
	mso-style-next:Normal;
	margin-top:7.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:-1.25in;
	line-height:19.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-outline-level:2;
	font-size:17.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Mp, li.Mp, div.Mp
	{mso-style-name:Mp;
	mso-style-parent:"";
	mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-element:frame;
	mso-element-frame-width:78.0pt;
	mso-element-frame-hspace:12.0pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:page;
	mso-element-top:.05pt;
	mso-height-rule:exactly;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.Lp1, li.Lp1, div.Lp1
	{mso-style-name:Lp1;
	mso-style-parent:Ln1;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:14.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:right 8.0pt left 14.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Np2, li.Np2, div.Np2
	{mso-style-name:Np2;
	mso-style-next:Ne;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Erm, li.Erm, div.Erm
	{mso-style-name:Erm;
	mso-style-next:Erp;
	margin-top:5.0pt;
	margin-right:12.0pt;
	margin-bottom:2.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Erp, li.Erp, div.Erp
	{mso-style-name:Erp;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:5.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Cn, li.Cn, div.Cn
	{mso-style-name:Cn;
	mso-style-parent:"";
	mso-style-next:Ch;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:14.0pt;
	margin-left:-1.25in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	text-transform:uppercase;
	letter-spacing:6.0pt;}
p.Lb2, li.Lb2, div.Lb2
	{mso-style-name:Lb2;
	mso-style-parent:Lb1;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:28.0pt;
	text-indent:-14.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:28.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Exl, li.Exl, div.Exl
	{mso-style-name:Exl;
	mso-style-parent:Ex;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:14.0pt;
	margin-bottom:.0001pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:33.0pt 52.0pt 71.0pt 1.25in 109.0pt 128.0pt 147.0pt 166.0pt 185.0pt 204.0pt;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Lucida Sans Typewriter";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.Cap, li.Cap, div.Cap
	{mso-style-name:Cap;
	mso-style-parent:"";
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:12.0pt;
	margin-left:0in;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:14.0pt 28.0pt;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Ln2, li.Ln2, div.Ln2
	{mso-style-name:Ln2;
	mso-style-parent:Ln1;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:28.0pt;
	text-indent:-30.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:right 22.0pt left 28.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Lp2, li.Lp2, div.Lp2
	{mso-style-name:Lp2;
	mso-style-parent:Lp1;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:28.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:right 8.0pt left 14.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Rh1, li.Rh1, div.Rh1
	{mso-style-name:Rh1;
	mso-style-parent:"Heading 1";
	mso-style-next:Rmh;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:13.0pt;
	margin-left:-1.25in;
	line-height:22.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:1;
	font-size:20.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Rmh, li.Rmh, div.Rmh
	{mso-style-name:Rmh;
	mso-style-parent:"";
	mso-style-next:Normal;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-element:frame;
	mso-element-frame-width:78.0pt;
	mso-element-frame-hspace:12.0pt;
	mso-element-frame-vspace:12.0pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:page;
	mso-element-top:.05pt;
	mso-height-rule:exactly;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.headerrule, li.headerrule, div.headerrule
	{mso-style-name:"header rule";
	mso-style-parent:"";
	mso-style-next:Normal;
	margin-top:2.5pt;
	margin-right:1.5pt;
	margin-bottom:0in;
	margin-left:-88.5pt;
	margin-bottom:.0001pt;
	line-height:4.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	border:none;
	mso-border-top-alt:solid blue .75pt;
	padding:0in;
	mso-padding-alt:0in 0in 0in 0in;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Ermn, li.Ermn, div.Ermn
	{mso-style-name:Ermn;
	mso-style-parent:Erm;
	margin-top:1.0pt;
	margin-right:12.0pt;
	margin-bottom:3.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Sbrp, li.Sbrp, div.Sbrp
	{mso-style-name:Sbrp;
	mso-style-parent:"";
	mso-style-next:Sbre;
	margin-top:0in;
	margin-right:14.0pt;
	margin-bottom:8.0pt;
	margin-left:14.0pt;
	line-height:12.0pt;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	background:#FFFFBA;
	mso-shading:windowtext;
	mso-pattern:gray-40 yellow;
	border:none;
	mso-border-alt:solid white 1.5pt;
	padding:0in;
	mso-padding-alt:14.0pt 14.0pt 14.0pt 14.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Hn3, li.Hn3, div.Hn3
	{mso-style-name:Hn3;
	mso-style-parent:"Heading 3";
	mso-style-next:Normal;
	margin-top:4.0pt;
	margin-right:0in;
	margin-bottom:2.0pt;
	margin-left:0in;
	line-height:17.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-outline-level:3;
	font-size:15.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Term1, li.Term1, div.Term1
	{mso-style-name:Term1;
	mso-style-parent:"";
	mso-style-next:Def1;
	margin:0in;
	margin-bottom:.0001pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Lbp, li.Lbp, div.Lbp
	{mso-style-name:Lbp;
	mso-style-parent:Lb1;
	mso-style-next:Le;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:14.0pt;
	text-indent:-14.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:14.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Np2i, li.Np2i, div.Np2i
	{mso-style-name:Np2i;
	mso-style-parent:Np2;
	mso-style-next:Nei;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:14.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Term2, li.Term2, div.Term2
	{mso-style-name:Term2;
	mso-style-parent:Term1;
	mso-style-next:Def2;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:14.0pt;
	margin-bottom:.0001pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Def1, li.Def1, div.Def1
	{mso-style-name:Def1;
	mso-style-next:Term1;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:14.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Def2, li.Def2, div.Def2
	{mso-style-name:Def2;
	mso-style-parent:Def1;
	mso-style-next:Term2;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:28.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Rule, li.Rule, div.Rule
	{mso-style-name:Rule;
	mso-style-parent:"";
	mso-style-next:Rh1;
	margin-top:14.0pt;
	margin-right:1.5pt;
	margin-bottom:8.0pt;
	margin-left:-88.5pt;
	line-height:6.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	border:none;
	mso-border-bottom-alt:solid windowtext .75pt;
	padding:0in;
	mso-padding-alt:0in 0in 0in 0in;
	font-size:4.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:white;}
p.Exw, li.Exw, div.Exw
	{mso-style-name:Exw;
	mso-style-parent:Ex;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:-1.25in;
	margin-bottom:.0001pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:-71.0pt -52.0pt -33.0pt -14.0pt 5.0pt 24.0pt 43.0pt 62.0pt 81.0pt 100.0pt;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Lucida Sans Typewriter";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.Syn, li.Syn, div.Syn
	{mso-style-name:Syn;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:14.0pt 21.0pt 28.0pt 35.0pt 42.0pt 49.0pt 56.0pt 63.0pt 70.0pt 77.0pt 84.0pt 91.0pt 98.0pt 105.0pt 112.0pt 119.0pt 1.75in 133.0pt 140.0pt 147.0pt 154.0pt 161.0pt 168.0pt 175.0pt 182.0pt 189.0pt 196.0pt 203.0pt 210.0pt 217.0pt 224.0pt 231.0pt 238.0pt 245.0pt 3.5in 259.0pt 266.0pt 273.0pt 280.0pt 287.0pt 294.0pt 301.0pt 308.0pt 315.0pt 322.0pt 329.0pt 336.0pt 343.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Synw, li.Synw, div.Synw
	{mso-style-name:Synw;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:-1.25in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:-76.0pt -62.0pt -48.0pt -34.0pt -20.0pt -6.0pt 8.0pt 14.0pt 21.0pt 28.0pt 35.0pt 42.0pt 49.0pt 56.0pt 63.0pt 70.0pt 77.0pt 84.0pt 91.0pt 98.0pt 105.0pt 112.0pt 119.0pt 1.75in 133.0pt 140.0pt 147.0pt 154.0pt 161.0pt 168.0pt 175.0pt 182.0pt 189.0pt 196.0pt 203.0pt 210.0pt 217.0pt 224.0pt 231.0pt 238.0pt 245.0pt 3.5in 259.0pt 266.0pt 273.0pt 280.0pt 287.0pt 294.0pt 301.0pt 308.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Leh, li.Leh, div.Leh
	{mso-style-name:Leh;
	mso-style-parent:Le;
	mso-style-next:"Heading 1";
	margin:0in;
	margin-bottom:.0001pt;
	text-align:right;
	line-height:4.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Lmc, li.Lmc, div.Lmc
	{mso-style-name:Lmc;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Pb, li.Pb, div.Pb
	{mso-style-name:Pb;
	mso-style-parent:"";
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:-14.0pt;
	margin-bottom:.0001pt;
	line-height:4.0pt;
	mso-line-height-rule:exactly;
	page-break-before:always;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-element:frame;
	mso-element-frame-hspace:9.0pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:page;
	mso-element-top:.05pt;
	mso-height-rule:exactly;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Procp, li.Procp, div.Procp
	{mso-style-name:Procp;
	mso-style-next:Ln1;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Tpi, li.Tpi, div.Tpi
	{mso-style-name:Tpi;
	mso-style-parent:Tp;
	mso-style-next:Tp;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:26.0pt;
	text-indent:-14.0pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:26.0pt;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Tpr, li.Tpr, div.Tpr
	{mso-style-name:Tpr;
	mso-style-parent:Tp;
	mso-style-next:Tp;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:12.0pt;
	text-align:right;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Texf, li.Texf, div.Texf
	{mso-style-name:Texf;
	mso-style-parent:Ex;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:19.0pt 38.0pt 57.0pt 76.0pt 95.0pt;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Lucida Sans Typewriter";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.Tf, li.Tf, div.Tf
	{mso-style-name:Tf;
	mso-style-parent:Tp;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:2.0pt;
	margin-left:7.0pt;
	text-indent:-7.0pt;
	line-height:10.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:14.0pt;
	font-size:8.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Tpf, li.Tpf, div.Tpf
	{mso-style-name:Tpf;
	mso-style-parent:Tp;
	mso-style-next:Tp;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:14.0pt 28.0pt;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Tew, li.Tew, div.Tew
	{mso-style-name:Tew;
	mso-style-parent:Te;
	mso-style-next:Normal;
	margin-top:4.0pt;
	margin-right:1.5pt;
	margin-bottom:4.0pt;
	margin-left:-88.5pt;
	text-align:right;
	line-height:9.0pt;
	mso-pagination:widow-orphan lines-together;
	border:none;
	mso-border-top-alt:solid windowtext .75pt;
	padding:0in;
	mso-padding-alt:1.0pt 0in 0in 0in;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Art, li.Art, div.Art
	{mso-style-name:Art;
	mso-style-parent:"";
	mso-style-next:Cap;
	margin-top:4.0pt;
	margin-right:0in;
	margin-bottom:12.0pt;
	margin-left:-1.25in;
	mso-pagination:widow-orphan lines-together;
	tab-stops:0in 14.0pt 28.0pt;
	font-size:14.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Thf, li.Thf, div.Thf
	{mso-style-name:Thf;
	mso-style-parent:Th;
	mso-style-next:Th;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Tpif, li.Tpif, div.Tpif
	{mso-style-name:Tpif;
	mso-style-parent:Tpi;
	mso-style-next:Tp;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:14.0pt;
	text-indent:-14.0pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:14.0pt;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Tr, li.Tr, div.Tr
	{mso-style-name:Tr;
	mso-style-parent:"";
	mso-style-next:Tpf;
	margin:0in;
	margin-bottom:.0001pt;
	text-align:right;
	line-height:1.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	border:none;
	mso-border-top-alt:solid windowtext .75pt;
	padding:0in;
	mso-padding-alt:0in 0in 0in 0in;
	font-size:4.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Ph, li.Ph, div.Ph
	{mso-style-name:Ph;
	mso-style-parent:Ch;
	mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	line-height:32.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-element:frame;
	mso-element-frame-width:336.0pt;
	mso-element-frame-height:123.0pt;
	mso-element-frame-hspace:9.0pt;
	mso-element-wrap:no-wrap-beside;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:margin;
	mso-element-left:-1.25in;
	mso-element-top:.15pt;
	mso-height-rule:exactly;
	font-size:30.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:blue;}
p.index, li.index, div.index
	{mso-style-name:index;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:fuchsia;
	display:none;
	mso-hide:all;}
p.CapSd, li.CapSd, div.CapSd
	{mso-style-name:CapSd;
	mso-style-parent:Cap;
	margin:0in;
	margin-bottom:.0001pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:right 78.0pt;
	mso-element:frame;
	mso-element-frame-width:78.0pt;
	mso-element-frame-hspace:12.0pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:page;
	mso-element-top:.05pt;
	mso-height-rule:exactly;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.ArtSd, li.ArtSd, div.ArtSd
	{mso-style-name:ArtSd;
	mso-style-parent:Art;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:12.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:right 78.0pt;
	mso-element:frame;
	mso-element-frame-width:78.0pt;
	mso-element-frame-hspace:12.0pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:page;
	mso-element-top:.05pt;
	mso-height-rule:exactly;
	font-size:14.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Tex, li.Tex, div.Tex
	{mso-style-name:Tex;
	mso-style-parent:Texf;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:12.0pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:31.0pt 50.0pt 69.0pt 88.0pt 107.0pt;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Lucida Sans Typewriter";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.hb1, li.hb1, div.hb1
	{mso-style-name:*hb1;
	mso-style-parent:"Heading 4";
	mso-style-next:"Heading 4";
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:2.0pt;
	margin-left:0in;
	text-align:center;
	line-height:17.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-outline-level:4;
	background:#9C9CFF;
	mso-shading:windowtext;
	mso-pattern:gray-60 blue;
	mso-element:frame;
	mso-element-frame-width:75.0pt;
	mso-element-frame-hspace:12.0pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:margin;
	mso-element-left:-1.25in;
	mso-element-top:.05pt;
	mso-height-rule:exactly;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:white;
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.hb2, li.hb2, div.hb2
	{mso-style-name:*hb2;
	mso-style-parent:*hb1;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:1.0pt;
	margin-left:0in;
	text-indent:4.0pt;
	line-height:18.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-outline-level:4;
	background:#9C9CFF;
	mso-shading:windowtext;
	mso-pattern:gray-60 blue;
	mso-element:frame;
	mso-element-frame-hspace:12.0pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:margin;
	mso-element-left:right;
	mso-element-top:.1pt;
	mso-height-rule:exactly;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:white;
	mso-text-raise:1.5pt;
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Cbx, li.Cbx, div.Cbx
	{mso-style-name:*Cbx;
	mso-style-parent:"";
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:2.0pt;
	margin-left:8.0pt;
	line-height:10.5pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:22.0pt;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.Cbxe, li.Cbxe, div.Cbxe
	{mso-style-name:*Cbxe;
	mso-style-parent:Te;
	margin-top:0in;
	margin-right:1.5pt;
	margin-bottom:4.0pt;
	margin-left:-9.0pt;
	line-height:10.5pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:lined 348.0pt;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Tart, li.Tart, div.Tart
	{mso-style-name:Tart;
	mso-style-parent:Tp;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan lines-together;
	tab-stops:12.0pt 14.0pt 28.0pt;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Sbrh2, li.Sbrh2, div.Sbrh2
	{mso-style-name:Sbrh2;
	mso-style-parent:"Heading 5";
	mso-style-next:Sbrp;
	margin-top:2.0pt;
	margin-right:14.0pt;
	margin-bottom:2.0pt;
	margin-left:14.0pt;
	line-height:12.0pt;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-outline-level:5;
	background:#FFFFBA;
	mso-shading:windowtext;
	mso-pattern:gray-40 yellow;
	border:none;
	mso-border-alt:solid white 1.5pt;
	padding:0in;
	mso-padding-alt:14.0pt 14.0pt 14.0pt 14.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.SbrLb, li.SbrLb, div.SbrLb
	{mso-style-name:SbrLb;
	mso-style-parent:Lb2;
	margin-top:0in;
	margin-right:14.0pt;
	margin-bottom:4.0pt;
	margin-left:28.0pt;
	text-indent:-14.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:28.0pt;
	background:#FFFFBA;
	mso-shading:windowtext;
	mso-pattern:gray-40 yellow;
	border:none;
	mso-border-alt:solid white 1.5pt;
	padding:0in;
	mso-padding-alt:14.0pt 14.0pt 14.0pt 14.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Tei, li.Tei, div.Tei
	{mso-style-name:Tei;
	margin-top:4.0pt;
	margin-right:1.5pt;
	margin-bottom:4.0pt;
	margin-left:15.5pt;
	text-align:right;
	line-height:9.0pt;
	mso-pagination:widow-orphan lines-together;
	border:none;
	mso-border-top-alt:solid windowtext .75pt;
	padding:0in;
	mso-padding-alt:1.0pt 0in 0in 0in;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.SbrLp, li.SbrLp, div.SbrLp
	{mso-style-name:SbrLp;
	mso-style-parent:SbrLb;
	margin-top:0in;
	margin-right:14.0pt;
	margin-bottom:4.0pt;
	margin-left:28.0pt;
	text-indent:-14.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:28.0pt;
	background:#FFFFBA;
	mso-shading:windowtext;
	mso-pattern:gray-40 yellow;
	border:none;
	mso-border-alt:solid white 1.5pt;
	padding:0in;
	mso-padding-alt:14.0pt 14.0pt 14.0pt 14.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.SbrEx, li.SbrEx, div.SbrEx
	{mso-style-name:SbrEx;
	mso-style-parent:Exl;
	margin-top:0in;
	margin-right:14.0pt;
	margin-bottom:0in;
	margin-left:14.0pt;
	margin-bottom:.0001pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:33.0pt 52.0pt 71.0pt 1.25in 109.0pt 128.0pt 147.0pt 166.0pt 185.0pt 204.0pt;
	background:#FFFFBA;
	mso-shading:windowtext;
	mso-pattern:gray-40 yellow;
	border:none;
	mso-border-alt:solid white 1.5pt;
	padding:0in;
	mso-padding-alt:14.0pt 14.0pt 14.0pt 14.0pt;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Lucida Sans Typewriter";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.Exl2, li.Exl2, div.Exl2
	{mso-style-name:Exl2;
	mso-style-parent:Exl;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:28.0pt;
	margin-bottom:.0001pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:33.0pt 52.0pt 71.0pt 1.25in 109.0pt 128.0pt 147.0pt 166.0pt 185.0pt 204.0pt;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Lucida Sans Typewriter";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.Tes, li.Tes, div.Tes
	{mso-style-name:Tes;
	mso-style-parent:Le;
	mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	text-align:right;
	line-height:8.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Teh, li.Teh, div.Teh
	{mso-style-name:Teh;
	mso-style-parent:Leh;
	mso-style-next:"Heading 1";
	margin:0in;
	margin-bottom:.0001pt;
	text-align:right;
	line-height:4.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.SbrLe, li.SbrLe, div.SbrLe
	{mso-style-name:SbrLe;
	mso-style-parent:Le;
	mso-style-next:Sbrp;
	margin-top:0in;
	margin-right:14.0pt;
	margin-bottom:0in;
	margin-left:14.0pt;
	margin-bottom:.0001pt;
	text-align:right;
	line-height:8.0pt;
	mso-pagination:widow-orphan lines-together;
	background:#FFFFBA;
	mso-shading:windowtext;
	mso-pattern:gray-40 yellow;
	border:none;
	mso-border-alt:solid white 1.5pt;
	padding:0in;
	mso-padding-alt:14.0pt 14.0pt 14.0pt 14.0pt;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Tsyn, li.Tsyn, div.Tsyn
	{mso-style-name:Tsyn;
	mso-style-parent:Syn;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:14.0pt 21.0pt 28.0pt 35.0pt 42.0pt 49.0pt 56.0pt 63.0pt 70.0pt 77.0pt 84.0pt 91.0pt 98.0pt 105.0pt 112.0pt 119.0pt 1.75in 133.0pt 140.0pt 147.0pt 154.0pt 161.0pt 168.0pt 175.0pt 182.0pt 189.0pt 196.0pt 203.0pt 210.0pt 217.0pt 224.0pt 231.0pt 238.0pt 245.0pt 3.5in 259.0pt 266.0pt 273.0pt 280.0pt 287.0pt 294.0pt 301.0pt 308.0pt 315.0pt 322.0pt 329.0pt 336.0pt 343.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
 /* Page Definitions */
@page
	{mso-facing-pages:yes;}
@page Section1
	{size:8.5in 11.0in;
	margin:-127.0pt 76.5pt -115.0pt 166.5pt;
	mso-header-margin:99.5pt;
	mso-footer-margin:.25in;
	mso-gutter-margin:21.0pt;
	mso-page-numbers:105;
	mso-title-page:yes;
	mso-even-header:url("./Chap_05_files/header.htm") eh1;
	mso-header:url("./Chap_05_files/header.htm") h1;
	mso-even-footer:url("./Chap_05_files/header.htm") ef1;
	mso-footer:url("./Chap_05_files/header.htm") f1;
	mso-first-header:url("./Chap_05_files/header.htm") fh1;
	mso-first-footer:url("./Chap_05_files/header.htm") ff1;
	mso-paper-source:1;}
div.Section1
	{page:Section1;}
-->
</style>
	</head>

	<body lang="EN-US" style="tab-interval:14.0pt">
		<div class="Section1">
			<p class="Cn" style="margin-left:0in">Chapter <span style='mso-field-code:"SEQ CHAPTER \\R 5"'>5</span></p>
			<div style="mso-element:frame;mso-element-wrap:no-wrap-beside">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" width="448" height="164">
					<tr>
						<td valign="top" align="left" height="164" style="padding-top:0in;padding-right:
  0in;padding-bottom:0in;padding-left:0in">
							<p class="Ch">Defining and Using Complex<br>
							Data Types</p>
						</td>
					</tr>
				</table>
			</div>
			<![if !supportTextWrap]><br clear="ALL">
			<![endif]>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1258&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">With the complex data types available in MASM 6.1<span style="letter-spacing:-1.75pt"> </span>&#151;<span style="letter-spacing:-1.75pt"> </span>arrays, strings, records, structures, and unions<span style="letter-spacing:-1.75pt"> </span>&#151;<span style="letter-spacing:-1.75pt"> </span>you can access data as a unit or as individual elements that make up a unit. The individual elements of complex data types are often the integer types discussed in Chapter 4, &#147;Defining and Using Simple Data Types.&#148;</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1259&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">&#147;Arrays and Strings&#148; reviews how to declare, reference, and initialize arrays and strings. This section summarizes the general steps needed to process arrays and strings and describes the MASM instructions for moving, comparing, searching, loading, and storing.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1260&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">&#147;Structures and Unions&#148; covers similar information for structures and unions: how to declare structure and union types, how to define structure and union variables, and how to reference structures and unions and their fields.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1261&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">&#147;Records&#148; explains how to declare record types, define record variables, and use record operators.</p>
			<h1 style="margin-left:0in">Arrays and Strings</h1>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Arrays:defined&quot;<span style='mso-hide:none'> \z &quot;COMPLW.DOC-1001&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Strings:defined&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1002&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;Data types:arrays&quot; \t
&quot;See Arrays&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1003&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;Data types:strings&quot; \t
&quot;See Strings&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1004&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">An array is a sequential collection of variables, all of the same size and type, called &#147;elements.&#148; A string is an array of characters. For example, in the string &#147;ABC,&#148; each letter is an element. You can access the elements in an array or string relative to the first element. This section explains how to handle arrays and strings in your programs.</p>
			<h2 style="margin-left:0in">Declaring and Referencing Arrays</h2>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Strings:defined&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1005&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Arrays:declaring&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1006&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Arrays:declaring&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1007&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Arrays:accessing elements
in&quot;<span style='mso-hide:none'> \z &quot;COMPLW.DOC-1008&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Arrays:multiple-line
declarations for&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1009&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Array elements occupy memory contiguously, so a program references each element relative to the start of the array. To declare an array, supply a label name, the element type, and a series of initializing values or <b style="mso-bidi-font-weight:normal">?</b> placeholders. The following examples declare the arrays <span style='font-size:9.5pt;font-family:
"Lucida Sans Typewriter"'>warray</span> and <span style='font-size:9.5pt;
font-family:"Lucida Sans Typewriter"'>xarray</span>:</p>
			<p class="Ex" style="page-break-after:auto">warray<span style="mso-spacerun:
yes">&nbsp; </span>WORD<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>1, 2, 3, 4<br>
			xarray<span style="mso-spacerun: yes">&nbsp; </span>DWORD<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>0FFFFFFFFh, 789ABCDEh</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1262&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1263&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Initializer lists of array declarations can span multiple lines. The first initializer must appear on the same line as the data type, all entries must be initialized, and, if you want the array to continue to the new line, the line must end with a comma. These examples show legal multiple-line array declarations:</p>
			<p class="Ex">big<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>BYTE<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>21, 22, 23, 24, 25,<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>26, 27, 28<span style="mso-spacerun: yes">&nbsp; </span><br>
			<br>
			somelist<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>WORD<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>10,<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>20,<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>30<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1264&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">If you do not use the <b style="mso-bidi-font-weight:normal">LENGTHOF</b> and <b style="mso-bidi-font-weight:normal">SIZEOF</b> operators discussed later in this section, an array may span more than one logical line, although a separate type declaration is needed on each logical line:</p>
			<p class="Ex">var1<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>BYTE<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>10, 20, 30<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>BYTE<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>40, 50, 60<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>BYTE<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>70, 80, 90<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<h4>The DUP Operator</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
Operators:DUP \t &quot;See DUP operator&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1010&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;DUP operator:arrays, with&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1011&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">You can also declare an array with the <b style="mso-bidi-font-weight:
normal">DUP</b> operator. This operator works with any of the data allocation directives described in &#147;Allocating Memory for Integer Variables&#148; in Chapter 4. In the syntax</p>
			<p class="Syn"><i style="mso-bidi-font-style:normal">count</i> <b style="mso-bidi-font-weight:normal">DUP</b> <b style="mso-bidi-font-weight:
normal">(</b><i style="mso-bidi-font-style:normal">initialvalue</i> <span style="letter-spacing:-1.5pt">[</span>[<b style="mso-bidi-font-weight:normal">,</b> <i style="mso-bidi-font-style:normal">initialvalue</i><span style="letter-spacing:
-1.5pt">]</span>]...<b style="mso-bidi-font-weight:normal">)</b></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Arrays:DUP, declaring with&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1012&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;( ) (parentheses)&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1013&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Parentheses [( )]&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1014&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;( ) (parentheses)&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1015&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">the <i style="mso-bidi-font-style:normal">count</i> value sets the number of times to repeat all values within the parentheses. The <i style="mso-bidi-font-style:normal">initialvalue</i> can be an integer, character constant, or another <b style="mso-bidi-font-weight:normal">DUP</b> operator, and must always appear within parentheses. For example, the statement</p>
			<p class="Ex">barray<span style="mso-spacerun: yes">&nbsp; </span>BYTE<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>5 DUP (1)<br style="mso-special-character:
line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1265&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">allocates the integer 1 five times for a total of 5 bytes.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1266&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The following examples show various ways to allocate data elements with the <b style="mso-bidi-font-weight:normal">DUP</b> operator:</p>
			<p class="Ex" style="page-break-after:auto">array<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>DWORD<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>10 DUP (1)<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; 10 doublewords<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>initialized to 1<br>
			buffer<span style="mso-spacerun: yes">&nbsp; </span>BYTE<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>256 DUP (?)<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; 256-byte buffer<br>
			<br>
			masks<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>BYTE<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>20 DUP (040h, 020h, 04h, 02h) ; 80-byte buffer<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>with bit masks<br>
			three_d DWORD<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>5 DUP (5 DUP (5 DUP (0)))<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>; 125 doublewords<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>initialized to 0<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<h4>Referencing Arrays</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1267&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Each element in an array is referenced with an index number, beginning with zero. The array index appears in brackets after the array name, as in</p>
			<p class="Ex">array[9]<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1268&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Assembly-language indexes differ from indexes in high-level languages, where the index number always corresponds to the element&#146;s position. In C, for example, <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>array[9]</span> references the array&#146;s tenth element, regardless of whether each element is 1 byte or 8 bytes in size.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1269&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">In assembly language, an element&#146;s index refers to the number of bytes between the element and the start of the array. This distinction can be ignored for arrays of byte-sized elements, since an element&#146;s position number matches its index. For example, defining the array</p>
			<p class="Ex">prime<span style="mso-spacerun: yes">&nbsp; </span>BYTE 1, 3, 5, 7, 11, 13, 17<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1270&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">gives a value of 1 to <span style='font-size:9.5pt;
font-family:"Lucida Sans Typewriter"'>prime[0]</span>, a value of 3 to <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>prime[1]</span>, and so forth.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1271&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">However, in arrays with elements larger than 1 byte, index numbers (except zero) do not correspond to an element&#146;s position. You must multiply an element&#146;s position by its size to determine the element&#146;s index. Thus, for the array</p>
			<p class="Ex">wprime<span style="mso-spacerun: yes">&nbsp; </span>WORD 1, 3, 5, 7, 11, 13, 17<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Scaling factor&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1016&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Brackets ([ ])&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1017&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;[ ] (brackets)&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1018&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal"><span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>wprime[4]</span> represents the third element (5), which is 4 bytes from the beginning of the array. Similarly, the expression <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>wprime[6]</span> represents the fourth element (7) and <span style='font-size:9.5pt;font-family:
"Lucida Sans Typewriter"'>wprime[10]</span> represents the sixth element (13).</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1272&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The following example determines an index at run time. It multiplies the position by two (the size of a word element) by shifting it left:</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>si, cx<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; CX holds position number<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>shl<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>si, 1<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Scale for word referencing<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, wprime[si]<span style="mso-spacerun: yes">&nbsp; </span>; Move element into AX<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1273&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The offset required to access an array element can be calculated with the following formula:</p>
			<p class="index"><!--[if supportFields]><i style='mso-bidi-font-style:normal'><span
style='mso-element:field-begin'></span>xe &quot;aa&quot; \z
&quot;COMPLW.DOC-1274&quot;</i><![endif]-->
			<!--[if supportFields]><i
style='mso-bidi-font-style:normal'><span style='mso-element:field-end'></span></i><![endif]-->
			</p>
			<p class="MsoNormal"><i style="mso-bidi-font-style:normal">n</i>th element of array = array[(<i style="mso-bidi-font-style:normal">n</i>-1) <sub>*</sub> size of element]</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1275&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Referencing an array element by distance rather than position is not difficult to master, and is actually very consistent with how assembly language works. Recall that a variable name is a symbol that represents the contents of a particular address in memory. Thus, if the array <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>wprime</span> begins at address DS:2400h, the reference <span style='font-size:9.5pt;
font-family:"Lucida Sans Typewriter"'>wprime[6]</span> means to the processor &#147;the word value contained in the DS segment at offset 2400h-plus-6-bytes.&#148;</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1276&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">As described in &#147;Direct Memory Operands,&#148; Chapter 3, you can substitute the plus operator (<b style="mso-bidi-font-weight:normal">+</b>) for brackets, as in:</p>
			<p class="Ex">wprime[9]<br>
			wprime+9<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Arrays:referencing&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1019&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Since brackets simply add a number to an address, you don&#146;t need them when referencing the first element. Thus, <span style='font-size:
9.5pt;font-family:"Lucida Sans Typewriter"'>wprime</span> and <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>wprime[0]</span> both refer to the first element of the array <span style='font-size:9.5pt;
font-family:"Lucida Sans Typewriter"'>wprime</span>.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Instructions:BOUND&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1020&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;BOUND instruction&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1021&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">If your program runs only on an 80186 processor or higher, you can use the <b style="mso-bidi-font-weight:normal">BOUND</b> instruction to verify that an index value is within the bounds of an array. For a description of <b style="mso-bidi-font-weight:normal">BOUND</b>, see the <i style="mso-bidi-font-style:normal">Reference.</i></p>
			<h4>LENGTHOF, SIZEOF, and TYPE for Arrays</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Arrays:length of&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1022&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Arrays:number of bytes in&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1023&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Arrays:size of elements&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1024&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">When applied to arrays, the <b style="mso-bidi-font-weight:
normal">LENGTHOF</b>, <b style="mso-bidi-font-weight:normal">SIZEOF</b>, and <b style="mso-bidi-font-weight:normal">TYPE</b> operators return information about the length and size of the array and about the type of the<br>
			initializers.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
Operators \t &quot;See LENGTHOF operator&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1025&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe Operators:SIZEOF \t &quot;See SIZEOF
operator&quot;<span style='mso-hide:none'> \z &quot;COMPLW.DOC-1026&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe Operators:TYPE \t &quot;See TYPE
operator&quot;<span style='mso-hide:none'> \z &quot;COMPLW.DOC-1027&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;LENGTHOF operator:structures,
defining&quot;<span style='mso-hide:none'> \z &quot;COMPLW.DOC-1028&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;SIZEOF operator:arrays,
with&quot;<span style='mso-hide:none'> \z &quot;COMPLW.DOC-1029&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;TYPE operator:arrays,
with&quot;<span style='mso-hide:none'> \z &quot;COMPLW.DOC-1030&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The <b style="mso-bidi-font-weight:normal">LENGTHOF</b> operator returns the number of elements in the array. The <b style="mso-bidi-font-weight:
normal">SIZEOF</b> operator returns the number of bytes used by the initializers in the array definition. <b style="mso-bidi-font-weight:normal">TYPE</b> returns the size of the elements of the array. The following examples illustrate these operators:</p>
			<p class="Ex">array<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>WORD<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>40 DUP (5)<br>
			<br>
			larray<span style="mso-spacerun: yes">&nbsp; </span>EQU<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>LENGTHOF array<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>; 40 elements<br>
			sarray<span style="mso-spacerun: yes">&nbsp; </span>EQU<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>SIZEOF<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>array<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>; 80 bytes<br>
			tarray<span style="mso-spacerun: yes">&nbsp; </span>EQU<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>TYPE<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>array<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp; </span>2 bytes per element<br>
			<br>
			num<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>DWORD<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>4, 5, 6, 7, 8, 9, 10, 11<br>
			<br>
			lnum<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>EQU<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>LENGTHOF num<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp; </span>8 elements<br>
			snum<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>EQU<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>SIZEOF<span style="mso-spacerun: yes">&nbsp; </span><span style="mso-spacerun: yes">&nbsp;</span>num<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; 32 bytes<br>
			tnum<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>EQU<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>TYPE<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>num<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp; </span>4 bytes per element<br>
			<br>
			warray<span style="mso-spacerun: yes">&nbsp; </span>WORD<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>40 DUP (40 DUP (5))<span style="mso-spacerun: yes">&nbsp; </span><br>
			<br>
			len<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>EQU<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>LENGTHOF warray<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>; 1600 elements<br>
			siz<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>EQU<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>SIZEOF<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>warray<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>; 3200 bytes<br>
			typ<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>EQU<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>TYPE<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>warray<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>2 bytes per element<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<h2 style="margin-left:0in">Declaring and Initializing Strings</h2>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1277&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">A string is an array of characters. Initializing a string like <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>&quot;Hello, there&quot;</span> allocates and initializes 1 byte for each character in the string. An initialized string can be no longer than 255 characters.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Strings:declaring&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1031&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Strings:initializing&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1032&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Strings:multiple-line
declarations for&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1033&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">For data directives other than <b style="mso-bidi-font-weight:
normal">BYTE</b>, a string may initialize only the first element. The initializer value must fit into the specified size and conform to the expression word size in effect (see &#147;Integer Constants and Constant Expressions&#148; in Chapter 1), as shown in these examples:</p>
			<p class="Ex">wstr<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>WORD<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>&quot;OK&quot;<br>
			dstr<span style="mso-spacerun: yes">&nbsp;&nbsp; </span><span style="mso-spacerun:
yes">&nbsp;</span>DWORD<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>&quot;DATA&quot;<span style="mso-spacerun: yes">&nbsp; </span>; Legal under EXPR32 only<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1278&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">As with arrays, string initializers can span multiple lines. The line must end with a comma if you want the string to continue to the next line.</p>
			<p class="Ex">str1<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>BYTE<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>&quot;This is a long string that does not &quot;,<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&quot;fit on one line.&quot;<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1279&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">You can also have an array of pointers to strings.</p>
			<p class="Ex">PBYTE<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>TYPEDEF PTR BYTE<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.DATA<br>
			msg1<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>BYTE<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>&quot;Operation completed successfully.&quot;<br>
			msg2<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>BYTE<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>&quot;Unknown command&quot;<br>
			msg3<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>BYTE<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>&quot;File not found&quot;<br>
			pmsg<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>PBYTE<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>msg1<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; pmsg is an array<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>PBBYTE<span style="mso-spacerun:
yes">&nbsp; </span>msg2<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>of pointers to<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>PBYTE<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>msg3<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>above messages<br style="mso-special-character:
line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;' (single quotation mark)&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1034&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;\&quot; (double quotation
marks)&quot;<span style='mso-hide:none'> \z &quot;COMPLW.DOC-1035&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Quotation marks (' or
\&quot;)&quot;<span style='mso-hide:none'> \z &quot;COMPLW.DOC-1036&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Double quotation marks
(\&quot;)&quot;<span style='mso-hide:none'> \z &quot;COMPLW.DOC-1037&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Single quotation mark (')&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1038&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Strings must be enclosed in single (<b style="mso-bidi-font-weight:
normal">'</b>) or double (<b style="mso-bidi-font-weight:normal">&quot;</b>) quotation marks. To put a single quotation mark inside a string enclosed by single quotation marks, use two single quotation marks. Likewise, if you need quotation marks inside a string enclosed by double quotation marks, use two sets. These examples show the various uses of quotation marks:</p>
			<p class="Ex">char<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>BYTE<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>'a'<br>
			message BYTE<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>&quot;That's the message.&quot;<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; That's the message.<br>
			warn<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>BYTE<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>'Can''t find file.'<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Can't find file.<br>
			string<span style="mso-spacerun: yes">&nbsp; </span>BYTE<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>&quot;This &quot;&quot;value&quot;&quot; not found.&quot; ; This &quot;value&quot; not found.<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1280&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">You can always use single quotation marks inside a string enclosed by double quotation marks, as the initialization for <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>message</span> shows, and vice versa.</p>
			<h4>The ? Initializer</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;? (question mark initializer):array elements&quot;<span style='mso-hide:
none'> \z &quot;COMPLW.DOC-1039&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Question mark initializer ( ?
):array elements&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1040&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">You do not have to initialize an array. The<b style="mso-bidi-font-weight:normal"> ?</b> operator lets you allocate space for the array without placing specific values in it. Object files contain records for initialized data. Unspecified space left in the object file means that no records contain initialized data for that address. The actual values stored in arrays allocated with<b style="mso-bidi-font-weight:normal"> ?</b> depend on certain conditions. The <b style="mso-bidi-font-weight:normal">?</b> initializer is treated as a zero in a <b style="mso-bidi-font-weight:normal">DUP</b> statement that contains initializers in addition to the <b style="mso-bidi-font-weight:
normal">?</b> initializer. If the <b style="mso-bidi-font-weight:normal">?</b> initializer does not appear in a <b style="mso-bidi-font-weight:normal">DUP</b> statement, or if the <b style="mso-bidi-font-weight:normal">DUP</b> statement contains only <b style="mso-bidi-font-weight:normal">?</b> initializers, the assembler leaves the allocated space unspecified.</p>
			<h4>LENGTHOF, SIZEOF, and TYPE for Strings</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Strings:length of&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1041&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Strings:size of&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1042&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Strings:type of&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1043&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe Operators:LENGTHOF \t &quot;See
LENGTHOF operator&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1044&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe Operators:SIZEOF \t &quot;See SIZEOF
operator&quot;<span style='mso-hide:none'> \z &quot;COMPLW.DOC-1045&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe Operators:TYPE \t &quot;See TYPE
operator&quot;<span style='mso-hide:none'> \z &quot;COMPLW.DOC-1046&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;LENGTHOF operator:number of
items, returning&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1047&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;SIZEOF operator:strings,
with&quot;<span style='mso-hide:none'> \z &quot;COMPLW.DOC-1048&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;TYPE operator:string,
with&quot;<span style='mso-hide:none'> \z &quot;COMPLW.DOC-1049&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Because strings are simply arrays of byte elements, the <b style="mso-bidi-font-weight:normal">LENGTHOF</b>, <b style="mso-bidi-font-weight:
normal">SIZEOF</b>, and <b style="mso-bidi-font-weight:normal">TYPE</b> operators behave as you would expect, as illustrated in this example:</p>
			<p class="Ex">msg<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>BYTE<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>&quot;This string extends &quot;,<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&quot;over three &quot;,<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&quot;lines.&quot;<br>
			<br>
			lmsg<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>EQU<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>LENGTHOF msg<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>; 37 elements<br>
			smsg<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>EQU<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>SIZEOF<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>msg<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>; 37 bytes<br>
			tmsg<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>EQU<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>TYPE<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>msg<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp; </span>1 byte per element<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<h2 style="margin-left:0in">Processing Strings</h2>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Arrays:instructions for processing&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1050&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE
&quot;Strings:instructions:processing, for&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1051&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:MOVS&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1052&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:STOS&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1053&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:CMPS&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1054&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:LODS&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1055&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:SCAS&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1056&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;MOVS instruction&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1057&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;STOS instruction&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1058&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;CMPS instruction&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1059&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;LODS instruction&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1060&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;SCAS instruction&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1061&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;REP instruction&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1062&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;REPE instruction&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1063&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;REPZ instruction&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1064&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;REPNE instruction&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1065&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;REPNZ instruction&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1066&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The 8086-family instruction set has seven string instructions for fast and efficient processing of entire strings and arrays. The term &#147;string&#148; in &#147;string instructions&#148; refers to a sequence of elements, not just character strings. These instructions work directly only on arrays of bytes and words on the 8086&#150;80486 processors, and on arrays of bytes, words, and doublewords on the 80386/486 processors. Processing larger elements must be done indirectly with loops.</p>
			<p class="MsoNormal">The following list gives capsule descriptions of the five instructions discussed in this section.</p>
			<table border="0" cellspacing="0" cellpadding="0" style="margin-left:.4pt;border-collapse:
 collapse;mso-padding-alt:0in 0in 0in 0in">
				<tr>
					<td width="80" valign="top" style="width:60.0pt;padding:0in 0in 0in 0in">
						<p class="Thf">Instruction</p>
						<p class="Thf"></p>
					</td>
					<td width="384" valign="top" style="width:4.0in;padding:0in 0in 0in 0in">
						<p class="Th">Description</p>
						<p class="Th"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="464" colspan="2" valign="top" style="width:348.0pt;padding:0in 0in 0in 0in">
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="80" valign="top" style="width:60.0pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">MOVS</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="384" valign="top" style="width:4.0in;padding:0in 0in 0in 0in">
						<p class="Tp"><span style="font-size:10.0pt">Copies a string from one location to another</span></p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
				</tr>
				<tr>
					<td width="80" valign="top" style="width:60.0pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">STOS</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="384" valign="top" style="width:4.0in;padding:0in 0in 0in 0in">
						<p class="Tp"><span style="font-size:10.0pt">Stores contents of the accumulator register to a string</span></p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="80" valign="top" style="width:60.0pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">CMPS</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="384" valign="top" style="width:4.0in;padding:0in 0in 0in 0in">
						<p class="Tp"><span style="font-size:10.0pt">Compares one string with another</span></p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="80" valign="top" style="width:60.0pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">LODS</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="384" valign="top" style="width:4.0in;padding:0in 0in 0in 0in">
						<p class="Tp"><span style="font-size:10.0pt">Loads values from a string to the accumulator register</span></p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="80" valign="top" style="width:60.0pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">SCAS</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="384" valign="top" style="width:4.0in;padding:0in 0in 0in 0in">
						<p class="Tp"><span style="font-size:10.0pt">Scans a string for a specified value</span></p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
			</table>
			<p class="Le"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Instructions:REP&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1067&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:REPE&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1068&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:REPZ&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1069&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:REPNE&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1070&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:REPNZ&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1071&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;REPE instruction&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1072&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;REPNE instruction&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1073&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;REPNZ instruction&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1074&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;REP instruction&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1075&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">All of these instructions use registers in a similar way and have a similar syntax. Most are used with the repeat instruction prefixes <b style="mso-bidi-font-weight:normal">REP</b>, <b style="mso-bidi-font-weight:
normal">REPE</b> (or <b style="mso-bidi-font-weight:normal">REPZ</b>), and <b style="mso-bidi-font-weight:normal">REPNE</b> (or <b style="mso-bidi-font-weight:
normal">REPNZ</b>). <b style="mso-bidi-font-weight:normal">REPZ</b> is a synonym for <b style="mso-bidi-font-weight:normal">REPE</b> (Repeat While Equal) and <b style="mso-bidi-font-weight:normal">REPNZ</b> is a synonym for <b style="mso-bidi-font-weight:normal">REPNE</b> (Repeat While Not Equal).</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1281&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">This section first explains the general procedures for using all string instructions. It then illustrates each instruction with an example.</p>
			<h3>Overview of String Instructions</h3>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1282&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The string instructions have specific requirements for the location of strings and the use of registers. To operate on any string, follow these three steps:</p>
			<p class="Ln1" style="margin-left:22.0pt"><span style="mso-tab-count:1"></span>1.<span style="mso-tab-count:1">&nbsp; </span>Set the direction flag to indicate the direction in which you want to process the string. The <b style="mso-bidi-font-weight:
normal">STD</b> instruction sets the flag, while <b style="mso-bidi-font-weight:
normal">CLD</b> clears it.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Strings:overview&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1076&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormalIndent">If the direction flag is clear, the string is processed upward (from low addresses to high addresses, which is from left to right through the string). If the direction flag is set, the string is processed downward (from high addresses to low addresses, or from right to left). Under MS-DOS, the direction flag is normally clear if your program has not changed it.</p>
			<p class="Ln1" style="margin-left:22.0pt"><span style="mso-tab-count:1"></span>2.<span style="mso-tab-count:1">&nbsp; </span>Load the number of iterations for the string instruction into the CX register.</p>
			<p class="MsoNormalIndent">If you want to process 100 elements in a string, move 100 into CX. If you wish the string instruction to terminate conditionally (for example, during a search when a match is found), load the maximum number of iterations that can be performed without an error.</p>
			<p class="Ln1" style="margin-left:22.0pt"><span style="mso-tab-count:1"></span>3.<span style="mso-tab-count:1">&nbsp; </span>Load the starting offset address of the source string into DS:SI and the starting address of the destination string into ES:DI. Some string instructions take only a destination or source, not both (see Table 5.1).</p>
			<p class="MsoNormalIndent">Normally, the segment address of the source string should be DS, but you can use a segment override to specify a different segment for the source operand. You cannot override the segment address for the destination string. Therefore, you may need to change the value of ES. For information on changing segment registers, see &#147;Programming Segmented Addresses&#148; in Chapter 3.</p>
			<div style="border:none;border-bottom:solid windowtext .75pt;padding:0in 0in 1.0pt 0in">
				<p class="Ns"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			</div>
			<div style="mso-element:frame;mso-element-wrap:around">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" height="16" align="left">
					<tr>
						<td valign="top" align="left" height="16" style="padding-top:0in;padding-right:
  6.5pt;padding-bottom:0in;padding-left:6.5pt">
							<p class="Nh">Note</p>
						</td>
					</tr>
				</table>
			</div>
			<p class="Np1">Although you can use a segment override on the source operand, a segment override combined with a repeat prefix can cause problems in certain situations on all processors except the 80386/486. If an interrupt occurs during the string operation, the segment override is lost and the rest of the string operation processes incorrectly. Segment overrides can be used safely when interrupts are turned off or with the 80386/486 processors.</p>
			<div style="border:none;border-top:solid windowtext .75pt;padding:1.0pt 0in 0in 0in">
				<p class="Ne"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			</div>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Instructions:MOVS&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1077&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:STOS&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1078&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:CMPS&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1079&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:LODS&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1080&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:SCAS&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1081&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;MOVS instruction&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1082&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;STOS instruction&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1083&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;CMPS instruction&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1084&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;LODS instruction&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1085&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;SCAS instruction&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1086&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">You can adapt these steps to the requirements of any particular string operation. The syntax for the string instructions is:</p>
			<p class="Syn" style="tab-stops:21.0pt 35.0pt 40.0pt 45.0pt 49.0pt 63.0pt 70.0pt 77.0pt 84.0pt 91.0pt 98.0pt 105.0pt 112.0pt 119.0pt 1.75in 133.0pt 140.0pt 147.0pt 154.0pt 161.0pt 168.0pt 175.0pt 182.0pt 189.0pt 196.0pt 203.0pt 210.0pt 217.0pt 224.0pt 231.0pt 238.0pt 245.0pt 3.5in 259.0pt 266.0pt 273.0pt 280.0pt 287.0pt 294.0pt 301.0pt 308.0pt 315.0pt 322.0pt 329.0pt 336.0pt 343.0pt"><span style="letter-spacing:-1.5pt">[</span>[<i style="mso-bidi-font-style:normal">prefix</i><span style="letter-spacing:-1.5pt">]</span>]<i style="mso-bidi-font-style:normal"><span style="mso-tab-count:1"> </span></i><b style="mso-bidi-font-weight:normal">CMPS</b><i style="mso-bidi-font-style:normal"> </i><span style="letter-spacing:-1.5pt">[</span>[<i style="mso-bidi-font-style:normal">segmentregister</i><b style="mso-bidi-font-weight:
normal">:</b><span style="letter-spacing:-1.5pt">]</span>]<i style="mso-bidi-font-style:
normal"> source, </i><span style="letter-spacing:-1.5pt">[</span>[<b style="mso-bidi-font-weight:normal">ES:</b><span style="letter-spacing:-1.5pt">]</span>]<i style="mso-bidi-font-style:normal"> destination<br>
			<span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></i><b style="mso-bidi-font-weight:
normal">LODS</b><i style="mso-bidi-font-style:normal"> </i><span style="letter-spacing:-1.5pt">[</span>[<i style="mso-bidi-font-style:normal">segmentregister</i><b style="mso-bidi-font-weight:normal">:</b><span style="letter-spacing:-1.5pt">]</span>]<i style="mso-bidi-font-style:normal"> source<a name="SynProblem"></a><br>
			</i><span style="letter-spacing:-1.5pt">[</span>[<i style="mso-bidi-font-style:
normal">prefix</i><span style="letter-spacing:-1.5pt">]</span>]<i style="mso-bidi-font-style:normal"> </i><b style="mso-bidi-font-weight:normal">MOVS</b><i style="mso-bidi-font-style:normal"> </i><span style="letter-spacing:-1.5pt">[</span>[<b style="mso-bidi-font-weight:normal">ES:</b><span style="letter-spacing:-1.5pt">]</span>]<i style="mso-bidi-font-style:normal"> destination, </i><span style="letter-spacing:
-1.5pt">[</span>[<i style="mso-bidi-font-style:normal">segmentregister</i><b style="mso-bidi-font-weight:normal">:</b><span style="letter-spacing:-1.5pt">]</span>]<i style="mso-bidi-font-style:normal"> source<br>
			</i><span style="letter-spacing:-1.5pt">[</span>[<i style="mso-bidi-font-style:
normal">prefix</i><span style="letter-spacing:-1.5pt">]</span>]<i style="mso-bidi-font-style:normal"> </i><b style="mso-bidi-font-weight:normal">SCAS</b><i style="mso-bidi-font-style:normal"> </i><span style="letter-spacing:-1.5pt">[</span>[<b style="mso-bidi-font-weight:normal">ES:</b><span style="letter-spacing:-1.5pt">]</span>]<i style="mso-bidi-font-style:normal"> destination<br>
			</i><span style="letter-spacing:-1.5pt">[</span>[<i style="mso-bidi-font-style:
normal">prefix</i><span style="letter-spacing:-1.5pt">]</span>]<i style="mso-bidi-font-style:normal"> </i><b style="mso-bidi-font-weight:normal">STOS</b><i style="mso-bidi-font-style:normal"> </i><span style="letter-spacing:-1.5pt">[</span>[<b style="mso-bidi-font-weight:normal">ES:</b><span style="letter-spacing:-1.5pt">]</span>]<i style="mso-bidi-font-style:normal"> destination<o:p></o:p></i></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1283&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Some instructions have special forms for byte, word, or doubleword operands. If you use the form of the instruction that ends in <b style="mso-bidi-font-weight:normal">B</b> (<b style="mso-bidi-font-weight:normal">BYTE</b>), <b style="mso-bidi-font-weight:normal">W</b> (<b style="mso-bidi-font-weight:
normal">WORD</b>), or <b style="mso-bidi-font-weight:normal">D</b> (<b style="mso-bidi-font-weight:normal">DWORD</b>) with <b style="mso-bidi-font-weight:
normal">LODS</b>, <b style="mso-bidi-font-weight:normal">SCAS</b>, and <b style="mso-bidi-font-weight:normal">STOS</b>, the assembler knows whether the element is in the AL, AX, or EAX register. Therefore, these instruction forms do not require operands.</p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Strings:instructions:requirements (table)&quot;<span style='mso-hide:
none'> \z &quot;COMPLW.DOC-1087&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:MOVS&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1088&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:STOS&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1089&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:CMPS&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1090&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:LODS&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1091&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:SCAS&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1092&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;MOVS instruction&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1093&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;STOS instruction&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1094&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;CMPS instruction&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1095&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;LODS instruction&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1096&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;SCAS instruction&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1097&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Table 5.1 lists each string instruction with the type of repeat prefix it uses and indicates whether the instruction works on a source, a destination, or both.</p>
			<p class="Tt" style="tab-stops:348.05pt">Table 5.1<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>Requirements for String Instructions</p>
			<table border="0" cellspacing="0" cellpadding="0" style="margin-left:.4pt;border-collapse:
 collapse;mso-padding-alt:0in 0in 0in 0in">
				<tr>
					<td width="464" colspan="4" valign="top" style="width:348.05pt;padding:0in 0in 0in 0in">
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
				</tr>
				<tr>
					<td width="70" valign="top" style="width:52.6pt;padding:0in 0in 0in 0in">
						<p class="Thf">Instruction</p>
						<p class="Thf"></p>
					</td>
					<td width="99" valign="top" style="width:74.2pt;padding:0in 0in 0in 0in">
						<p class="Th">Repeat Prefix</p>
						<p class="Th"></p>
					</td>
					<td width="128" valign="top" style="width:96.05pt;padding:0in 0in 0in 0in">
						<p class="Th">Source/Destination</p>
						<p class="Th"></p>
					</td>
					<td width="167" valign="top" style="width:125.2pt;padding:0in 0in 0in 0in">
						<p class="Th">Register Pair</p>
						<p class="Th"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="464" colspan="4" valign="top" style="width:348.05pt;padding:0in 0in 0in 0in">
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="70" valign="top" style="width:52.6pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">MOVS</b></p>
						<p class="Tpf"></p>
					</td>
					<td width="99" valign="top" style="width:74.2pt;padding:0in 0in 0in 0in">
						<p class="Tp"><b style="mso-bidi-font-weight:normal">REP</b></p>
						<p class="Tp"></p>
					</td>
					<td width="128" valign="top" style="width:96.05pt;padding:0in 0in 0in 0in">
						<p class="Tp">Both</p>
						<p class="Tp"></p>
					</td>
					<td width="167" valign="top" style="width:125.2pt;padding:0in 0in 0in 0in">
						<p class="Tp">DS:SI, ES:DI</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
				</tr>
				<tr>
					<td width="70" valign="top" style="width:52.6pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">SCAS</b></p>
						<p class="Tpf"></p>
					</td>
					<td width="99" valign="top" style="width:74.2pt;padding:0in 0in 0in 0in">
						<p class="Tp"><b style="mso-bidi-font-weight:normal">REPE/REPNE</b></p>
						<p class="Tp"></p>
					</td>
					<td width="128" valign="top" style="width:96.05pt;padding:0in 0in 0in 0in">
						<p class="Tp">Destination</p>
						<p class="Tp"></p>
					</td>
					<td width="167" valign="top" style="width:125.2pt;padding:0in 0in 0in 0in">
						<p class="Tp">ES:DI</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="70" valign="top" style="width:52.6pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">CMPS</b></p>
						<p class="Tpf"></p>
					</td>
					<td width="99" valign="top" style="width:74.2pt;padding:0in 0in 0in 0in">
						<p class="Tp"><b style="mso-bidi-font-weight:normal">REPE/REPNE</b></p>
						<p class="Tp"></p>
					</td>
					<td width="128" valign="top" style="width:96.05pt;padding:0in 0in 0in 0in">
						<p class="Tp">Both</p>
						<p class="Tp"></p>
					</td>
					<td width="167" valign="top" style="width:125.2pt;padding:0in 0in 0in 0in">
						<p class="Tp">DS:SI, ES:DI</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="70" valign="top" style="width:52.6pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">LODS</b></p>
						<p class="Tpf"></p>
					</td>
					<td width="99" valign="top" style="width:74.2pt;padding:0in 0in 0in 0in">
						<p class="Tp">None</p>
						<p class="Tp"></p>
					</td>
					<td width="128" valign="top" style="width:96.05pt;padding:0in 0in 0in 0in">
						<p class="Tp">Source</p>
						<p class="Tp"></p>
					</td>
					<td width="167" valign="top" style="width:125.2pt;padding:0in 0in 0in 0in">
						<p class="Tp">DS:SI</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="70" valign="top" style="width:52.6pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">STOS</b></p>
						<p class="Tpf"></p>
					</td>
					<td width="99" valign="top" style="width:74.2pt;padding:0in 0in 0in 0in">
						<p class="Tp"><b style="mso-bidi-font-weight:normal">REP</b></p>
						<p class="Tp"></p>
					</td>
					<td width="128" valign="top" style="width:96.05pt;padding:0in 0in 0in 0in">
						<p class="Tp">Destination</p>
						<p class="Tp"></p>
					</td>
					<td width="167" valign="top" style="width:125.2pt;padding:0in 0in 0in 0in">
						<p class="Tp">ES:DI</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="70" valign="top" style="width:52.6pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">INS</b></p>
						<p class="Tpf"></p>
					</td>
					<td width="99" valign="top" style="width:74.2pt;padding:0in 0in 0in 0in">
						<p class="Tp"><b style="mso-bidi-font-weight:normal">REP</b></p>
						<p class="Tp"></p>
					</td>
					<td width="128" valign="top" style="width:96.05pt;padding:0in 0in 0in 0in">
						<p class="Tp">Destination</p>
						<p class="Tp"></p>
					</td>
					<td width="167" valign="top" style="width:125.2pt;padding:0in 0in 0in 0in">
						<p class="Tp">ES:DI</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="70" valign="top" style="width:52.6pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">OUTS</b></p>
						<p class="Tpf"></p>
					</td>
					<td width="99" valign="top" style="width:74.2pt;padding:0in 0in 0in 0in">
						<p class="Tp"><b style="mso-bidi-font-weight:normal">REP</b></p>
						<p class="Tp"></p>
					</td>
					<td width="128" valign="top" style="width:96.05pt;padding:0in 0in 0in 0in">
						<p class="Tp">Source</p>
						<p class="Tp"></p>
					</td>
					<td width="167" valign="top" style="width:125.2pt;padding:0in 0in 0in 0in">
						<p class="Tp">DS:SI</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
			</table>
			<div style="border:none;border-top:solid windowtext .75pt;padding:1.0pt 0in 0in 0in">
				<p class="Te"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			</div>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1284&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The repeat prefix causes the instruction that follows it to repeat for the number of times specified in the count register or until a condition becomes true. After each iteration, the instruction increments or decrements SI and DI so that it points to the next array element. The direction flag determines whether SI and DI are incremented (flag clear) or decremented (flag set). The size of the instruction determines whether SI and DI are altered by 1, 2, or 4 bytes each time.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;REP instruction&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1098&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;REPE instruction&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1099&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;REPZ instruction&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1100&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;REPNE instruction&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1101&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;REPNZ instruction&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1102&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:REP&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1103&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:REPE&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1104&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:REPZ&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1105&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:REPNE&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1106&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:REPNZ&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1107&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Each prefix governs the number of repetitions as follows:</p>
			<table border="0" cellspacing="0" cellpadding="0" style="margin-left:.4pt;border-collapse:
 collapse;mso-padding-alt:0in 0in 0in 0in">
				<tr>
					<td width="98" valign="top" style="width:73.15pt;padding:0in 0in 0in 0in">
						<p class="Thf">Prefix</p>
						<p class="Thf"></p>
					</td>
					<td width="375" valign="top" style="width:281.55pt;padding:0in 0in 0in 0in">
						<p class="Th">Description</p>
						<p class="Th"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="473" colspan="2" valign="top" style="width:354.7pt;padding:0in 0in 0in 0in">
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
				</tr>
				<tr>
					<td width="98" valign="top" style="width:73.15pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">REP</b></p>
						<p class="Tpf"></p>
					</td>
					<td width="375" valign="top" style="width:281.55pt;padding:0in 0in 0in 0in">
						<p class="Tp">Repeats instruction CX times</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
				</tr>
				<tr>
					<td width="98" valign="top" style="width:73.15pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">REPE</b>, <b style="mso-bidi-font-weight:normal">REPZ</b></p>
						<p class="Tpf"></p>
					</td>
					<td width="375" valign="top" style="width:281.55pt;padding:0in 0in 0in 0in">
						<p class="Tp">Repeats instruction maximum CX times while values are equal</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="98" valign="top" style="width:73.15pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal">REPNE</b>, <b style="mso-bidi-font-weight:normal">REPNZ</b></p>
						<p class="Tpf"></p>
					</td>
					<td width="375" valign="top" style="width:281.55pt;padding:0in 0in 0in 0in">
						<p class="Tp">Repeats instruction maximum CX times while values are not equal</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
			</table>
			<p class="Le"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1285&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The prefixes apply to only one string instruction at a time. To repeat a block of instructions, use a loop construction. (See &#147;Loops&#148; in Chapter 7.)</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1286&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">At run time, if a string instruction is preceded by a repeat sequence, the processor:</p>
			<p class="Ln1" style="margin-left:22.0pt"><span style="mso-tab-count:1"></span>1.<span style="mso-tab-count:1">&nbsp; </span>Checks the CX register and exits if CX is 0.</p>
			<p class="Ln1" style="margin-left:22.0pt"><span style="mso-tab-count:1"></span>2.<span style="mso-tab-count:1">&nbsp; </span>Performs the string operation once.</p>
			<p class="Ln1" style="margin-left:22.0pt"><span style="mso-tab-count:1"></span>3.<span style="mso-tab-count:1">&nbsp; </span>Increases SI and/or DI if the direction flag is clear. Decreases SI and/or DI if the direction flag is set. The amount of increase or decrease is 1 for byte operations, 2 for word operations, and 4 for doubleword operations.</p>
			<p class="Ln1" style="margin-left:22.0pt"><span style="mso-tab-count:1"></span>4.<span style="mso-tab-count:1">&nbsp; </span>Decrements CX without modifying the flags.</p>
			<p class="Ln1" style="margin-left:22.0pt"><span style="mso-tab-count:1"></span>5.<span style="mso-tab-count:1">&nbsp; </span>Checks the zero flag (for <b style="mso-bidi-font-weight:
normal">SCAS</b> or <b style="mso-bidi-font-weight:normal">CMPS</b>) if the <b style="mso-bidi-font-weight:normal">REPE</b> or <b style="mso-bidi-font-weight:
normal">REPNE</b> prefix is used. If the repeat condition holds, loops back to step 1. Otherwise, the loop ends and execution proceeds to the next instruction.</p>
			<p class="Le"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1287&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">When the repeat loop ends, SI (or DI) points to the position following a match (when using <b style="mso-bidi-font-weight:normal">SCAS</b> or <b style="mso-bidi-font-weight:normal">CMPS</b>), so you need to decrement or increment DI or SI to point to the element where the last match occurred.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1288&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Although string instructions (except <b style="mso-bidi-font-weight:
normal">LODS</b>) are used most often with repeat prefixes, they can also be used by themselves. In these cases, the SI and/or DI registers are adjusted as specified by the direction flag and the size of operands.</p>
			<h3>Using String Instructions</h3>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1289&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">To use the 8086-family string instructions, follow the steps outlined in the previous section. Examples in this section illustrate each instruction.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1290&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">You can also use the techniques in this section with structures and unions, since arrays and strings can be fields in structures and unions. (See the section &#147;Structures and Unions,&#148; following.)</p>
			<h4>Moving Array Data</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Instructions:MOVS&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1108&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;MOVS instruction&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1109&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The <b style="mso-bidi-font-weight:normal">MOVS</b> instruction copies data from one area of memory to another. To move data, first load the count, source and destination addresses into the appropriate registers. Then use <b style="mso-bidi-font-weight:normal">REP</b> with the <b style="mso-bidi-font-weight:normal">MOVS</b> instruction.</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.MODEL<span style="mso-spacerun: yes">&nbsp; </span>small<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.DATA<br>
			source<span style="mso-spacerun: yes">&nbsp; </span>BYTE<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>10 DUP ('0123456789')<br>
			destin<span style="mso-spacerun: yes">&nbsp; </span>BYTE<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>100 DUP (?)<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.CODE<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, @data<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Load same segment<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ds, ax<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>to both DS<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>es, ax<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>and ES<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>cld<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Work upward<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>cx, LENGTHOF source ; Set iteration count to 100<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>si, OFFSET source<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>; Load address of source<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>di, OFFSET destin<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>; Load address of destination<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>rep<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>movsb<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Move 100 bytes<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<h4>Filling Arrays</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Instructions:STOS&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1110&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;STOS instruction&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1111&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The <b style="mso-bidi-font-weight:normal">STOS</b> instruction stores a specified value in each position of a string. The string is the destination, so it must be pointed to by ES:DI. The value to store must be in the accumulator.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1291&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The next example stores the character <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>'a'</span> in each byte of a 100-byte string, filling the entire string with &#147;aaaa....&#148; Notice how the code stores 50 words rather than</p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<p class="MsoNormal">100 bytes. This makes the fill operation faster by reducing the number of iterations. To fill an odd number of bytes, you need to adjust for the last byte.</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.MODEL<span style="mso-spacerun: yes">&nbsp; </span>small, C<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.DATA<br>
			destin<span style="mso-spacerun: yes">&nbsp; </span>BYTE<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>100 DUP (?)<br>
			ldestin EQU<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>(LENGTHOF destin) / 2<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.CODE<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Assume ES = DS<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>cld<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Work upward<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, 'aa'<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Load character to fill<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>cx, ldestin<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Load length of string<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>di, OFFSET destin<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>; Load address of destination<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>rep<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>stosw<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Store 'aa' into array<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<h4>Comparing Arrays</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Instructions:CMPS&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1112&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:CMPSB&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1113&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;CMPS instruction&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1114&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;CMPSB instruction&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1115&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;aa&quot; \z
&quot;COMPLW.DOC-1292&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The <b style="mso-bidi-font-weight:normal">CMPS</b> instruction compares two strings and points to the address after which a match or nonmatch occurs. If the values are the same, the zero flag is set. Either string can be considered the destination or the source unless a segment override is used. This example using <b style="mso-bidi-font-weight:normal">CMPSB</b> assumes that the strings are in different segments. Both segments must be initialized to the appropriate segment register.</p>
			<p class="Ex" style="page-break-after:auto"><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.MODEL<span style="mso-spacerun: yes">&nbsp; </span>large, C<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.DATA<br>
			string1 BYTE<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>&quot;The quick brown fox jumps over the lazy dog&quot;<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.FARDATA<br>
			string2 BYTE <span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;</span>&quot;The quick brown dog jumps over the lazy fox&quot;<br>
			lstring EQU<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>LENGTHOF string2<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.CODE<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, @data<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Load data segment<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ds, ax<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>into DS<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, @fardata<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Load far data segment<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>es, ax<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>into ES<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>cld<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Work upward<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>cx, lstring<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Load length of string<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>si, OFFSET string1<span style="mso-spacerun: yes">&nbsp; </span>; Load offset of string1<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp; </span><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>mov<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>di, OFFSET string2<span style="mso-spacerun: yes">&nbsp; </span>; Load offset of string2<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>repe<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>cmpsb<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Compare<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>je<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>allmatch<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Jump if all match<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			allmatch:<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Special case for all match<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<h4>Loading Data from Arrays</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;LODS instruction&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1116&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:LODS&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1117&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The <b style="mso-bidi-font-weight:normal">LODS</b> instruction loads a value from a string into the accumulator register. This instruction is not used with a repeat instruction prefix, since continually reloading the accumulator serves no purpose.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1293&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The code in this example loads, processes, and displays each byte in a string.</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.DATA<br>
			info<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>BYTE<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>0, 1, 2, 3, 4, 5, 6, 7, 8, 9<br>
			linfo<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>WORD<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>LENGTHOF info<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.CODE<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>cld<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Work upward<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>cx, linfo<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Load length<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>si, OFFSET info<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>; Load offset of source<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ah, 2<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Display character function<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="Ex" style="page-break-after:auto">get:<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span><br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>lodsb<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Get a character<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>add<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>al, '0'<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Convert to ASCII<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>dl, al<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Move to DL<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>int<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>21h<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Call DOS to display character<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>loop<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>get<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Repeat<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<h4>Searching Arrays</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;SCAS Instruction&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1118&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:SCAS&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1119&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The <b style="mso-bidi-font-weight:normal">SCAS</b> instruction compares the value pointed to by ES:DI with the value in the accumulator. If both values are the same, it sets the zero flag.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1294&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">A repeat prefix lets <b style="mso-bidi-font-weight:normal">SCAS</b> work on an entire string, scanning (from which <b style="mso-bidi-font-weight:
normal">SCAS</b> gets its name) for a particular value called the target. <b style="mso-bidi-font-weight:normal">REPNE SCAS</b> sets the zero flag if it finds the target value in the array. <b style="mso-bidi-font-weight:normal">REPE SCAS</b> sets the zero flag if the scanned array contains nothing but the target value.</p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1295&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">This example assumes that ES is not the same as DS and that the address of the string is stored in a pointer variable. The <b style="mso-bidi-font-weight:normal">LES</b> instruction loads the far address of the string into ES:DI.</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.DATA<br>
			string<span style="mso-spacerun: yes">&nbsp; </span>BYTE<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>&quot;The quick brown fox jumps over the lazy dog&quot;<br>
			pstring PBYTE<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>string<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Far pointer to string<br>
			lstring EQU<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>LENGTHOF string<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>; Length of string<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.CODE<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>cld<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Work upward<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>cx, lstring<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Load length of string<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>les<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>di, pstring<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Load address of string<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>al, 'z'<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="mso-spacerun: yes">&nbsp;&nbsp;</span>; Load character to find<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>repne<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>scasb<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Search<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>jne<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>notfound<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Jump if not found<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; ES:DI points to character<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>after first 'z'<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			notfound:<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Special case for not found<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<h3>Translating Data in Byte Arrays</h3>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Integers:translating&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1120&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:XLAT&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1121&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:XLATB&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1122&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;XLAT instruction&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1123&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;XLATB instruction&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1124&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The <b style="mso-bidi-font-weight:normal">XLAT</b> (Translate) instruction copies a byte from an array of bytes into the AL register. The instruction takes its name from its ability to translate an element&#146;s number into the element itself. For example, given the number 7, <b style="mso-bidi-font-weight:normal">XLAT</b> returns byte #7 from the array. The array may hold byte-sized integers or, very often, a table or list of characters. The syntax for <b style="mso-bidi-font-weight:normal">XLAT</b> is:</p>
			<p class="index"><!--[if supportFields]><b style='mso-bidi-font-weight:normal'><span
style='mso-element:field-begin'></span>xe &quot;aa&quot; \z
&quot;COMPLW.DOC-1296&quot;</b><![endif]-->
			<!--[if supportFields]><b
style='mso-bidi-font-weight:normal'><span style='mso-element:field-end'></span></b><![endif]-->
			</p>
			<p class="MsoNormal"><b style="mso-bidi-font-weight:normal">XLAT</b><span style="letter-spacing:-1.5pt">[</span>[<b style="mso-bidi-font-weight:normal">B</b><span style="letter-spacing:-1.5pt">]</span>] <span style="letter-spacing:-1.5pt">[</span>[<span style="letter-spacing:-1.5pt">[</span>[<i style="mso-bidi-font-style:normal">segment</i>:<span style="letter-spacing:-1.5pt">]</span>]<i style="mso-bidi-font-style:normal">memory</i><span style="letter-spacing:-1.5pt">]</span>]</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Instructions:XLAT&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1125&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;XLAT instruction&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1126&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The optional <b style="mso-bidi-font-weight:normal">B</b> suffix (for &#147;byte&#148;) reflects the size of data the instruction handles. Both <b style="mso-bidi-font-weight:normal">XLAT</b> and <b style="mso-bidi-font-weight:
normal">XLATB</b> assemble to exactly the same machine code.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1297&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">To use <b style="mso-bidi-font-weight:normal">XLAT</b>, place the offset of the start of the array in the BX register and the desired index value in AL. Array indexes always begin with 0 in assembly language. To retrieve the first byte of the array, set AL to 0; to retrieve the second byte, set AL to 1, and so forth. <b style="mso-bidi-font-weight:normal">XLAT</b> returns the byte element in AL, overwriting the index number.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1298&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">By default, the DS register contains the segment of the table, but you can use a segment override to specify a different segment. You need not give an operand except when specifying a segment override. (For information about the segment override operator, see &#147;Direct Memory Operands&#148; in Chapter 3.)</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1299&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">This example illustrates <b style="mso-bidi-font-weight:
normal">XLAT</b> by looking up hexadecimal characters in a list. The code converts an eight-bit binary number to a string representing a hexadecimal number.</p>
			<p class="Ex">; Table of hexadecimal digits<br>
			hex<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>BYTE<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>&quot;0123456789ABCDEF&quot;<br>
			convert BYTE<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>&quot;You pressed the key with ASCII code &quot;<br>
			key<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>BYTE<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>?,?,&quot;h&quot;,13,10,&quot;$&quot;<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.CODE<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ah, 8<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Get a key in AL<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>int<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>21h<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Call DOS<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>bx, OFFSET hex<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Load table address<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ah, al <span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>; Save a copy in high byte<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>and<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>al, 00001111y<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Mask out top character<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>xlat<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Translate<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>key[1], al<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Store the character<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>cl, 12<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Load shift count<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>shr<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, cl<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Shift high char into position<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>xlat<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Translate<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>key, al<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Store the character<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>dx, OFFSET convert<span style="mso-spacerun: yes">&nbsp; </span>; Load message<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ah, 9<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>; Display character<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>int<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>21h<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Call DOS<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1300&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Although AL cannot contain an index value greater than 255, you can use <b style="mso-bidi-font-weight:normal">XLAT</b> with arrays containing more than 256 elements. Simply treat each 256-byte block of the array as a smaller sub-array. For example, to retrieve the 260th element of an array, add 256 to BX and set AL=3 (260-256-1).</p>
			<h1 style="margin-left:0in">Structures and Unions</h1>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Structures:defined&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1127&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Structures:memory allocation
for&quot;<span style='mso-hide:none'> \z &quot;COMPLW.DOC-1128&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">A structure is a group of possibly dissimilar data types and variables that can be accessed as a unit or by any of its components. The fields within the structure can have different sizes and data types.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Unions:defined&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1129&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Unions:memory allocation&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1130&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Unions are identical to structures, except that the fields of a union overlap in memory, which allows you to define different data formats for the same memory space. Unions can store different types of data depending on the situation. They also can store data as one data type and retrieve it as another data type.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Data types:structures&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1131&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Data types:unions&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1132&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Whereas each field in a structure has an offset relative to the first byte of the structure, all the fields in a union start at the same offset. The size of a structure is the sum of its components; the size of a union is the length of the longest field.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1301&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">A MASM structure is similar to a <b style="mso-bidi-font-weight:
normal">struct</b> in the C language, a <b style="mso-bidi-font-weight:normal">STRUCTURE</b> in FORTRAN, and a <b style="mso-bidi-font-weight:normal">RECORD</b> in Pascal. Unions in MASM are similar to unions in C and FORTRAN, and to variant records in Pascal.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Structures:steps for using&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1133&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Unions:steps for using&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1134&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Follow these steps when using structures and unions:</p>
			<p class="Ln1" style="margin-left:22.0pt"><span style="mso-tab-count:1"></span>1.<span style="mso-tab-count:1">&nbsp; </span>Declare a structure (or union) type.</p>
			<p class="Ln1" style="margin-left:22.0pt"><span style="mso-tab-count:1"></span>2.<span style="mso-tab-count:1">&nbsp; </span>Define one or more variables having that type.</p>
			<p class="Ln1" style="margin-left:22.0pt"><span style="mso-tab-count:1"></span>3.<span style="mso-tab-count:1">&nbsp; </span>Reference the fields directly or indirectly with the field (dot) operator.</p>
			<p class="Le"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Structures:compatibility with MASM 5.1&quot;<span style='mso-hide:none'>
\z &quot;COMPLW.DOC-1135&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">You can use the entire structure or union variable or just the individual fields as operands in assembler statements. This section explains the allocating, initializing, and nesting of structures and unions.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1302&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">MASM 6.1 extends the functionality of structures and also makes some changes to MASM 5.1 behavior. If you prefer, you can retain MASM 5.1 behavior by specifying <b style="mso-bidi-font-weight:normal">OPTION OLDSTRUCTS</b> in your program.</p>
			<h2 style="margin-left:0in">Declaring Structure and Union Types</h2>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1303&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">When you declare a structure or union type, you create a template for data. The template states the sizes and, optionally, the initial values in the structure or union, but allocates no memory.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;STRUCT directive&quot; \t &quot;see Structures, STRUCT directive&quot; \z
&quot;COMPLW.DOC-1136&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;Directives:STRUCT&quot; \z
&quot;COMPLW.DOC-1137&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;UNION directive&quot; \t
&quot;see Unions, UNION directive&quot; \z &quot;COMPLW.DOC-1138&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;Directives:UNION&quot; \z
&quot;COMPLW.DOC-1139&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;Unions:UNION directive&quot; \z
&quot;COMPLW.DOC-1140&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Structures:syntax:types,
declaring&quot;<span style='mso-hide:none'> \z &quot;COMPLW.DOC-1141&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Structures:alignment of
fields&quot;<span style='mso-hide:none'> \z &quot;COMPLW.DOC-1142&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The<span style="font-size:8.0pt"> </span><b style="mso-bidi-font-weight:normal">STRUCT</b> keyword marks the beginning of a type declaration for a structure. (<b style="mso-bidi-font-weight:normal">STRUCT</b> and <b style="mso-bidi-font-weight:normal">STRUC</b> are synonyms.) The format for <b style="mso-bidi-font-weight:normal">STRUCT</b> and <b style="mso-bidi-font-weight:
normal">UNION</b> type declarations is:</p>
			<p class="Syn"><i style="mso-bidi-font-style:normal">name</i> {<b style="mso-bidi-font-weight:normal"><span style="font-size:10.0pt">STRUCT</span></b> | <b style="mso-bidi-font-weight:normal"><span style="font-size:10.0pt">UNI<a name="SP2"></a>ON</span></b>}<span style="mso-spacerun: yes">&nbsp; </span><span style="letter-spacing:-1.5pt">[</span>[<i style="mso-bidi-font-style:normal">alignment</i><span style="letter-spacing:-1.5pt">]</span>] <span style="letter-spacing:-1.5pt">[</span>[<b style="mso-bidi-font-weight:normal"><span style="font-size:10.0pt">,NONUNIQUE</span></b> <span style="letter-spacing:-1.5pt">]</span>]<br>
			<i style="mso-bidi-font-style:normal">fielddeclarations</i><br>
			<i style="mso-bidi-font-style:normal">name</i> <b style="mso-bidi-font-weight:
normal"><span style="font-size:10.0pt">ENDS</span></b></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;NONUNIQUE operand&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1143&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Unions:types, declaring&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1144&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The <i style="mso-bidi-font-style:normal">fielddeclarations</i> is a series of one or more variable declarations. You can declare default initial values individually or with the <b style="mso-bidi-font-weight:normal">DUP</b> operator. (See &#147;Defining Structure and Union Variables,&#148; following.) &#147;Referencing Structures, Unions, and Fields,&#148; later in this chapter, explains the <b style="mso-bidi-font-weight:normal">NONUNIQUE</b> keyword. You can nest structures and unions, as explained in &#147;Nested Structures and Unions,&#148; also later in this chapter.</p>
			<h4>Initializing Fields</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Structures:fields, initializing&quot;<span style='mso-hide:none'> \z &quot;COMPLW.DOC-1145&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">If you provide initializers for the fields of a structure or union when you declare the type, these initializers become the default value for the fields when you define a variable of that type. &#147;Defining Structure and Union Variables,&#148; following, explains default initializers.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Unions:fields&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1146&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">When you initialize the fields of a union type, the type and value of the first field become the default value and type for the union. In this example of an initialized union declaration, the default type for the union is <b style="mso-bidi-font-weight:normal">DWORD</b>:</p>
			<p class="Ex">DWB<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>UNION<br>
			<span style="mso-spacerun: yes">&nbsp; </span>d<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>DWORD<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>00FFh<br>
			<span style="mso-spacerun: yes">&nbsp; </span>w<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>WORD<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>?<br>
			<span style="mso-spacerun: yes">&nbsp; </span>b<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>BYTE<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>?<br>
			DWB<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ENDS<br style="mso-special-character:
line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;Directives:UNION&quot; \z &quot;COMPLW.DOC-1147&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;Unions:UNION directive&quot; \z
&quot;COMPLW.DOC-1148&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">If the size of the first member is less than the size of the union, the assembler initializes the rest of the union to zeros. When initializing strings in a type, make sure the initial values are long enough to accommodate the largest possible string.</p>
			<h4>Field Names</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Structures:fields, naming&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1149&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Unions:fields&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1150&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Structure and union field names must be unique within a nesting level because they represent the offset from the beginning of the structure to the corresponding field.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;STRUCT directive&quot; \t &quot;see Structures, STRUCT directive&quot; \z
&quot;COMPLW.DOC-1151&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;Directives:STRUCT&quot; \z
&quot;COMPLW.DOC-1152&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;Directives:UNION&quot; \z
&quot;COMPLW.DOC-1153&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;Unions:UNION directive&quot; \z
&quot;COMPLW.DOC-1154&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;OPTION directive:OLDSTRUCTS&quot;
\t &quot;See OLDSTRUCTS argument, OPTION directive&quot;<span style='mso-hide:
none'> \z &quot;COMPLW.DOC-1155&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;OPTION directive:M510&quot; \t
&quot;See M510 argument, OPTION directive&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1156&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;/Zm command-line option,
ML&quot;<span style='mso-hide:none'> \z &quot;COMPLW.DOC-1157&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;ML:Command-line
options:/Zm&quot;<span style='mso-hide:none'> \z &quot;COMPLW.DOC-1158&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;M510 argument, OPTION
directive:structures, with&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1159&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;OLDSTRUCTS argument, OPTION
directive:structures, with&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1160&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">A label elsewhere in the code may have the same name as a structure field, but a text macro cannot. Also, field names between structures need not be unique. Field names must be unique if you place <b style="mso-bidi-font-weight:normal">OPTION M510</b> or <b style="mso-bidi-font-weight:
normal">OPTION OLDSTRUCTS</b> in your code or use the /Zm option from the command line, since versions of MASM prior to 6.0 require unique field names. (See Appendix A.)</p>
			<h4>Alignment Value and Offsets for Structures</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1304&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Data access to structures is faster on aligned fields than on unaligned fields. Therefore, alignment gains speed at the cost of space. Alignment improves access on 16-bit and 32-bit processors but makes no difference in programs executing on an 8-bit 8088 processor.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Structures:alignment of fields&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1161&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;/Zp command-line option,
ML&quot;<span style='mso-hide:none'> \z &quot;COMPLW.DOC-1162&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;ML:Command-line
options:/Zp&quot;<span style='mso-hide:none'> \z &quot;COMPLW.DOC-1163&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The way the assembler aligns structure fields determines the amount of space required to store a variable of that type. Each field in a structure has an offset relative to 0. If you specify an <i style="mso-bidi-font-style:
normal">alignment</i> in the structure declaration (or with the /Zp<i style="mso-bidi-font-style:normal">n</i> command-line option), the offset for each field may be modified by the <i style="mso-bidi-font-style:normal">alignment</i> (or <i style="mso-bidi-font-style:normal">n</i>).</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1305&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The only values accepted for <i style="mso-bidi-font-style:
normal">alignment</i> are 1, 2, and 4. The default is 1. If the type declaration includes an <i style="mso-bidi-font-style:normal">alignment</i>, each field is aligned to either the field&#146;s size or the <i style="mso-bidi-font-style:
normal">alignment</i> value, whichever is less. If the field size in bytes is greater than the alignment value, the field is padded so that its offset is evenly divisible by the alignment value. Otherwise, the field is padded so that its offset is evenly divisible by the field size.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1306&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Any padding required to reach the correct offset for the field is added prior to allocating the field. The padding consists of zeros and always precedes the aligned field. The size of the structure must also be evenly divisible by the structure alignment value, so zeros may be added at the end of the structure.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1307&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">If neither the <i style="mso-bidi-font-style:normal">alignment</i> nor the /Zp command-line option is used, the offset is incremented by the size of each data directive. This is the same as a default <i style="mso-bidi-font-style:
normal">alignment </i>equal to 1. The<i style="mso-bidi-font-style:normal"> alignment</i> specified in the type declaration overrides the /Zp command-line option.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1308&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">These examples show how the assembler determines offsets:</p>
			<p class="Ex">STUDENT2<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>STRUCT<span style="mso-spacerun: yes">&nbsp; </span>2<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>; Alignment value is 2<br>
			<span style="mso-spacerun: yes">&nbsp; </span>score<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>WORD<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>1<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>; Offset = 0<br>
			<span style="mso-spacerun: yes">&nbsp; </span>id<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>BYTE<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>2<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>; Offset = 2 (1 byte padding added)<br>
			<span style="mso-spacerun: yes">&nbsp; </span>year<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>DWORD<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>3<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>; Offset = 4<br>
			<span style="mso-spacerun: yes">&nbsp; </span>sname<span style="mso-spacerun: yes">&nbsp; </span><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;</span>BYTE<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>4<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>; Offset = 8 (1 byte padding added)<br>
			STUDENT2<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>ENDS<br style="mso-special-character:
line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;STRUCT directive&quot; \t &quot;see Structures, STRUCT directive&quot; \z
&quot;COMPLW.DOC-1164&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;Directives:STRUCT&quot; \z
&quot;COMPLW.DOC-1165&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">One byte of padding is added at the end of the first byte-sized field. Otherwise, the offset of the <span style='font-size:9.5pt;
font-family:"Lucida Sans Typewriter"'>year</span> field would be 3, which is not divisible by the alignment value of 2. The size of this structure is now 9 bytes. Since 9 is not evenly divisible by 2, 1 byte of padding is added at the end of <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>student2</span>.</p>
			<p class="Ex">STUDENT4<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>STRUCT<span style="mso-spacerun: yes">&nbsp; </span>4<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Alignment value is 4<br>
			<span style="mso-spacerun: yes">&nbsp; </span>sname<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>BYTE<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>1<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Offset =<span style="mso-spacerun: yes">&nbsp; </span>0 (1 byte padding added)<br>
			<span style="mso-spacerun: yes">&nbsp; </span>score<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>WORD<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>10 DUP (100) ; Offset =<span style="mso-spacerun: yes">&nbsp; </span>2<br>
			<span style="mso-spacerun: yes">&nbsp; </span>year<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>BYTE<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>2<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Offset = 22 (1 byte padding<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>added so offset of next field<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>is divisible by 4)<br>
			<span style="mso-spacerun: yes">&nbsp; </span>id<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>DWORD<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>3<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Offset = 24<br>
			STUDENT4<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>ENDS<br style="mso-special-character:
line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;Directives:STRUCT&quot; \z &quot;COMPLW.DOC-1166&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The alignment value affects the alignment of structure variables, so adding an alignment value affects memory usage. This feature provides compatibility with structures in Microsoft C. MASM 6.1 provides an improved H2INC utility, which C programmers can use to translate C structures to assembly. (See <i style="mso-bidi-font-style:normal">Environment and Tools,</i> Chapter 20.)</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1309&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The <b style="mso-bidi-font-weight:normal">ALIGN</b>, <b style="mso-bidi-font-weight:normal">EVEN</b>, and <b style="mso-bidi-font-weight:
normal">ORG</b> directives can modify how field offsets are placed during structure definition. The <b style="mso-bidi-font-weight:normal">EVEN</b> and <b style="mso-bidi-font-weight:normal">ALIGN</b> directives insert padding bytes to round the field offset up to the specified alignment boundary. The <b style="mso-bidi-font-weight:normal">ORG</b> directive changes the offset of the next field to a given value, either positive or negative. If you use <b style="mso-bidi-font-weight:normal">ORG</b> when declaring a structure, you cannot define a structure of that type. <b style="mso-bidi-font-weight:normal">ORG</b> is useful when accessing existing data structures, such as a stack frame created by a high-level language.</p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<h2 style="margin-left:0in">Defining Structure and Union Variables</h2>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Structures:syntax:variables, defining&quot;<span style='mso-hide:none'>
\z &quot;COMPLW.DOC-1167&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Unions:variables,
defining&quot;<span style='mso-hide:none'> \z &quot;COMPLW.DOC-1168&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Once you have declared a structure or union type, you can define variables of that type. For each variable defined, memory is allocated in the current segment in the format declared by the type. The syntax for defining a structure or union variable is:</p>
			<p class="Syn"><span style="letter-spacing:-1.5pt">[</span>[<i style="mso-bidi-font-style:
normal">name</i><span style="letter-spacing:-1.5pt">]</span>]<i style="mso-bidi-font-style:normal"> typename </i><b style="mso-bidi-font-weight:
normal">&lt;</b><i style="mso-bidi-font-style:normal"> </i><span style="letter-spacing:-1.5pt">[</span>[<i style="mso-bidi-font-style:normal">initializer </i><span style="letter-spacing:-1.5pt">[</span>[<i style="mso-bidi-font-style:
normal">,initializer</i><span style="letter-spacing:-1.5pt">]</span>]<i style="mso-bidi-font-style:normal">...</i><span style="letter-spacing:-1.5pt">]</span>]<i style="mso-bidi-font-style:normal"> </i><b style="mso-bidi-font-weight:normal">&gt;</b><i style="mso-bidi-font-style:normal"><o:p></o:p></i></p>
			<p class="Syn"><span style="letter-spacing:-1.5pt">[</span>[<i style="mso-bidi-font-style:
normal">name</i><span style="letter-spacing:-1.5pt">]</span>]<i style="mso-bidi-font-style:normal"> typename</i><b style="mso-bidi-font-weight:
normal"> {</b><i style="mso-bidi-font-style:normal"> </i><span style="letter-spacing:-1.5pt">[</span>[<i style="mso-bidi-font-style:normal">initializer </i><span style="letter-spacing:-1.5pt">[</span>[<i style="mso-bidi-font-style:
normal">,initializer</i><span style="letter-spacing:-1.5pt">]</span>]<i style="mso-bidi-font-style:normal">...</i><span style="letter-spacing:-1.5pt">]</span>]<b style="mso-bidi-font-weight:normal"> }<o:p></o:p></b></p>
			<p class="Syn"><span style="letter-spacing:-1.5pt">[</span>[<i style="mso-bidi-font-style:
normal">name</i><span style="letter-spacing:-1.5pt">]</span>]<i style="mso-bidi-font-style:normal"> typename constant </i><b style="mso-bidi-font-weight:
normal"><span style="font-size:10.0pt">DUP</span> ({</b><i style="mso-bidi-font-style:
normal"> </i><span style="letter-spacing:-1.5pt">[</span>[<i style="mso-bidi-font-style:
normal">initializer </i><span style="letter-spacing:-1.5pt">[</span>[<i style="mso-bidi-font-style:normal">,initializer</i><span style="letter-spacing:
-1.5pt">]</span>]<i style="mso-bidi-font-style:normal">...</i><span style="letter-spacing:-1.5pt">]</span>]<b style="mso-bidi-font-weight:normal"> })</b><i style="mso-bidi-font-style:normal"><o:p></o:p></i></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1310&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The <i style="mso-bidi-font-style:normal">name</i> is the label assigned to the variable. If you do not provide a name, the assembler allocates space for the variable but does not give it a symbolic name. The <i style="mso-bidi-font-style:normal">typename</i> is the name of a previously declared structure or union type.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;DUP operator:structures and unions, with&quot;<span style='mso-hide:none'>
\z &quot;COMPLW.DOC-1169&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;\\ (line-continuation
character)&quot;<span style='mso-hide:none'> \z &quot;COMPLW.DOC-1170&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;\\ (line-continuation
character)&quot;<span style='mso-hide:none'> \z &quot;COMPLW.DOC-1171&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">You can give an <i style="mso-bidi-font-style:normal">initializer</i> for each field. Each initializer must correspond in type with the field defined in the type declaration. For unions, the type of the initializer must be the same as the type for the first field. An initialization list can also use the <b style="mso-bidi-font-weight:normal">DUP</b> operator.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;{} (curly braces):structures and unions&quot;<span style='mso-hide:none'>
\z &quot;COMPLW.DOC-1172&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Curly braces ({}):structures
and unions, with&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1173&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;&lt;&lt; &gt; (angle
brackets):structures and unions&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1174&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Angle brackets (&lt;&lt;
&gt;):structures and unions&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1175&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Line-continuation
character&quot;<span style='mso-hide:none'> \z &quot;COMPLW.DOC-1176&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The list of initializers can be broken only after a comma unless you end the line with a continuation character (\). The last curly brace or angle bracket must appear on the same line as the last initializer. You can also use the line continuation character to extend a line as shown in the <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>Item4</span> declaration that follows. Angle brackets and curly braces can be intermixed in an initialization as long as they match. This example illustrates the options for initializing lists in structures of type <span style='font-size:9.5pt;
font-family:"Lucida Sans Typewriter"'>ITEMS</span>:</p>
			<p class="Ex" style="page-break-after:auto">ITEMS<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>STRUCT<span style="mso-spacerun: yes">&nbsp; </span><br>
			<span style="mso-spacerun: yes">&nbsp; </span>Iname<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>BYTE<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>'Item Name'<br>
			<span style="mso-spacerun: yes">&nbsp; </span>Inum<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>WORD<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>?<br>
			<span style="mso-spacerun: yes">&nbsp; </span>UNION<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ITYPE<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; UNION keyword appears first<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>oldtype BYTE<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>0<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>when nested in structure.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>newtype WORD<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>?<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>(See &quot;Nested Structures<br>
			<span style="mso-spacerun: yes">&nbsp; </span>ENDS<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>and Unions,&quot; following ).<br>
			ITEMS<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>ENDS<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.DATA<br>
			Item1<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>ITEMS<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>&lt; &gt;<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Accepts default initializers<br>
			Item2<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>ITEMS<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>{ }<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Accepts default initializers<br>
			Item3<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>ITEMS <span style="mso-spacerun:
yes">&nbsp;&nbsp;</span>&lt;'Bolts', 126&gt;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>; Overrides default value of first<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>2 fields; use default of<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>the third field<br>
			Item4<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>ITEMS<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>{ \<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>'Bolts',<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Item name<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>126 \<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Part number<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;Directives:STRUCT&quot; \z &quot;COMPLW.DOC-1177&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;Directives:UNION&quot; \z
&quot;COMPLW.DOC-1178&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;Unions:UNION directive&quot; \z
&quot;COMPLW.DOC-1179&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The example defines<span style="letter-spacing:-1.75pt"> </span>&#151;<span style="letter-spacing:-1.75pt"> </span>that is, allocates space for<a name="CurrentCell"></a><span style="letter-spacing:-1.75pt"> </span>&#151;<span style="letter-spacing:-1.75pt"> </span>four structures of the <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>ITEMS</span> type. The structures are named <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>Item1</span> through <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>Item4</span>. Each definition requires the angle brackets or curly braces even when not initialized. If you initialize more than one field, separate the values with commas, as shown in <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>Item3</span> and <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>Item4</span>.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Structures:default field values&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1180&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">You need not initialize all fields in a structure. If a field is blank, the assembler uses the structure&#146;s initial value given for that field in the declaration. If there is no default value, the field value is left unspecified.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1311&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">For nested structures or unions, however, these are equivalent:</p>
			<p class="Ex">Item5<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>ITEMS<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>{'Bolts', ,<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>}<br>
			Item6<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>ITEMS<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>{'Bolts', , { } }<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;Directives:UNION&quot; \z &quot;COMPLW.DOC-1181&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;Unions:UNION directive&quot; \z
&quot;COMPLW.DOC-1182&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">A variable and an array of union type <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>WB</span> look like this:</p>
			<p class="Ex">WB<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>UNION<br>
			<span style="mso-spacerun: yes">&nbsp; </span>w<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>WORD<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>?<br>
			<span style="mso-spacerun: yes">&nbsp; </span>b<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>BYTE<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>?<br>
			WB<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>ENDS<br>
			<br>
			num<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>WB<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{0Fh}<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Store 0Fh<br>
			array<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>WB<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>(40 / SIZEOF WB) DUP ({2})<span style="mso-spacerun: yes">&nbsp; </span>; Allocates and<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>initializes 20 unions<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="Art" style="margin-left:0in"><span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp; </span><span style='mso-field-code:"include M\:\\\\SLM\\\\SRC\\\\MASM61\\\\APPS\\\\ART\\\\mpchp05\.doc art_mp0502_eps  \\\\* mergeformat"'><a name="art_mp0502_eps"></a><a name="space_mp0502_eps"><span style="mso-bookmark:
art_mp0502_eps"></span></a><!--[if supportFields]><span style='mso-bookmark:
space_mp0502_eps'><span style='mso-bookmark:art_mp0502_eps'></span></span><span
style='mso-element:field-begin'></span><span style='mso-bookmark:space_mp0502_eps'><span
style='mso-bookmark:art_mp0502_eps'>IMPORT
M:\\SLM\\SRC\\MASM61\\APPS\\ART\\MP0502.EPS \* mergeformat<span
style='mso-element:field-separator'></span></span></span><![endif]-->
			<span style="mso-bookmark:space_mp0502_eps"><span style="mso-bookmark:art_mp0502_eps"><!--[if gte vml 1]><v:shapetype
 id="_x0000_t75" coordsize="21600,21600" o:spt="75" o:preferrelative="t"
 path="m@4@5l@4@11@9@11@9@5xe" filled="f" stroked="f">
 <v:stroke joinstyle="miter"/>
 <v:formulas>
  <v:f eqn="if lineDrawn pixelLineWidth 0"/>
  <v:f eqn="sum @0 1 0"/>
  <v:f eqn="sum 0 0 @1"/>
  <v:f eqn="prod @2 1 2"/>
  <v:f eqn="prod @3 21600 pixelWidth"/>
  <v:f eqn="prod @3 21600 pixelHeight"/>
  <v:f eqn="sum @0 0 1"/>
  <v:f eqn="prod @6 1 2"/>
  <v:f eqn="prod @7 21600 pixelWidth"/>
  <v:f eqn="sum @8 21600 0"/>
  <v:f eqn="prod @7 21600 pixelHeight"/>
  <v:f eqn="sum @10 21600 0"/>
 </v:formulas>
 <v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"/>
 <o:lock v:ext="edit" aspectratio="t"/>
</v:shapetype><v:shape id="_x0000_i1025" type="#_x0000_t75" style='width:300pt;
 height:48.75pt'>
 <v:imagedata src="./Chap_05_files/image001.wmz" o:href="file:///M:/SLM/SRC/MASM61/APPS/ART/MP0502.EPS"/>
</v:shape><![endif]-->
			<![if !vml]><img width="400" height="65" src="Chap_05_files/image002.gif" v:shapes="_x0000_i1025"><![endif]></span></span><!--[if supportFields]><span
style='mso-bookmark:space_mp0502_eps'><span style='mso-bookmark:art_mp0502_eps'></span></span><span
style='mso-element:field-end'></span><![endif]-->
			 <span style="mso-bookmark:
space_mp0502_eps"><span style="mso-bookmark:art_mp0502_eps"></span></span></span></p>
			<h4>Arrays as Field Initializers</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Structures:array initializers&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1183&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Structures:string
initializers&quot;<span style='mso-hide:none'> \z &quot;COMPLW.DOC-1184&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The size of the initializer determines the length of the array that can override the contents of a field in a variable definition. The override cannot contain more elements than the default. Specifying fewer override array elements changes the first <i style="mso-bidi-font-style:normal">n</i> values of the default where <i style="mso-bidi-font-style:normal">n</i> is the number of values in the override. The rest of the array elements take their default values from the initializer.</p>
			<h4>Strings as Field Initializers</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Unions:arrays as initializers&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1185&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Unions:strings as
initializers&quot;<span style='mso-hide:none'> \z &quot;COMPLW.DOC-1186&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">If the override is shorter, the assembler pads the override with spaces to equal the length of the initializer. If the initializer is a string and the override value is not a string, the override value must be enclosed in angle brackets or curly braces.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1312&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">A string can override any member of type <b style="mso-bidi-font-weight:normal">BYTE</b> (or <b style="mso-bidi-font-weight:
normal">SBYTE</b>). You need not enclose the string in angle brackets or curly braces unless mixed with other override methods.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1313&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">If a structure has an initialized string field or an array of bytes, any new string assigned to a variable of the field that is smaller than the default is padded with spaces. The assembler adds four spaces at the end of <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>'Bolts'</span> in the variables of type <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>ITEMS</span> previously shown. The <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>Iname</span> field in the <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>ITEMS</span> structure cannot contain a field initializer longer than <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>'Item Name'</span>.</p>
			<h4>Structures as Field Initializers</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Structures:initializers, as&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1187&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Initializers for structure variables must be enclosed in curly braces or angle brackets, but you can specify overrides with fewer elements than the defaults.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1314&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">This example illustrates the use of default values with structures as field<br>
			initializers:</p>
			<p class="Ex">DISKDRIVES<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>STRUCT<br>
			<span style="mso-spacerun: yes">&nbsp; </span>a1<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>BYTE ?<br>
			<span style="mso-spacerun: yes">&nbsp; </span>b1<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>BYTE ?<br>
			<span style="mso-spacerun: yes">&nbsp; </span>c1<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>BYTE ?<br>
			DISKDRIVES<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>ENDS<br>
			<br>
			INFO<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>STRUCT<br>
			<span style="mso-spacerun: yes">&nbsp; </span>buffer<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>BYTE<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>100 DUP (?)<span style="mso-spacerun: yes">&nbsp; </span><br>
			<span style="mso-spacerun: yes">&nbsp; </span>crlf<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>BYTE<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>13, 10<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><br>
			<span style="mso-spacerun: yes">&nbsp; </span>query<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>BYTE<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>'Filename: ' ; String &lt;= can override<br>
			<span style="mso-spacerun: yes">&nbsp; </span>endmark<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>BYTE<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>36<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><br>
			<span style="mso-spacerun: yes">&nbsp; </span>drives<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>DISKDRIVES &lt;0, 1, 1&gt;<br>
			INFO<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>ENDS<br>
			<br>
			info1<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>INFO<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>{ , , 'Dir' }<br>
			<br>
			; Next line illegal since name in query field is too long:<br>
			; info2<span style="mso-spacerun: yes">&nbsp; </span>INFO<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>{&quot;TESTFILE&quot;, , &quot;DirectoryName&quot;}<br>
			<br>
			lotsof<span style="mso-spacerun: yes">&nbsp; </span>INFO<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>{ , , 'file1', , {0,0,0} },<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{ , , 'file2', , {0,0,1} },<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{ , , 'file3', , {0,0,2} }<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;Directives:STRUCT&quot; \z &quot;COMPLW.DOC-1188&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The following diagram shows how the assembler stores <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>info1</span>.</p>
			<p class="Art" style="margin-left:0in"><span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp; </span><span style='mso-field-code:"include M\:\\\\SLM\\\\SRC\\\\MASM61\\\\APPS\\\\ART\\\\mpchp05\.doc art_mp0501_eps  \\\\* mergeformat"'><a name="art_mp0501_eps"></a><a name="space_mp0501_eps"><span style="mso-bookmark:
art_mp0501_eps"></span></a><!--[if supportFields]><span style='mso-bookmark:
space_mp0501_eps'><span style='mso-bookmark:art_mp0501_eps'></span></span><span
style='mso-element:field-begin'></span><span style='mso-bookmark:space_mp0501_eps'><span
style='mso-bookmark:art_mp0501_eps'>IMPORT M:\\SLM\\SRC\\MASM61\\APPS\\ART\\MP0501.EPS
\* mergeformat<span style='mso-element:field-separator'></span></span></span><![endif]-->
			<span style="mso-bookmark:space_mp0501_eps"><span style="mso-bookmark:art_mp0501_eps"><!--[if gte vml 1]><v:shape
 id="_x0000_i1026" type="#_x0000_t75" style='width:347.25pt;height:108.75pt'>
 <v:imagedata src="./Chap_05_files/image003.wmz" o:href="file:///M:/SLM/SRC/MASM61/APPS/ART/MP0501.EPS"/>
</v:shape><![endif]-->
			<![if !vml]><img width="463" height="145" src="Chap_05_files/image004.gif" v:shapes="_x0000_i1026"><![endif]></span></span><!--[if supportFields]><span
style='mso-bookmark:space_mp0501_eps'><span style='mso-bookmark:art_mp0501_eps'></span></span><span
style='mso-element:field-end'></span><![endif]-->
			 <span style="mso-bookmark:
space_mp0501_eps"><span style="mso-bookmark:art_mp0501_eps"></span></span></span></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1315&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The initialization for <span style='font-size:9.5pt;
font-family:"Lucida Sans Typewriter"'>drives</span> gives default values for all three fields of the structure. The fields left blank in <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>info1</span> use the default values for those fields. The <span style='font-size:9.5pt;
font-family:"Lucida Sans Typewriter"'>info2</span> declaration is illegal because <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>&#147;DirectoryName&#148;</span> is longer than the initial string for that field.</p>
			<h4>Arrays of Structures and Unions</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Structures:arrays&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1189&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Unions:arrays of&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1190&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe Operators:DUP \t &quot;See DUP
operator&quot;<span style='mso-hide:none'> \z &quot;COMPLW.DOC-1191&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;DUP operator:arrays, with&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1192&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Arrays:DUP, declaring
with&quot;<span style='mso-hide:none'> \z &quot;COMPLW.DOC-1193&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">You can define an array of structures using the <b style="mso-bidi-font-weight:normal">DUP</b> operator (see &#147;Declaring and Referencing Arrays,&#148; earlier in this chapter) or by creating a list of structures. For example, you can define an array of structure variables like this:</p>
			<p class="Ex">Item7<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>ITEMS<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>30 DUP ({,,{10}})<br style="mso-special-character:
line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1316&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>Item7</span> array defined here has 30 elements of type <span style='font-size:9.5pt;
font-family:"Lucida Sans Typewriter"'>ITEMS</span>, with the third field of each element (the union) initialized to 10.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1317&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">You can also list array elements as shown in the following example.</p>
			<p class="Ex">Item8<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>ITEMS<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>{'Bolts', 126, 10},<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{'Pliers',139, 10},<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{'Saws',<span style="mso-spacerun: yes">&nbsp; </span>414, 10}<br style="mso-special-character:
line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<h4>Redeclaring a Structure</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Structures:redeclaration&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1194&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The assembler generates an error when you declare a structure more than once unless the following are the same:</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1318&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>Field names</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1319&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>Offsets of named fields</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1320&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>Initialization lists</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1321&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>Field alignment value</p>
			<p class="Lb1"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<h4>LENGTHOF, SIZEOF, and TYPE for Structures</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Structures:operators<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1195&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe Operators:LENGTHOF \t &quot;See
LENGTHOF operator&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1196&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe Operators:SIZEOF \t &quot;See SIZEOF
operator&quot;<span style='mso-hide:none'> \z &quot;COMPLW.DOC-1197&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe Operators:TYPE \t &quot;See TYPE
operator&quot;<span style='mso-hide:none'> \z &quot;COMPLW.DOC-1198&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;LENGTHOF operator:number of
items, returning&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1199&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;SIZEOF operator:structures,
with&quot;<span style='mso-hide:none'> \z &quot;COMPLW.DOC-1200&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;TYPE operator:structures,
with&quot;<span style='mso-hide:none'> \z &quot;COMPLW.DOC-1201&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The size of a structure determined by <b style="mso-bidi-font-weight:
normal">SIZEOF</b> is the offset of the last field, plus the size of the last field, plus any padding required for proper alignment. (For information about alignment, see &#147;Declaring Structure and Union Types,&#148; earlier in this chapter.)</p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<p class="MsoNormal">This example, using the preceding data declarations, shows how to use the <b style="mso-bidi-font-weight:normal">LENGTHOF</b>, <b style="mso-bidi-font-weight:normal">SIZEOF</b>, and <b style="mso-bidi-font-weight:
normal">TYPE</b> operators with structures.</p>
			<p class="Ex">INFO<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>STRUCT<br>
			<span style="mso-spacerun: yes">&nbsp; </span>buffer<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>BYTE<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>100 DUP (?)<span style="mso-spacerun: yes">&nbsp; </span><br>
			<span style="mso-spacerun: yes">&nbsp; </span>crlf<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>BYTE<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>13, 10<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><br>
			<span style="mso-spacerun: yes">&nbsp; </span>query<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>BYTE<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>'Filename: '<br>
			<span style="mso-spacerun: yes">&nbsp; </span>endmark<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>BYTE<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>36<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><br>
			<span style="mso-spacerun: yes">&nbsp; </span>drives<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>DISKDRIVES &lt;0, 1, 1&gt;<br>
			INFO<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>ENDS<br>
			<br>
			info1<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>INFO<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>{ , , 'Dir' }<br>
			lotsof<span style="mso-spacerun: yes">&nbsp; </span>INFO<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>{ , , 'file1', , {0,0,0} },<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{ , , 'file2', , {0,0,1} },<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>{ , , 'file3', , {0,0,2} }<br style="mso-special-character:
line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="Ex">sinfo1<span style="mso-spacerun: yes">&nbsp; </span>EQU<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>SIZEOF<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>info1<span style="mso-spacerun: yes">&nbsp; </span>; 116 = number of bytes in<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>initializers<br>
			linfo1<span style="mso-spacerun: yes">&nbsp; </span>EQU<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>LENGTHOF<span style="mso-spacerun: yes">&nbsp; </span>info1<span style="mso-spacerun: yes">&nbsp; </span>; 1 = number of items<br>
			tinfo1<span style="mso-spacerun: yes">&nbsp; </span>EQU<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>TYPE<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>info1<span style="mso-spacerun: yes">&nbsp; </span>; 116 = same as size<br>
			<br>
			slotsof EQU<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>SIZEOF<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>lotsof ; 116 * 3 = number of bytes in<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>initializers<br>
			llotsof EQU<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>LENGTHOF<span style="mso-spacerun: yes">&nbsp; </span>lotsof ; 3 = number of items<br>
			tlotsof EQU<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>TYPE<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>lotsof ; 116 = same as size for structure<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>;<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>of type INFO<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<h4>LENGTHOF, SIZEOF, and TYPE for Unions</h4>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;Directives:STRUCT&quot; \z &quot;COMPLW.DOC-1202&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;Directives:UNION&quot; \z
&quot;COMPLW.DOC-1203&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;Unions:UNION directive&quot; \z
&quot;COMPLW.DOC-1204&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Unions:operators&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1205&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;TYPE operator:unions,
with&quot;<span style='mso-hide:none'> \z &quot;COMPLW.DOC-1206&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;SIZEOF operator:unions,
with&quot;<span style='mso-hide:none'> \z &quot;COMPLW.DOC-1207&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;LENGTHOF operator:unions,
with&quot;<span style='mso-hide:none'> \z &quot;COMPLW.DOC-1208&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The size of a union determined by <b style="mso-bidi-font-weight:
normal">SIZEOF</b> is the size of the longest field plus any padding required. The length of a union variable determined by <b style="mso-bidi-font-weight:
normal">LENGTHOF</b> equals the number of initializers defined inside angle brackets or curly braces. <b style="mso-bidi-font-weight:normal">TYPE</b> returns a value indicating the type of the longest field.</p>
			<p class="Ex" style="page-break-after:auto">DWB<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>UNION<br>
			<span style="mso-spacerun: yes">&nbsp; </span>d<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>DWORD<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>?<br>
			<span style="mso-spacerun: yes">&nbsp; </span>w<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>WORD<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>?<br>
			<span style="mso-spacerun: yes">&nbsp; </span>b<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>BYTE<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>?<br>
			DWB<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ENDS<br>
			<br>
			num<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>DWB<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>{0FFFFh}<br>
			array<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>DWB<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>(100 / SIZEOF DWB) DUP ({0})<br>
			<br>
			snum<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>EQU<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>SIZEOF<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>num<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; = 4<br>
			lnum<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>EQU<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>LENGTHOF num<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; = 1<br>
			tnum<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>EQU<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>TYPE<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>num<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; = 4<br>
			sarray<span style="mso-spacerun: yes">&nbsp; </span>EQU<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>SIZEOF<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>array<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>; = 100 (4*25)<br>
			larray<span style="mso-spacerun: yes">&nbsp; </span>EQU<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>LENGTHOF array<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>; = 25<br>
			tarray<span style="mso-spacerun: yes">&nbsp; </span>EQU<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>TYPE<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>array<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>; = 4<br style="mso-special-character:
line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<h2 style="margin-left:0in">Referencing Structures, Unions, and Fields</h2>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Structures:referencing fields in&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1209&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Like other variables, structure variables can be accessed by name. You can access fields within structure variables with this syntax:</p>
			<p class="Syn"><i style="mso-bidi-font-style:normal">variable. field<o:p></o:p></i></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Unions:referencing fields in&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1210&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;. (dot operator)&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1211&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Dot operator (.)&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1212&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Operators:dot (.)&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1213&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">References to fields must always be fully qualified, with the structure or union names and the dot operator preceding the field name. The assembler requires that you use the dot operator only with structure fields, not as an alternative to the plus operator; nor can you use the plus operator as an alternative to the dot operator.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1322&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The following example shows several ways to reference the fields of a structure of type <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>DATE</span>.</p>
			<p class="Ex">DATE <span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;</span>STRUCT<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Defines structure type<br>
			<span style="mso-spacerun: yes">&nbsp; </span>month BYTE<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>?<br>
			<span style="mso-spacerun: yes">&nbsp; </span>day<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>BYTE<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>?<br>
			<span style="mso-spacerun: yes">&nbsp; </span>year<span style="mso-spacerun: yes">&nbsp; </span>WORD<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>?<br>
			DATE<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>ENDS<br>
			<br>
			yesterday<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>DATE<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>{1, 20, 1993}<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>; Declare structure<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>variable<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>al, yesterday.day<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Use structure variables<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>bx, OFFSET yesterday<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Load structure address<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>al, (DATE PTR [bx]).month ; Use as indirect operand<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>al, [bx].date.month<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; This is necessary only if<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>month is already a<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>field in a different<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>structure<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;Directives:STRUCT&quot; \z &quot;COMPLW.DOC-1214&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;OPTION
directive:OLDSTRUCTS&quot; \t &quot;See OLDSTRUCTS argument, OPTION
directive&quot;<span style='mso-hide:none'> \z &quot;COMPLW.DOC-1215&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;OPTION directive:M510&quot; \t
&quot;See M510 argument, OPTION directive&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1216&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;NONUNIQUE operand&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1217&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;OLDSTRUCTS argument, OPTION
directive:structures, with&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1218&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Under <b style="mso-bidi-font-weight:normal">OPTION M510</b> or <b style="mso-bidi-font-weight:normal">OPTION OLDSTRUCTS</b>, unique structure names do not need to be qualified. However, if the <b style="mso-bidi-font-weight:normal">NONUNIQUE</b> keyword appears in a structure definition, all fields of the structure must be fully qualified when referenced, even if the <b style="mso-bidi-font-weight:normal">OPTION OLDSTRUCTS</b> directive appears in the code. Also, you must qualify all references to a field. (For information on the <b style="mso-bidi-font-weight:
normal">OPTION</b> directive, see Chapter 1.)</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1323&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Even if the initialized union is the size of a <b style="mso-bidi-font-weight:normal">WORD</b> or <b style="mso-bidi-font-weight:
normal">DWORD</b>, members of structures or unions are accessible only through the field&#146;s names.</p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;Unions:fields&quot; \z &quot;COMPLW.DOC-1219&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;Directives:UNION&quot; \z
&quot;COMPLW.DOC-1220&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;Unions:UNION directive&quot; \z
&quot;COMPLW.DOC-1221&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">In the following example, the two <b style="mso-bidi-font-weight:
normal">MOV</b> statements show how you can access the elements of an array of unions.</p>
			<p class="Ex">WB<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>UNION<br>
			<span style="mso-spacerun: yes">&nbsp; </span>w<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>WORD<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>?<br>
			<span style="mso-spacerun: yes">&nbsp; </span>b<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>BYTE<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>?<br>
			WB<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>ENDS<br>
			<br>
			array<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>WB<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>(100 / SIZEOF WB) DUP ({0})<br>
			<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>array[12].w, 40h<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>array[32].b,<span style="mso-spacerun: yes">&nbsp; </span>2<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="Art" style="margin-left:0in"><span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp; </span><span style='mso-field-code:"include M\:\\\\SLM\\\\SRC\\\\MASM61\\\\APPS\\\\ART\\\\mpchp05\.doc art_mp0503_eps  \\\\* mergeformat"'><a name="art_mp0503_eps"></a><a name="space_mp0503_eps"><span style="mso-bookmark:
art_mp0503_eps"></span></a><!--[if supportFields]><span style='mso-bookmark:
space_mp0503_eps'><span style='mso-bookmark:art_mp0503_eps'></span></span><span
style='mso-element:field-begin'></span><span style='mso-bookmark:space_mp0503_eps'><span
style='mso-bookmark:art_mp0503_eps'>IMPORT
M:\\SLM\\SRC\\MASM61\\APPS\\ART\\MP0503.EPS \* mergeformat<span
style='mso-element:field-separator'></span></span></span><![endif]-->
			<span style="mso-bookmark:space_mp0503_eps"><span style="mso-bookmark:art_mp0503_eps"><!--[if gte vml 1]><v:shape
 id="_x0000_i1027" type="#_x0000_t75" style='width:240.75pt;height:48.75pt'>
 <v:imagedata src="./Chap_05_files/image005.wmz" o:href="file:///M:/SLM/SRC/MASM61/APPS/ART/MP0503.EPS"/>
</v:shape><![endif]-->
			<![if !vml]><img width="321" height="65" src="Chap_05_files/image006.gif" v:shapes="_x0000_i1027"><![endif]></span></span><!--[if supportFields]><span
style='mso-bookmark:space_mp0503_eps'><span style='mso-bookmark:art_mp0503_eps'></span></span><span
style='mso-element:field-end'></span><![endif]-->
			 <span style="mso-bookmark:
space_mp0503_eps"><span style="mso-bookmark:art_mp0503_eps"></span></span></span></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1324&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">As the preceding code illustrates, you can use unions to access the same data in more than one form. One application of structures and unions is to simplify the task of reinitializing a far pointer. For a far pointer declared as</p>
			<p class="Ex">FPWORD<span style="mso-spacerun: yes">&nbsp; </span>TYPEDEF FAR PTR WORD<br>
			<br>
			<span style="mso-spacerun: yes">&nbsp;</span><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.DATA<br>
			WordPtr FPWORD ?<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1325&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">you must follow these steps to point <span style='font-size:
9.5pt;font-family:"Lucida Sans Typewriter"'>WordPtr</span> to a word value named <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>ThisWord</span> in the current data segment.</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>WORD PTR WordPtr[2], ds<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>WORD PTR WordPtr, OFFSET ThisWord<br style="mso-special-character:
line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;Unions:variables, defining&quot; \z &quot;COMPLW.DOC-1222&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;Directives:UNION&quot; \z
&quot;COMPLW.DOC-1223&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;Unions:UNION directive&quot; \z
&quot;COMPLW.DOC-1224&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The preceding method requires that you remember whether the segment or the offset is stored first. However, if your program declares a union like this:</p>
			<p class="Ex">uptr<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>UNION<br>
			<span style="mso-spacerun: yes">&nbsp; </span>dwptr<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>FPWORD<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>0<br>
			<span style="mso-spacerun: yes">&nbsp; </span>STRUCT<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>offs<span style="mso-spacerun:
yes">&nbsp; </span>WORD<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>0<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>segm<span style="mso-spacerun:
yes">&nbsp; </span>WORD<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>0<br>
			<span style="mso-spacerun: yes">&nbsp; </span>ENDS<br>
			uptr<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>ENDS<br style="mso-special-character:
line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1326&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">You can initialize a far pointer with these steps:</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.DATA<br>
			WrdPtr2 uptr<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>&lt;&gt;<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>WrdPtr2.segm, ds<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>WrdPtr2.offs, OFFSET ThisWord<br style="mso-special-character:
line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1327&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">This code moves the segment and the offset into the pointer and then moves the pointer into a register with the other field of the union. Although this technique does not reduce the code size, it avoids confusion about the order for loading the segment and offset.</p>
			<h2 style="margin-left:0in">Nested Structures and Unions</h2>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Structures:nested&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1225&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Unions:nested&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1226&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">You can nest structures and unions in several ways. This section explains how to refer to the fields in a nested structure or union. The following example illustrates the four techniques for nesting, and how to reference the fields. Note the syntax for nested structures. The techniques are reviewed following the example.</p>
			<p class="Ex" style="page-break-after:auto">ITEMS<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>STRUCT<br>
			<span style="mso-spacerun: yes">&nbsp; </span>Inum<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>WORD<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>?<br>
			<span style="mso-spacerun: yes">&nbsp; </span>Iname<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>BYTE<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>'Item Name'<br>
			ITEMS<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>ENDS<br>
			<br>
			INVENTORY<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>STRUCT<br>
			<span style="mso-spacerun: yes">&nbsp; </span>UpDate<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>WORD<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>?<br>
			<span style="mso-spacerun: yes">&nbsp; </span>oldItem<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>ITEMS<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>{ \<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>100,<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>'AF8' \<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Named variable of<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>existing structure<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>ITEMS<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>{ ?, '94C' }<span style="mso-spacerun:
yes">&nbsp; </span>; Unnamed variable of<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>existing type<br>
			<span style="mso-spacerun: yes">&nbsp; </span>STRUCT ups<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Named nested structure<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>source<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>WORD<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>?<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>shipmode<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>BYTE<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>?<br>
			<span style="mso-spacerun: yes">&nbsp; </span>ENDS<br>
			<span style="mso-spacerun: yes">&nbsp; </span>STRUCT<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Unnamed nested structure<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>f1<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>WORD<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>?<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>f2<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>WORD<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>?<br>
			<span style="mso-spacerun: yes">&nbsp; </span>ENDS<br>
			INVENTORY<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>ENDS<br>
			<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.DATA<br>
			<br>
			yearly<span style="mso-spacerun: yes">&nbsp; </span>INVENTORY<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{ }</p>
			<p class="Ex" style="page-break-after:auto">; Referencing each type of data in the yearly structure:<br>
			<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, yearly.oldItem.Inum<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>yearly.ups.shipmode, 'A'<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>yearly.Inum, 'C'<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, yearly.f1<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;Directives:STRUCT&quot; \z &quot;COMPLW.DOC-1227&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Structures:nested&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1228&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Unions:nested&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1229&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">To nest structures and unions, you can use any of these techniques:</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1328&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>The field of a structure or union can be a named variable of an existing structure or union type, as in the <span style='font-size:9.5pt;
font-family:"Lucida Sans Typewriter"'>oldItem</span> field. Because <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>INVENTORY</span> contains two structures of type <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>ITEMS</span> , the field names in <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>oldItem</span> are not unique. Therefore, you must use the full field names when referencing those fields, as in the statement</p>
			<p class="Exl"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, yearly.oldItem.Inum<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;Unions:fields&quot; \z &quot;COMPLW.DOC-1230&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;Directives:STRUCT&quot; \z
&quot;COMPLW.DOC-1231&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;Directives:UNION&quot; \z
&quot;COMPLW.DOC-1232&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;Unions:UNION directive&quot; \z
&quot;COMPLW.DOC-1233&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>To declare a named structure or union inside another structure or union, give the <b style="mso-bidi-font-weight:normal">STRUCT</b> or <b style="mso-bidi-font-weight:normal">UNION</b> keyword first and then define a label for it. Fields of the nested structure or union must always be qualified:</p>
			<p class="Exl"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>yearly.ups.shipmode, 'A'<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1329&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>As shown in the <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>Items</span> field of <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>Inventory</span>, you also can use unnamed variables of existing structures or unions inside another structure or union. In these cases, you can reference fields directly:</p>
			<p class="Exl"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>yearly.Inum, 'C'<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, yearly.f1<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<h1 style="margin-left:0in">Records</h1>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Records:defined&quot;<span style='mso-hide:none'> \z &quot;COMPLW.DOC-1234&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Records are similar to structures, except that fields in records are bit strings. Each bit field in a record variable can be used separately in constant operands or expressions. The processor cannot access bits individually at run time, but it can access bit fields with instructions that manipulate bits.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1330&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Records are bytes, words, or doublewords in which the individual bits or groups of bits are considered fields. In general, the three steps for using record variables are the same as those for using other complex data types:</p>
			<p class="Ln1" style="margin-left:22.0pt"><span style="mso-tab-count:1"></span>1.<span style="mso-tab-count:1">&nbsp; </span>Declare a record type.</p>
			<p class="Ln1" style="margin-left:22.0pt"><span style="mso-tab-count:1"></span>2.<span style="mso-tab-count:1">&nbsp; </span>Define one or more variables having the record type.</p>
			<p class="Ln1" style="margin-left:22.0pt"><span style="mso-tab-count:1"></span>3.<span style="mso-tab-count:1">&nbsp; </span>Reference record variables using shifts and masks.</p>
			<p class="Le"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1331&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Once it is defined, you can use the record variable as an operand in assembler statements.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1332&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">This section explains the record declaration syntax and the use of the <b style="mso-bidi-font-weight:normal">MASK</b> and <b style="mso-bidi-font-weight:normal">WIDTH</b> operators. It also shows some applications of record variables and constants.</p>
			<h2 style="margin-left:0in">Declaring Record Types</h2>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;Directives:RECORD&quot; \z &quot;COMPLW.DOC-1235&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Records:RECORD syntax&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1236&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">A record type creates a template for data with the sizes and, optionally, the initial values for bit fields in the record. It does not allocate memory space for the<br>
			record.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1333&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The <b style="mso-bidi-font-weight:normal">RECORD</b> directive declares a record type for an 8-bit, 16-bit, or 32-bit record that contains one or more bit fields. The maximum size is based on the expression word size. See <b style="mso-bidi-font-weight:normal">OPTION EXPR16</b> and <b style="mso-bidi-font-weight:normal">OPTION EXPR32</b> in Chapter 1. The syntax is:</p>
			<p class="Syn"><i style="mso-bidi-font-style:normal">recordname </i><b style="mso-bidi-font-weight:normal">RECORD</b><i style="mso-bidi-font-style:
normal"> field </i><span style="letter-spacing:-1.5pt">[</span>[<b style="mso-bidi-font-weight:normal">,</b><i style="mso-bidi-font-style:normal"> field</i><span style="letter-spacing:-1.5pt">]</span>]<i style="mso-bidi-font-style:
normal">...<o:p></o:p></i></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1334&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The <i style="mso-bidi-font-style:normal">field</i> declares the name, width, and initial value for the field. The syntax for each <i style="mso-bidi-font-style:normal"><span style='font-family:"Tms Rmn"'>field</span></i> is:</p>
			<p class="Syn"><i style="mso-bidi-font-style:normal">fieldname</i><b style="mso-bidi-font-weight:normal">:</b><i style="mso-bidi-font-style:normal">width</i><span style="letter-spacing:-1.5pt">[</span>[<i style="mso-bidi-font-style:normal">=expression</i><span style="letter-spacing:-1.5pt">]</span>]<i style="mso-bidi-font-style:normal"><o:p></o:p></i></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1335&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Global labels, macro names, and record field names must all be unique, but record field names can have the same names as structure field names. <i style="mso-bidi-font-style:normal"><span style='font-family:"Tms Rmn"'>Width</span></i><span style='font-family:"Tms Rmn"'> is the number of bits in the field, and <i style="mso-bidi-font-style:normal">expression</i> is a constant giving the initial (or default) value for the field. Record definitions can span more than one line if the continued lines end with commas.</span></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1336&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">If <i style="mso-bidi-font-style:normal"><span style='font-family:"Tms Rmn"'>expression</span></i><span style='font-family:
"Tms Rmn"'> is given, it declares the initial value for the field. The assembler generates an error message if an initial value is too large for the width of its field. </span></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1337&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The first field in the declaration always goes into the most significant bits of the record. Subsequent fields are placed to the right in the succeeding bits. If the fields do not total exactly 8, 16, or 32 bits as appropriate, the entire record is shifted right, so the last bit of the last field is the lowest bit of the record. Unused bits in the high end of the record are initialized to 0.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1338&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The following example creates a byte record type <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>COLOR</span> having four fields: <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>blink</span>, <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>back</span>, <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>intense</span>, and <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>fore</span>. The contents of the record type are shown after the example. Since no initial values are given, all bits are set to 0. Note that this is only a template maintained by the assembler. It allocates no space in the data segment.</p>
			<p class="Ex">COLOR<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>RECORD<span style="mso-spacerun: yes">&nbsp; </span>blink:1, back:3, intense:1, fore:3<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="Art" style="margin-left:0in"><span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp; </span><span style='mso-field-code:"include M\:\\\\SLM\\\\SRC\\\\MASM61\\\\APPS\\\\ART\\\\mpchp05\.doc art_mp0504_eps  \\\\* mergeformat"'><a name="art_mp0504_eps"></a><a name="space_mp0504_eps"><span style="mso-bookmark:
art_mp0504_eps"></span></a><!--[if supportFields]><span style='mso-bookmark:
space_mp0504_eps'><span style='mso-bookmark:art_mp0504_eps'></span></span><span
style='mso-element:field-begin'></span><span style='mso-bookmark:space_mp0504_eps'><span
style='mso-bookmark:art_mp0504_eps'>IMPORT
M:\\SLM\\SRC\\MASM61\\APPS\\ART\\MP0504.EPS \* mergeformat<span
style='mso-element:field-separator'></span></span></span><![endif]-->
			<span style="mso-bookmark:space_mp0504_eps"><span style="mso-bookmark:art_mp0504_eps"><!--[if gte vml 1]><v:shape
 id="_x0000_i1028" type="#_x0000_t75" style='width:126pt;height:78.75pt'>
 <v:imagedata src="./Chap_05_files/image007.wmz" o:href="file:///M:/SLM/SRC/MASM61/APPS/ART/MP0504.EPS"/>
</v:shape><![endif]-->
			<![if !vml]><img width="168" height="105" src="Chap_05_files/image008.gif" v:shapes="_x0000_i1028"><![endif]></span></span><!--[if supportFields]><span
style='mso-bookmark:space_mp0504_eps'><span style='mso-bookmark:art_mp0504_eps'></span></span><span
style='mso-element:field-end'></span><![endif]-->
			 <span style="mso-bookmark:
space_mp0504_eps"><span style="mso-bookmark:art_mp0504_eps"></span></span></span></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1339&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The next example creates a record type <span style='font-size:9.0pt;font-family:"Lucida Sans Typewriter"'>CW</span> that has six fields. Each record declared with this type occupies 16 bits of memory. Initial (default) values are given for each field. You can use them when declaring data for the record. The bit diagram after the example shows the contents of the record type.</p>
			<p class="Ex">CW<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>RECORD<span style="mso-spacerun: yes">&nbsp; </span>r1:3=0, ic:1=0, rc:2=0, pc:2=3, r2:2=1, masks:6=63<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="Art" style="margin-left:0in"><span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp; </span><span style='mso-field-code:"include M\:\\\\SLM\\\\SRC\\\\MASM61\\\\APPS\\\\ART\\\\mpchp05\.doc art_mp0505_eps  \\\\* mergeformat"'><a name="art_mp0505_eps"></a><a name="space_mp0505_eps"><span style="mso-bookmark:
art_mp0505_eps"></span></a><!--[if supportFields]><span style='mso-bookmark:
space_mp0505_eps'><span style='mso-bookmark:art_mp0505_eps'></span></span><span
style='mso-element:field-begin'></span><span style='mso-bookmark:space_mp0505_eps'><span
style='mso-bookmark:art_mp0505_eps'>IMPORT
M:\\SLM\\SRC\\MASM61\\APPS\\ART\\MP0505.EPS \* mergeformat<span
style='mso-element:field-separator'></span></span></span><![endif]-->
			<span style="mso-bookmark:space_mp0505_eps"><span style="mso-bookmark:art_mp0505_eps"><!--[if gte vml 1]><v:shape
 id="_x0000_i1029" type="#_x0000_t75" style='width:273.75pt;height:78pt'>
 <v:imagedata src="./Chap_05_files/image009.wmz" o:href="file:///M:/SLM/SRC/MASM61/APPS/ART/MP0505.EPS"/>
</v:shape><![endif]-->
			<![if !vml]><img width="365" height="104" src="Chap_05_files/image010.gif" v:shapes="_x0000_i1029"><![endif]></span></span><!--[if supportFields]><span
style='mso-bookmark:space_mp0505_eps'><span style='mso-bookmark:art_mp0505_eps'></span></span><span
style='mso-element:field-end'></span><![endif]-->
			 <span style="mso-bookmark:
space_mp0505_eps"><span style="mso-bookmark:art_mp0505_eps"></span></span></span></p>
			<h2 style="margin-left:0in">Defining Record Variables</h2>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;Directives:RECORD&quot; \z &quot;COMPLW.DOC-1237&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Records:RECORD syntax&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1238&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;&lt;&lt; &gt; (angle
brackets):records&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1239&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Once you have declared a record type, you can define record variables of that type. For each variable, the assembler allocates memory in the format declared by the type. The syntax is:</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Angle brackets (&lt;&lt; &gt;):records&quot;<span style='mso-hide:none'>
\z &quot;COMPLW.DOC-1240&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="letter-spacing:
-1.5pt"><o:p></o:p></span></p>
			<p class="Syn"><span style="letter-spacing:-1.5pt">[</span>[<i style="mso-bidi-font-style:
normal">name</i><span style="letter-spacing:-1.5pt">]</span>]<i style="mso-bidi-font-style:normal"> recordname </i><b style="mso-bidi-font-weight:
normal">&lt;</b><span style="letter-spacing:-1.5pt">[</span>[<i style="mso-bidi-font-style:normal">initializer </i><span style="letter-spacing:
-1.5pt">[</span>[,<i style="mso-bidi-font-style:normal">initializer</i><span style="letter-spacing:-1.5pt">]</span>]<i style="mso-bidi-font-style:normal">...</i><span style="letter-spacing:-1.5pt">]</span>]<i style="mso-bidi-font-style:normal"> </i><b style="mso-bidi-font-weight:normal">&gt;</b><i style="mso-bidi-font-style:normal"><o:p></o:p></i></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;{} (curly braces):records&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1241&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Curly braces ({}):records,
with&quot;<span style='mso-hide:none'> \z &quot;COMPLW.DOC-1242&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="letter-spacing:
-1.5pt"><o:p></o:p></span></p>
			<p class="Syn"><span style="letter-spacing:-1.5pt">[</span>[<i style="mso-bidi-font-style:
normal">name</i><span style="letter-spacing:-1.5pt">]</span>]<i style="mso-bidi-font-style:normal"> recordname </i><b style="mso-bidi-font-weight:
normal">{</b> <span style="letter-spacing:-1.5pt">[</span>[<i style="mso-bidi-font-style:
normal">initializer </i><span style="letter-spacing:-1.5pt">[</span>[,<i style="mso-bidi-font-style:normal">initializer</i><span style="letter-spacing:
-1.5pt">]</span>]<i style="mso-bidi-font-style:normal">...</i><span style="letter-spacing:-1.5pt">]</span>] <b style="mso-bidi-font-weight:normal">}</b></p>
			<p class="Syn"><span style="letter-spacing:-1.5pt">[</span>[<i style="mso-bidi-font-style:
normal">name</i><span style="letter-spacing:-1.5pt">]</span>]<i style="mso-bidi-font-style:normal"> recordname constant</i><span style="mso-spacerun: yes">&nbsp; </span><b style="mso-bidi-font-weight:normal"><i style="mso-bidi-font-style:normal">DUP</i></b> <b style="mso-bidi-font-weight:
normal">(</b><i style="mso-bidi-font-style:normal"> </i><span style="letter-spacing:
-1.5pt">[</span>[<i style="mso-bidi-font-style:normal">initializer </i><span style="letter-spacing:-1.5pt">[</span>[<i style="mso-bidi-font-style:normal">,initializer</i><span style="letter-spacing:-1.5pt">]</span>]<i style="mso-bidi-font-style:normal">...</i><span style="letter-spacing:-1.5pt">]</span>]<i style="mso-bidi-font-style:normal"> </i><b style="mso-bidi-font-weight:normal">)</b><i style="mso-bidi-font-style:normal"><o:p></o:p></i></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1340&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The <i style="mso-bidi-font-style:normal">recordname</i> is the name of a record type previously declared with the <b style="mso-bidi-font-weight:
normal">RECORD</b> directive.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;DUP operator:record variables, with&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1243&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">A <i style="mso-bidi-font-style:normal"><span style='font-family:"Tms Rmn"'>fieldlist</span></i><span style='font-family:
"Tms Rmn"'> for each field in the record can be a list of integers, character constants, or expressions that correspond to a value compatible with the size of the field. You must include curly braces or angle brackets even when you do not specify an initial value.</span></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1341&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">If you use the <b style="mso-bidi-font-weight:normal">DUP</b> operator (see &#147;Declaring and Referencing Arrays,&#148; earlier in this chapter) to initialize multiple record variables, only the angle brackets and any initial values need to be enclosed in parentheses. For example, you can define an array of record variables with</p>
			<p class="Ex">xmas<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>COLOR<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>50 DUP ( &lt;1, 2, 0, 4&gt; )<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1342&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">You do not have to initialize all fields in a record. If an initial value is blank, the assembler automatically stores the default initial value of the field. If there is no default value, the assembler clears each bit in the field.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1343&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The definition in the following example creates a variable named <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>warning</span> whose type is given by the record type <span style='font-size:9.5pt;font-family:
"Lucida Sans Typewriter"'>COLOR</span>. The initial values of the fields in the variable are set to the values given in the record definition. The initial values override any default record values given in the declaration.</p>
			<p class="Ex">COLOR<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>RECORD<span style="mso-spacerun: yes">&nbsp; </span>blink:1,back:3,intense:1,fore:3 ; Record<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>declaration<br>
			warning COLOR<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>&lt;1, 0, 1, 4&gt;<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Record<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>definition<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="Art" style="margin-left:0in"><span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp; </span><span style='mso-field-code:"include M\:\\\\SLM\\\\SRC\\\\MASM61\\\\APPS\\\\ART\\\\mpchp05\.doc art_mp0506_eps  \\\\* mergeformat"'><a name="art_mp0506_eps"></a><a name="space_mp0506_eps"><span style="mso-bookmark:
art_mp0506_eps"></span></a><!--[if supportFields]><span style='mso-bookmark:
space_mp0506_eps'><span style='mso-bookmark:art_mp0506_eps'></span></span><span
style='mso-element:field-begin'></span><span style='mso-bookmark:space_mp0506_eps'><span
style='mso-bookmark:art_mp0506_eps'>IMPORT
M:\\SLM\\SRC\\MASM61\\APPS\\ART\\MP0506.EPS \* mergeformat<span
style='mso-element:field-separator'></span></span></span><![endif]-->
			<span style="mso-bookmark:space_mp0506_eps"><span style="mso-bookmark:art_mp0506_eps"><!--[if gte vml 1]><v:shape
 id="_x0000_i1030" type="#_x0000_t75" style='width:147.75pt;height:78.75pt'>
 <v:imagedata src="./Chap_05_files/image011.wmz" o:href="file:///M:/SLM/SRC/MASM61/APPS/ART/MP0506.EPS"/>
</v:shape><![endif]-->
			<![if !vml]><img width="197" height="105" src="Chap_05_files/image012.gif" v:shapes="_x0000_i1030"><![endif]></span></span><!--[if supportFields]><span
style='mso-bookmark:space_mp0506_eps'><span style='mso-bookmark:art_mp0506_eps'></span></span><span
style='mso-element:field-end'></span><![endif]-->
			 <span style="mso-bookmark:
space_mp0506_eps"><span style="mso-bookmark:art_mp0506_eps"></span></span></span></p>
			<h3>LENGTHOF, SIZEOF, and TYPE with Records</h3>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Records:operators&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1244&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe Operators:LENGTHOF \t &quot;See LENGTHOF
operator&quot;<span style='mso-hide:none'> \z &quot;COMPLW.DOC-1245&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe Operators:SIZEOF \t &quot;See SIZEOF
operator&quot;<span style='mso-hide:none'> \z &quot;COMPLW.DOC-1246&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe Operators:TYPE \t &quot;See TYPE
operator&quot;<span style='mso-hide:none'> \z &quot;COMPLW.DOC-1247&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;LENGTHOF operator:number of
items, returning&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1248&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;SIZEOF operator:records,
with&quot;<span style='mso-hide:none'> \z &quot;COMPLW.DOC-1249&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;TYPE operator:records,
with&quot;<span style='mso-hide:none'> \z &quot;COMPLW.DOC-1250&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The <b style="mso-bidi-font-weight:normal">SIZEOF</b> and <b style="mso-bidi-font-weight:normal">TYPE</b> operators applied to a record name return the number of bytes used by the record. <b style="mso-bidi-font-weight:
normal">SIZEOF</b> returns the number of bytes a record variable occupies. You cannot use <b style="mso-bidi-font-weight:normal">LENGTHOF</b> with a record declaration, but you can use it with defined record variables. <b style="mso-bidi-font-weight:normal">LENGTHOF</b> returns the number of records in an array of records, or 1 for a single record variable. The following example illustrates these points.</p>
			<p class="Ex" style="page-break-after:auto">; Record definition<br>
			; 9 bits stored in 2 bytes<br>
			RGBCOLOR<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>RECORD<span style="mso-spacerun: yes">&nbsp; </span>red:3,<span style="mso-spacerun: yes">&nbsp; </span>green:3,<span style="mso-spacerun: yes">&nbsp; </span>blue:3<br>
			<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, RGBCOLOR<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Equivalent to &quot;mov ax, 01FFh&quot;<br>
			;<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, LENGTHOF RGBCOLOR ; Illegal since LENGTHOF can<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>;<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>apply only to data label<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, SIZEOF<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>RGBCOLOR ; Equivalent to &quot;mov ax, 2&quot;<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, TYPE<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>RGBCOLOR ; Equivalent to &quot;mov ax, 2&quot;<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="Ex">; Record instance<br>
			; 8 bits stored in 1 byte<br>
			RGBCOLOR2<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>RECORD red:3, green:3, blue:2<br>
			rgb<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>RGBCOLOR2 &lt;1, 1, 1&gt;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>; Initialize to 00100101y<br>
			<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, RGBCOLOR2<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Equivalent to<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>&quot;mov ax, 00FFh&quot;<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, LENGTHOF rgb<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Equivalent to &quot;mov ax, 1&quot;<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, SIZEOF<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>rgb<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Equivalent to &quot;mov ax, 1&quot;<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, TYPE<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>rgb<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Equivalent to &quot;mov ax, 1&quot;<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<h2 style="margin-left:0in">Record Operators</h2>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;WIDTH operator&quot;<span style='mso-hide:none'> \z
&quot;COMPLW.DOC-1251&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;MASK operator&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1252&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Operators:WIDTH&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1253&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Operators:MASK&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1254&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;MASK operator&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1255&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Records:operators&quot;<span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1256&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<a name="bmXETemp"></a><a name="FindXETemp1"><span style="mso-bookmark:bmXETemp"></span></a><!--[if supportFields]><span
style='mso-bookmark:FindXETemp1'><span style='mso-bookmark:bmXETemp'></span></span><span
style='mso-element:field-begin'></span><span style='mso-bookmark:FindXETemp1'><span
style='mso-bookmark:bmXETemp'>XE &quot;Mask:record operators, with&quot;</span></span><span
style='mso-bookmark:FindXETemp1'><span style='mso-bookmark:bmXETemp'><span
style='mso-hide:none'> \z &quot;COMPLW.DOC-1257&quot;</span></span></span><![endif]-->
			<span style="mso-bookmark:FindXETemp1"><span style="mso-bookmark:bmXETemp"></span></span><!--[if supportFields]><span
style='mso-bookmark:FindXETemp1'><span style='mso-bookmark:bmXETemp'></span></span><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-bookmark:
FindXETemp1"><span style="mso-bookmark:bmXETemp"></span></span></p>
			<p class="MsoNormal"><a name="FindXETemp">The <b style="mso-bidi-font-weight:normal">WIDTH</b> operator (used only with records) returns the width in bits of a record or record field. The <b style="mso-bidi-font-weight:normal">MASK</b> operator returns a bit mask for the bit positions occupied by the given record field. A bit in the mask contains a 1 if that bit corresponds to a bit field. The following example shows how to use <b style="mso-bidi-font-weight:normal">MASK</b> and <b style="mso-bidi-font-weight:normal">WIDTH</b>. </a></p>
			<span style="mso-bookmark:FindXETemp"></span>
			<p class="Ex" style="page-break-after:auto"><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.DATA<br>
			COLOR<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>RECORD<span style="mso-spacerun: yes">&nbsp; </span>blink:1, back:3, intense:1, fore:3<br>
			message<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>COLOR<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>&lt;1, 5, 1, 1&gt;<br>
			wblink<span style="mso-spacerun: yes">&nbsp; </span>EQU<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>WIDTH blink<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; &quot;wblink&quot;<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>= 1<br>
			wback<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>EQU<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>WIDTH back<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; &quot;wback&quot;<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>= 3<br>
			wintens EQU<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>WIDTH intense<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; &quot;wintens&quot;<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>= 1<br>
			wfore<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>EQU<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>WIDTH fore<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; &quot;wfore&quot;<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>= 3<br>
			wcolor<span style="mso-spacerun: yes">&nbsp; </span>EQU<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>WIDTH COLOR<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; &quot;wcolor&quot;<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>= 8<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.CODE<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ah, message<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Load initial<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>1101 1001<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>and<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ah, NOT MASK back<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>; Turn off<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>AND 1000 1111<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; &quot;back&quot;<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>---------<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>1000 1001<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>or<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>ah, MASK blink<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Turn on<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>OR 1000 0000<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; &quot;blink&quot;<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>---------<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>1000 1001<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>xor<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ah, MASK intense<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>; Toggle<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>XOR 0000 1000<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; &quot;intense&quot;<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>---------<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>1000 0001<br>
			<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>IF<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>(WIDTH COLOR) GT 8<span style="mso-spacerun: yes">&nbsp; </span>; If color is 16 bit, load<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, message<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>into 16-bit register<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>ELSE<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; else<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>al, message <span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>load into low 8-bit register<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>xor<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ah, ah<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>and clear high 8-bits<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>ENDIF<br style="mso-special-character:
line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;COMPLW.DOC-1344&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The example continues by illustrating several ways in which record fields can serve as operands and expressions:</p>
			<p class="Ex">; Rotate &quot;back&quot; of &quot;message&quot; without changing other values<br>
			<br>
			mov<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>al, message<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Load value from memory<br>
			mov<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ah, al<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Save a copy for work<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>1101 1001=ah/al<br>
			and<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>al, NOT MASK back; Mask out old bits<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>AND 1000 1111=mask<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>to save old message<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>---------<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>1000 1001=al<br>
			mov<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>cl, back<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Load bit position<br>
			shr<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ah, cl<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Shift to right<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>0000 1101=ah<br>
			inc<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ah<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Increment<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>0000 1110=ah<br>
			<br>
			shl<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ah, cl<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Shift left again<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>1110 0000=ah<br>
			and<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ah, MASK back<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>; Mask off extra bits<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>AND 0111 0000=mask<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>to get new message<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>---------<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>;<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>0110 0000 ah<br>
			or<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>ah, al<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Combine old and new<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>OR 1000 1001 al<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>---------<br>
			mov<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>message, ah<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Write back to memory<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>1110 1001 ah<br style="mso-special-character:
line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><a name="bkEntry"></a><!--[if supportFields]><span
style='mso-bookmark:bkEntry'></span><span style='mso-element:field-begin'></span><span
style='mso-bookmark:bkEntry'>xe &quot;aa&quot; \z &quot;COMPLW.DOC-1345&quot;</span><![endif]-->
			<span style="mso-bookmark:bkEntry"></span><!--[if supportFields]><span
style='mso-bookmark:bkEntry'></span><span style='mso-element:field-end'></span><![endif]-->
			<span style="mso-bookmark:bkEntry"></span></p>
			<p class="MsoNormal"><a name="BeginSelect"></a>Record variables are often used with the logical operators to perform logical operations on the bit fields of the record, as in the previous example using the <b style="mso-bidi-font-weight:
normal">MASK</b> operator.</p>
			<p class="MsoNormal"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
		</div>
		<div style="mso-element:comment-list">
			<![if !supportAnnotations]>
			<hr class="msocomoff" align="left" size="1" width="33%">
			<![endif]></div>
	</body>

</html>
