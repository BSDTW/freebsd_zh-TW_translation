<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40">

	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
		<meta name="ProgId" content="Word.Document">
		<meta name="Generator" content="Microsoft Word 9">
		<meta name="Originator" content="Microsoft Word 9">
		<link rel="File-List" href="Chap_06_files/filelist.xml">
		<!--[if !mso]>
<style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style>
<![endif]-->
		<title>CHAPTER 6</title>
		<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Terri Sharkey</o:Author>
  <o:Keywords>{artman 1,M:\SLM\SRC\MASM61\APPS\ART\mpchp06.doc}</o:Keywords>
  <o:Template>MSGRIDA1.DOT</o:Template>
  <o:LastAuthor>Randall Hyde</o:LastAuthor>
  <o:Revision>2</o:Revision>
  <o:TotalTime>1491</o:TotalTime>
  <o:LastPrinted>1992-10-29T22:30:00Z</o:LastPrinted>
  <o:Created>2001-09-06T23:32:00Z</o:Created>
  <o:LastSaved>2001-09-06T23:32:00Z</o:LastSaved>
  <o:Pages>27</o:Pages>
  <o:Words>6711</o:Words>
  <o:Characters>43610</o:Characters>
  <o:Company>Dell Computer Corporation</o:Company>
  <o:Version>9.3821</o:Version>
 </o:DocumentProperties>
</xml><![endif]-->
		<!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:PrintFractionalCharacterWidth/>
  <w:HideSpellingErrors/>
  <w:HideGrammaticalErrors/>
  <w:DoNotHyphenateCaps/>
  <w:DrawingGridHorizontalSpacing>6 pt</w:DrawingGridHorizontalSpacing>
  <w:DrawingGridVerticalSpacing>6 pt</w:DrawingGridVerticalSpacing>
  <w:DisplayVerticalDrawingGridEvery>0</w:DisplayVerticalDrawingGridEvery>
  <w:UseMarginsForDrawingGridOrigin/>
  <w:Compatibility>
   <w:PrintColBlack/>
   <w:ShowBreaksInFrames/>
   <w:SuppressSpBfAfterPgBrk/>
   <w:SwapBordersFacingPages/>
   <w:ConvMailMergeEsc/>
   <w:UsePrinterMetrics/>
   <w:FootnoteLayoutLikeWW8/>
   <w:ShapeLayoutLikeWW8/>
   <w:AlignTablesRowByRow/>
   <w:ForgetLastTabAlignment/>
   <w:NoSpaceRaiseLower/>
   <w:LayoutRawTableWidth/>
   <w:LayoutTableRowsApart/>
  </w:Compatibility>
 </w:WordDocument>
</xml><![endif]-->
		<style>
<!--
 /* Font Definitions */
@font-face
	{font-family:Times;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:0;
	mso-generic-font-family:roman;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:"Tms Rmn";
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:0;
	mso-generic-font-family:roman;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:Helvetica-Narrow;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:"Arial Narrow";
	panose-1:2 11 5 6 2 2 2 3 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:647 0 0 0 159 0;}
@font-face
	{font-family:"Lucida Sans Typewriter";
	panose-1:2 11 5 9 3 5 4 3 2 4;
	mso-font-charset:0;
	mso-generic-font-family:modern;
	mso-font-pitch:fixed;
	mso-font-signature:3 0 0 0 1 0;}
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
h1
	{mso-style-parent:"";
	mso-style-next:Normal;
	margin-top:10.0pt;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:-1.25in;
	line-height:22.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-outline-level:1;
	font-size:20.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-font-kerning:0pt;
	mso-bidi-font-weight:normal;}
h2
	{mso-style-parent:"Heading 1";
	mso-style-next:Normal;
	margin-top:7.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:-1.25in;
	line-height:19.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-outline-level:2;
	font-size:17.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-bidi-font-weight:normal;}
h3
	{mso-style-parent:"Heading 1";
	mso-style-next:Normal;
	margin-top:4.0pt;
	margin-right:0in;
	margin-bottom:2.0pt;
	margin-left:0in;
	line-height:17.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-outline-level:3;
	font-size:15.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-bidi-font-weight:normal;}
h4
	{mso-style-parent:"Heading 1";
	mso-style-next:Normal;
	margin-top:3.0pt;
	margin-right:0in;
	margin-bottom:2.0pt;
	margin-left:0in;
	line-height:14.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-bidi-font-weight:normal;}
h5
	{mso-style-parent:"Heading 1";
	mso-style-next:Normal;
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:2.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:5;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-bidi-font-weight:normal;}
h6
	{mso-style-parent:"Heading 1";
	mso-style-next:H6p;
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	line-height:11.9pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:6;
	mso-element:frame;
	mso-element-frame-height:12.75pt;
	mso-element-frame-hspace:6.5pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:column;
	mso-element-top:.05pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-bidi-font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{mso-style-next:"Normal Indent";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:.5in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	mso-outline-level:7;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-style:italic;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{mso-style-next:"Normal Indent";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:.5in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	mso-outline-level:8;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-style:italic;}
p.MsoHeading9, li.MsoHeading9, div.MsoHeading9
	{mso-style-next:"Normal Indent";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:.5in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	mso-outline-level:9;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoIndex1, li.MsoIndex1, div.MsoIndex1
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoIndex2, li.MsoIndex2, div.MsoIndex2
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:.25in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoIndex3, li.MsoIndex3, div.MsoIndex3
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:.5in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoIndex4, li.MsoIndex4, div.MsoIndex4
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:.75in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoIndex5, li.MsoIndex5, div.MsoIndex5
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:1.0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoIndex6, li.MsoIndex6, div.MsoIndex6
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:1.25in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoIndex7, li.MsoIndex7, div.MsoIndex7
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:1.5in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoToc1, li.MsoToc1, div.MsoToc1
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:2.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:right dotted 348.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoToc2, li.MsoToc2, div.MsoToc2
	{mso-style-parent:"TOC 1";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:2.0pt;
	margin-left:14.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:right dotted 348.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoToc3, li.MsoToc3, div.MsoToc3
	{mso-style-parent:"TOC 1";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:2.0pt;
	margin-left:28.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:right dotted 348.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoToc4, li.MsoToc4, div.MsoToc4
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:.5in;
	margin-bottom:8.0pt;
	margin-left:1.5in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	tab-stops:dotted 5.75in right blank 6.0in;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoToc5, li.MsoToc5, div.MsoToc5
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:.5in;
	margin-bottom:8.0pt;
	margin-left:2.0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	tab-stops:dotted 5.75in right blank 6.0in;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoToc6, li.MsoToc6, div.MsoToc6
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:.5in;
	margin-bottom:8.0pt;
	margin-left:2.5in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	tab-stops:dotted 5.75in right blank 6.0in;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoToc7, li.MsoToc7, div.MsoToc7
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:.5in;
	margin-bottom:8.0pt;
	margin-left:3.0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	tab-stops:dotted 5.75in right blank 6.0in;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoToc8, li.MsoToc8, div.MsoToc8
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:.5in;
	margin-bottom:8.0pt;
	margin-left:3.5in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	tab-stops:dotted 5.75in right blank 6.0in;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoNormalIndent, li.MsoNormalIndent, div.MsoNormalIndent
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:14.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoFootnoteText, li.MsoFootnoteText, div.MsoFootnoteText
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoCommentText, li.MsoCommentText, div.MsoCommentText
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:9.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:green;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{mso-style-parent:"";
	mso-style-next:"header rule";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:-1.25in;
	margin-bottom:.0001pt;
	line-height:10.5pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	tab-stops:right 348.0pt;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	line-height:7.0pt;
	mso-pagination:widow-orphan;
	mso-element:frame;
	mso-element-wrap:around;
	mso-element-anchor-vertical:page;
	mso-element-anchor-horizontal:page;
	mso-element-left:100.0pt;
	mso-element-top:735.15pt;
	mso-height-rule:exactly;
	font-size:5.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoIndexHeading, li.MsoIndexHeading, div.MsoIndexHeading
	{mso-style-next:"Index 1";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
span.MsoFootnoteReference
	{mso-ansi-font-size:8.0pt;
	mso-bidi-font-size:8.0pt;
	mso-text-raise:3.0pt;}
span.MsoCommentReference
	{color:green;}
p.Wh, li.Wh, div.Wh
	{mso-style-name:Wh;
	mso-style-parent:Nh;
	mso-style-next:Np1;
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	line-height:11.9pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-element:frame;
	mso-element-frame-height:11.75pt;
	mso-element-frame-hspace:6.5pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:column;
	mso-element-top:.05pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:blue;
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Ws, li.Ws, div.Ws
	{mso-style-name:Ws;
	mso-style-parent:"";
	mso-style-next:Wh;
	margin-top:2.0pt;
	margin-right:1.5pt;
	margin-bottom:0in;
	margin-left:1.5pt;
	margin-bottom:.0001pt;
	line-height:4.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	border:none;
	mso-border-bottom-alt:double blue 2.25pt;
	padding:0in;
	mso-padding-alt:0in 0in 0in 0in;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:white;}
p.We, li.We, div.We
	{mso-style-name:We;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:1.5pt;
	margin-bottom:0in;
	margin-left:1.5pt;
	margin-bottom:.0001pt;
	line-height:10.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	border:none;
	mso-border-top-alt:double blue 2.25pt;
	padding:0in;
	mso-padding-alt:1.0pt 0in 0in 0in;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:white;}
p.Np1, li.Np1, div.Np1
	{mso-style-name:Np1;
	mso-style-parent:Np2;
	mso-style-next:Ne;
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Nh, li.Nh, div.Nh
	{mso-style-name:Nh;
	mso-style-parent:"";
	mso-style-next:Np1;
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	line-height:11.9pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-element:frame;
	mso-element-frame-height:11.75pt;
	mso-element-frame-hspace:6.5pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:column;
	mso-element-top:.05pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Ne, li.Ne, div.Ne
	{mso-style-name:Ne;
	mso-style-parent:"";
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:1.5pt;
	margin-bottom:2.0pt;
	margin-left:1.5pt;
	line-height:7.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	border:none;
	mso-border-top-alt:solid windowtext .75pt;
	padding:0in;
	mso-padding-alt:1.0pt 0in 0in 0in;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:white;}
p.Ns, li.Ns, div.Ns
	{mso-style-name:Ns;
	mso-style-parent:"";
	mso-style-next:Nh;
	margin-top:0in;
	margin-right:1.5pt;
	margin-bottom:0in;
	margin-left:1.5pt;
	margin-bottom:.0001pt;
	line-height:4.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	border:none;
	mso-border-bottom-alt:solid windowtext .75pt;
	padding:0in;
	mso-padding-alt:0in 0in 1.0pt 0in;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:white;}
p.Nhi, li.Nhi, div.Nhi
	{mso-style-name:Nhi;
	mso-style-parent:Nh;
	mso-style-next:Np1i;
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:14.0pt;
	margin-bottom:.0001pt;
	line-height:11.9pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-element:frame;
	mso-element-frame-height:11.75pt;
	mso-element-frame-hspace:6.5pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:column;
	mso-element-top:.05pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Nsi, li.Nsi, div.Nsi
	{mso-style-name:Nsi;
	mso-style-parent:Ns;
	mso-style-next:Nhi;
	margin-top:0in;
	margin-right:1.5pt;
	margin-bottom:0in;
	margin-left:15.5pt;
	margin-bottom:.0001pt;
	line-height:4.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	border:none;
	mso-border-bottom-alt:solid windowtext .75pt;
	padding:0in;
	mso-padding-alt:0in 0in 1.0pt 0in;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:white;}
p.Np1i, li.Np1i, div.Np1i
	{mso-style-name:Np1i;
	mso-style-parent:Np1;
	mso-style-next:Nei;
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:14.0pt;
	text-indent:-14.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Nei, li.Nei, div.Nei
	{mso-style-name:Nei;
	mso-style-parent:Ne;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:1.5pt;
	margin-bottom:0in;
	margin-left:15.5pt;
	margin-bottom:.0001pt;
	line-height:7.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	border:none;
	mso-border-top-alt:solid windowtext .75pt;
	padding:0in;
	mso-padding-alt:1.0pt 0in 0in 0in;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:white;}
p.Wsi, li.Wsi, div.Wsi
	{mso-style-name:Wsi;
	mso-style-parent:Ws;
	mso-style-next:Whi;
	margin-top:2.0pt;
	margin-right:1.5pt;
	margin-bottom:0in;
	margin-left:15.5pt;
	margin-bottom:.0001pt;
	line-height:4.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	border:none;
	mso-border-bottom-alt:double blue 2.25pt;
	padding:0in;
	mso-padding-alt:0in 0in 0in 0in;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:white;}
p.Whi, li.Whi, div.Whi
	{mso-style-name:Whi;
	mso-style-parent:Nhi;
	mso-style-next:Np1i;
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:14.0pt;
	margin-bottom:.0001pt;
	line-height:11.9pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-element:frame;
	mso-element-frame-height:11.75pt;
	mso-element-frame-hspace:6.5pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:column;
	mso-element-top:.05pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:blue;
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Wei, li.Wei, div.Wei
	{mso-style-name:Wei;
	mso-style-parent:We;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:1.5pt;
	margin-bottom:0in;
	margin-left:15.5pt;
	margin-bottom:.0001pt;
	line-height:7.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	border:none;
	mso-border-top-alt:double blue 2.25pt;
	padding:0in;
	mso-padding-alt:1.0pt 0in 0in 0in;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:white;}
p.Sbre, li.Sbre, div.Sbre
	{mso-style-name:Sbre;
	mso-style-parent:"";
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:-12.0pt;
	line-height:10.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Sbrh, li.Sbrh, div.Sbrh
	{mso-style-name:Sbrh;
	mso-style-parent:"";
	mso-style-next:Sbrp;
	margin-top:3.0pt;
	margin-right:14.0pt;
	margin-bottom:2.0pt;
	margin-left:14.0pt;
	line-height:14.0pt;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	background:#FFFFBA;
	mso-shading:windowtext;
	mso-pattern:gray-40 yellow;
	border:none;
	mso-border-alt:solid white 1.5pt;
	padding:0in;
	mso-padding-alt:14.0pt 14.0pt 14.0pt 14.0pt;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Sbrs, li.Sbrs, div.Sbrs
	{mso-style-name:Sbrs;
	mso-style-parent:"";
	mso-style-next:Sbrh;
	margin-top:0in;
	margin-right:14.0pt;
	margin-bottom:0in;
	margin-left:14.0pt;
	margin-bottom:.0001pt;
	line-height:5.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:4.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Tt, li.Tt, div.Tt
	{mso-style-name:Tt;
	mso-style-parent:"";
	mso-style-next:Th;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Th, li.Th, div.Th
	{mso-style-name:Th;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:12.0pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Tp, li.Tp, div.Tp
	{mso-style-name:Tp;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:12.0pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:14.0pt 28.0pt;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Te, li.Te, div.Te
	{mso-style-name:Te;
	mso-style-next:Normal;
	margin-top:4.0pt;
	margin-right:1.5pt;
	margin-bottom:4.0pt;
	margin-left:1.5pt;
	text-align:right;
	line-height:9.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	border:none;
	mso-border-top-alt:solid windowtext .75pt;
	padding:0in;
	mso-padding-alt:1.0pt 0in 0in 0in;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Le, li.Le, div.Le
	{mso-style-name:Le;
	mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	text-align:right;
	line-height:8.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.H6p, li.H6p, div.H6p
	{mso-style-name:H6p;
	mso-style-next:Normal;
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Ttw, li.Ttw, div.Ttw
	{mso-style-name:Ttw;
	mso-style-parent:Tt;
	mso-style-next:Th;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:-1.25in;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.ih, li.ih, div.ih
	{mso-style-name:ih;
	mso-style-parent:"";
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:21.0pt;
	margin-left:-1.25in;
	line-height:30.0pt;
	mso-line-height-rule:exactly;
	page-break-before:always;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:24.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Ch, li.Ch, div.Ch
	{mso-style-name:Ch;
	mso-style-parent:"";
	mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	line-height:27.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-element:frame;
	mso-element-frame-width:336.0pt;
	mso-element-frame-height:123.0pt;
	mso-element-wrap:no-wrap-beside;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:margin;
	mso-element-left:-1.25in;
	mso-element-top:.05pt;
	mso-height-rule:exactly;
	font-size:24.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Ln1, li.Ln1, div.Ln1
	{mso-style-name:Ln1;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:14.0pt;
	text-indent:-22.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:right 8.0pt left 14.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Lb1, li.Lb1, div.Lb1
	{mso-style-name:Lb1;
	mso-style-parent:Ln1;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:14.0pt;
	text-indent:-14.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:14.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Ex, li.Ex, div.Ex
	{mso-style-name:Ex;
	mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:19.0pt 38.0pt 57.0pt 76.0pt 95.0pt 114.0pt 133.0pt 152.0pt 171.0pt 190.0pt;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Lucida Sans Typewriter";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.Proch, li.Proch, div.Proch
	{mso-style-name:Proch;
	mso-style-parent:"";
	mso-style-next:Ln1;
	margin-top:4.0pt;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:0in;
	text-indent:-.25in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:0in;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Hn1, li.Hn1, div.Hn1
	{mso-style-name:Hn1;
	mso-style-parent:"Heading 1";
	mso-style-next:Normal;
	margin-top:10.0pt;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:-1.25in;
	line-height:22.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-outline-level:1;
	font-size:20.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Hn2, li.Hn2, div.Hn2
	{mso-style-name:Hn2;
	mso-style-parent:"Heading 2";
	mso-style-next:Normal;
	margin-top:7.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:-1.25in;
	line-height:19.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-outline-level:2;
	font-size:17.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Mp, li.Mp, div.Mp
	{mso-style-name:Mp;
	mso-style-parent:"";
	mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-element:frame;
	mso-element-frame-width:78.0pt;
	mso-element-frame-hspace:12.0pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:page;
	mso-element-top:.05pt;
	mso-height-rule:exactly;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.Lp1, li.Lp1, div.Lp1
	{mso-style-name:Lp1;
	mso-style-parent:Ln1;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:14.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:right 8.0pt left 14.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Np2, li.Np2, div.Np2
	{mso-style-name:Np2;
	mso-style-next:Ne;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Erm, li.Erm, div.Erm
	{mso-style-name:Erm;
	mso-style-next:Erp;
	margin-top:5.0pt;
	margin-right:12.0pt;
	margin-bottom:2.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Erp, li.Erp, div.Erp
	{mso-style-name:Erp;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:5.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Cn, li.Cn, div.Cn
	{mso-style-name:Cn;
	mso-style-parent:"";
	mso-style-next:Ch;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:14.0pt;
	margin-left:-1.25in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	text-transform:uppercase;
	letter-spacing:6.0pt;}
p.Lb2, li.Lb2, div.Lb2
	{mso-style-name:Lb2;
	mso-style-parent:Lb1;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:28.0pt;
	text-indent:-14.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:28.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Exl, li.Exl, div.Exl
	{mso-style-name:Exl;
	mso-style-parent:Ex;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:14.0pt;
	margin-bottom:.0001pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:33.0pt 52.0pt 71.0pt 1.25in 109.0pt 128.0pt 147.0pt 166.0pt 185.0pt 204.0pt;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Lucida Sans Typewriter";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.Cap, li.Cap, div.Cap
	{mso-style-name:Cap;
	mso-style-parent:"";
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:12.0pt;
	margin-left:0in;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:14.0pt 28.0pt;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Ln2, li.Ln2, div.Ln2
	{mso-style-name:Ln2;
	mso-style-parent:Ln1;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:28.0pt;
	text-indent:-30.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:right 22.0pt left 28.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Lp2, li.Lp2, div.Lp2
	{mso-style-name:Lp2;
	mso-style-parent:Lp1;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:28.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:right 8.0pt left 14.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Rh1, li.Rh1, div.Rh1
	{mso-style-name:Rh1;
	mso-style-parent:"Heading 1";
	mso-style-next:Rmh;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:13.0pt;
	margin-left:-1.25in;
	line-height:22.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:1;
	font-size:20.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Rmh, li.Rmh, div.Rmh
	{mso-style-name:Rmh;
	mso-style-parent:"";
	mso-style-next:Normal;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-element:frame;
	mso-element-frame-width:78.0pt;
	mso-element-frame-hspace:12.0pt;
	mso-element-frame-vspace:12.0pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:page;
	mso-element-top:.05pt;
	mso-height-rule:exactly;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.headerrule, li.headerrule, div.headerrule
	{mso-style-name:"header rule";
	mso-style-parent:"";
	mso-style-next:Normal;
	margin-top:2.5pt;
	margin-right:1.5pt;
	margin-bottom:0in;
	margin-left:-88.5pt;
	margin-bottom:.0001pt;
	line-height:4.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	border:none;
	mso-border-top-alt:solid blue .75pt;
	padding:0in;
	mso-padding-alt:0in 0in 0in 0in;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Ermn, li.Ermn, div.Ermn
	{mso-style-name:Ermn;
	mso-style-parent:Erm;
	margin-top:1.0pt;
	margin-right:12.0pt;
	margin-bottom:3.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Sbrp, li.Sbrp, div.Sbrp
	{mso-style-name:Sbrp;
	mso-style-parent:"";
	mso-style-next:Sbre;
	margin-top:0in;
	margin-right:14.0pt;
	margin-bottom:8.0pt;
	margin-left:14.0pt;
	line-height:12.0pt;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	background:#FFFFBA;
	mso-shading:windowtext;
	mso-pattern:gray-40 yellow;
	border:none;
	mso-border-alt:solid white 1.5pt;
	padding:0in;
	mso-padding-alt:14.0pt 14.0pt 14.0pt 14.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Hn3, li.Hn3, div.Hn3
	{mso-style-name:Hn3;
	mso-style-parent:"Heading 3";
	mso-style-next:Normal;
	margin-top:4.0pt;
	margin-right:0in;
	margin-bottom:2.0pt;
	margin-left:0in;
	line-height:17.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-outline-level:3;
	font-size:15.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Term1, li.Term1, div.Term1
	{mso-style-name:Term1;
	mso-style-parent:"";
	mso-style-next:Def1;
	margin:0in;
	margin-bottom:.0001pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Lbp, li.Lbp, div.Lbp
	{mso-style-name:Lbp;
	mso-style-parent:Lb1;
	mso-style-next:Le;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:14.0pt;
	text-indent:-14.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:14.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Np2i, li.Np2i, div.Np2i
	{mso-style-name:Np2i;
	mso-style-parent:Np2;
	mso-style-next:Nei;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:14.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Term2, li.Term2, div.Term2
	{mso-style-name:Term2;
	mso-style-parent:Term1;
	mso-style-next:Def2;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:14.0pt;
	margin-bottom:.0001pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Def1, li.Def1, div.Def1
	{mso-style-name:Def1;
	mso-style-next:Term1;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:14.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Def2, li.Def2, div.Def2
	{mso-style-name:Def2;
	mso-style-parent:Def1;
	mso-style-next:Term2;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:28.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Rule, li.Rule, div.Rule
	{mso-style-name:Rule;
	mso-style-parent:"";
	mso-style-next:Rh1;
	margin-top:14.0pt;
	margin-right:1.5pt;
	margin-bottom:8.0pt;
	margin-left:-88.5pt;
	line-height:6.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	border:none;
	mso-border-bottom-alt:solid windowtext .75pt;
	padding:0in;
	mso-padding-alt:0in 0in 0in 0in;
	font-size:4.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:white;}
p.Exw, li.Exw, div.Exw
	{mso-style-name:Exw;
	mso-style-parent:Ex;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:-1.25in;
	margin-bottom:.0001pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:-71.0pt -52.0pt -33.0pt -14.0pt 5.0pt 24.0pt 43.0pt 62.0pt 81.0pt 100.0pt;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Lucida Sans Typewriter";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.Syn, li.Syn, div.Syn
	{mso-style-name:Syn;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:14.0pt 21.0pt 28.0pt 35.0pt 42.0pt 49.0pt 56.0pt 63.0pt 70.0pt 77.0pt 84.0pt 91.0pt 98.0pt 105.0pt 112.0pt 119.0pt 1.75in 133.0pt 140.0pt 147.0pt 154.0pt 161.0pt 168.0pt 175.0pt 182.0pt 189.0pt 196.0pt 203.0pt 210.0pt 217.0pt 224.0pt 231.0pt 238.0pt 245.0pt 3.5in 259.0pt 266.0pt 273.0pt 280.0pt 287.0pt 294.0pt 301.0pt 308.0pt 315.0pt 322.0pt 329.0pt 336.0pt 343.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Synw, li.Synw, div.Synw
	{mso-style-name:Synw;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:-1.25in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:-76.0pt -62.0pt -48.0pt -34.0pt -20.0pt -6.0pt 8.0pt 14.0pt 21.0pt 28.0pt 35.0pt 42.0pt 49.0pt 56.0pt 63.0pt 70.0pt 77.0pt 84.0pt 91.0pt 98.0pt 105.0pt 112.0pt 119.0pt 1.75in 133.0pt 140.0pt 147.0pt 154.0pt 161.0pt 168.0pt 175.0pt 182.0pt 189.0pt 196.0pt 203.0pt 210.0pt 217.0pt 224.0pt 231.0pt 238.0pt 245.0pt 3.5in 259.0pt 266.0pt 273.0pt 280.0pt 287.0pt 294.0pt 301.0pt 308.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Leh, li.Leh, div.Leh
	{mso-style-name:Leh;
	mso-style-parent:Le;
	mso-style-next:"Heading 1";
	margin:0in;
	margin-bottom:.0001pt;
	text-align:right;
	line-height:4.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Lmc, li.Lmc, div.Lmc
	{mso-style-name:Lmc;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Pb, li.Pb, div.Pb
	{mso-style-name:Pb;
	mso-style-parent:"";
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:-14.0pt;
	margin-bottom:.0001pt;
	line-height:4.0pt;
	mso-line-height-rule:exactly;
	page-break-before:always;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-element:frame;
	mso-element-frame-hspace:9.0pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:page;
	mso-element-top:.05pt;
	mso-height-rule:exactly;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Procp, li.Procp, div.Procp
	{mso-style-name:Procp;
	mso-style-next:Ln1;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Tpi, li.Tpi, div.Tpi
	{mso-style-name:Tpi;
	mso-style-parent:Tp;
	mso-style-next:Tp;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:26.0pt;
	text-indent:-14.0pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:26.0pt;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Tpr, li.Tpr, div.Tpr
	{mso-style-name:Tpr;
	mso-style-parent:Tp;
	mso-style-next:Tp;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:12.0pt;
	text-align:right;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Texf, li.Texf, div.Texf
	{mso-style-name:Texf;
	mso-style-parent:Ex;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:19.0pt 38.0pt 57.0pt 76.0pt 95.0pt;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Lucida Sans Typewriter";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.Tf, li.Tf, div.Tf
	{mso-style-name:Tf;
	mso-style-parent:Tp;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:2.0pt;
	margin-left:7.0pt;
	text-indent:-7.0pt;
	line-height:10.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:14.0pt;
	font-size:8.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Tpf, li.Tpf, div.Tpf
	{mso-style-name:Tpf;
	mso-style-parent:Tp;
	mso-style-next:Tp;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:14.0pt 28.0pt;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Tew, li.Tew, div.Tew
	{mso-style-name:Tew;
	mso-style-parent:Te;
	mso-style-next:Normal;
	margin-top:4.0pt;
	margin-right:1.5pt;
	margin-bottom:4.0pt;
	margin-left:-88.5pt;
	text-align:right;
	line-height:9.0pt;
	mso-pagination:widow-orphan lines-together;
	border:none;
	mso-border-top-alt:solid windowtext .75pt;
	padding:0in;
	mso-padding-alt:1.0pt 0in 0in 0in;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Art, li.Art, div.Art
	{mso-style-name:Art;
	mso-style-parent:"";
	mso-style-next:Cap;
	margin-top:4.0pt;
	margin-right:0in;
	margin-bottom:12.0pt;
	margin-left:-1.25in;
	mso-pagination:widow-orphan lines-together;
	tab-stops:0in 14.0pt 28.0pt;
	font-size:14.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Thf, li.Thf, div.Thf
	{mso-style-name:Thf;
	mso-style-parent:Th;
	mso-style-next:Th;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Tpif, li.Tpif, div.Tpif
	{mso-style-name:Tpif;
	mso-style-parent:Tpi;
	mso-style-next:Tp;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:14.0pt;
	text-indent:-14.0pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:14.0pt;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Tr, li.Tr, div.Tr
	{mso-style-name:Tr;
	mso-style-parent:"";
	mso-style-next:Tpf;
	margin:0in;
	margin-bottom:.0001pt;
	text-align:right;
	line-height:1.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	border:none;
	mso-border-top-alt:solid windowtext .75pt;
	padding:0in;
	mso-padding-alt:0in 0in 0in 0in;
	font-size:4.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Ph, li.Ph, div.Ph
	{mso-style-name:Ph;
	mso-style-parent:Ch;
	mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	line-height:32.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-element:frame;
	mso-element-frame-width:336.0pt;
	mso-element-frame-height:123.0pt;
	mso-element-frame-hspace:9.0pt;
	mso-element-wrap:no-wrap-beside;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:margin;
	mso-element-left:-1.25in;
	mso-element-top:.15pt;
	mso-height-rule:exactly;
	font-size:30.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:blue;}
p.index, li.index, div.index
	{mso-style-name:index;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:fuchsia;
	display:none;
	mso-hide:all;}
p.CapSd, li.CapSd, div.CapSd
	{mso-style-name:CapSd;
	mso-style-parent:Cap;
	margin:0in;
	margin-bottom:.0001pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:right 78.0pt;
	mso-element:frame;
	mso-element-frame-width:78.0pt;
	mso-element-frame-hspace:12.0pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:page;
	mso-element-top:.05pt;
	mso-height-rule:exactly;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.ArtSd, li.ArtSd, div.ArtSd
	{mso-style-name:ArtSd;
	mso-style-parent:Art;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:12.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:right 78.0pt;
	mso-element:frame;
	mso-element-frame-width:78.0pt;
	mso-element-frame-hspace:12.0pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:page;
	mso-element-top:.05pt;
	mso-height-rule:exactly;
	font-size:14.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Tex, li.Tex, div.Tex
	{mso-style-name:Tex;
	mso-style-parent:Texf;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:12.0pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:31.0pt 50.0pt 69.0pt 88.0pt 107.0pt;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Lucida Sans Typewriter";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.hb1, li.hb1, div.hb1
	{mso-style-name:*hb1;
	mso-style-parent:"Heading 4";
	mso-style-next:"Heading 4";
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:2.0pt;
	margin-left:0in;
	text-align:center;
	line-height:17.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-outline-level:4;
	background:#9C9CFF;
	mso-shading:windowtext;
	mso-pattern:gray-60 blue;
	mso-element:frame;
	mso-element-frame-width:75.0pt;
	mso-element-frame-hspace:12.0pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:margin;
	mso-element-left:-1.25in;
	mso-element-top:.05pt;
	mso-height-rule:exactly;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:white;
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.hb2, li.hb2, div.hb2
	{mso-style-name:*hb2;
	mso-style-parent:*hb1;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:1.0pt;
	margin-left:0in;
	text-indent:4.0pt;
	line-height:18.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-outline-level:4;
	background:#9C9CFF;
	mso-shading:windowtext;
	mso-pattern:gray-60 blue;
	mso-element:frame;
	mso-element-frame-hspace:12.0pt;
	mso-element-wrap:around;
	mso-element-anchor-vertical:paragraph;
	mso-element-anchor-horizontal:margin;
	mso-element-left:right;
	mso-element-top:.1pt;
	mso-height-rule:exactly;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:white;
	mso-text-raise:1.5pt;
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Cbx, li.Cbx, div.Cbx
	{mso-style-name:*Cbx;
	mso-style-parent:"";
	margin-top:2.0pt;
	margin-right:0in;
	margin-bottom:2.0pt;
	margin-left:8.0pt;
	line-height:10.5pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:22.0pt;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.Cbxe, li.Cbxe, div.Cbxe
	{mso-style-name:*Cbxe;
	mso-style-parent:Te;
	margin-top:0in;
	margin-right:1.5pt;
	margin-bottom:4.0pt;
	margin-left:-9.0pt;
	line-height:10.5pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:lined 348.0pt;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Tart, li.Tart, div.Tart
	{mso-style-name:Tart;
	mso-style-parent:Tp;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan lines-together;
	tab-stops:12.0pt 14.0pt 28.0pt;
	font-size:9.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Sbrh2, li.Sbrh2, div.Sbrh2
	{mso-style-name:Sbrh2;
	mso-style-parent:"Heading 5";
	mso-style-next:Sbrp;
	margin-top:2.0pt;
	margin-right:14.0pt;
	margin-bottom:2.0pt;
	margin-left:14.0pt;
	line-height:12.0pt;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-outline-level:5;
	background:#FFFFBA;
	mso-shading:windowtext;
	mso-pattern:gray-40 yellow;
	border:none;
	mso-border-alt:solid white 1.5pt;
	padding:0in;
	mso-padding-alt:14.0pt 14.0pt 14.0pt 14.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Arial Narrow";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.SbrLb, li.SbrLb, div.SbrLb
	{mso-style-name:SbrLb;
	mso-style-parent:Lb2;
	margin-top:0in;
	margin-right:14.0pt;
	margin-bottom:4.0pt;
	margin-left:28.0pt;
	text-indent:-14.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:28.0pt;
	background:#FFFFBA;
	mso-shading:windowtext;
	mso-pattern:gray-40 yellow;
	border:none;
	mso-border-alt:solid white 1.5pt;
	padding:0in;
	mso-padding-alt:14.0pt 14.0pt 14.0pt 14.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Tei, li.Tei, div.Tei
	{mso-style-name:Tei;
	margin-top:4.0pt;
	margin-right:1.5pt;
	margin-bottom:4.0pt;
	margin-left:15.5pt;
	text-align:right;
	line-height:9.0pt;
	mso-pagination:widow-orphan lines-together;
	border:none;
	mso-border-top-alt:solid windowtext .75pt;
	padding:0in;
	mso-padding-alt:1.0pt 0in 0in 0in;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.SbrLp, li.SbrLp, div.SbrLp
	{mso-style-name:SbrLp;
	mso-style-parent:SbrLb;
	margin-top:0in;
	margin-right:14.0pt;
	margin-bottom:4.0pt;
	margin-left:28.0pt;
	text-indent:-14.0pt;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	tab-stops:28.0pt;
	background:#FFFFBA;
	mso-shading:windowtext;
	mso-pattern:gray-40 yellow;
	border:none;
	mso-border-alt:solid white 1.5pt;
	padding:0in;
	mso-padding-alt:14.0pt 14.0pt 14.0pt 14.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.SbrEx, li.SbrEx, div.SbrEx
	{mso-style-name:SbrEx;
	mso-style-parent:Exl;
	margin-top:0in;
	margin-right:14.0pt;
	margin-bottom:0in;
	margin-left:14.0pt;
	margin-bottom:.0001pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:33.0pt 52.0pt 71.0pt 1.25in 109.0pt 128.0pt 147.0pt 166.0pt 185.0pt 204.0pt;
	background:#FFFFBA;
	mso-shading:windowtext;
	mso-pattern:gray-40 yellow;
	border:none;
	mso-border-alt:solid white 1.5pt;
	padding:0in;
	mso-padding-alt:14.0pt 14.0pt 14.0pt 14.0pt;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Lucida Sans Typewriter";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.Exl2, li.Exl2, div.Exl2
	{mso-style-name:Exl2;
	mso-style-parent:Exl;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:28.0pt;
	margin-bottom:.0001pt;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:33.0pt 52.0pt 71.0pt 1.25in 109.0pt 128.0pt 147.0pt 166.0pt 185.0pt 204.0pt;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Lucida Sans Typewriter";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.Tes, li.Tes, div.Tes
	{mso-style-name:Tes;
	mso-style-parent:Le;
	mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	text-align:right;
	line-height:8.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Teh, li.Teh, div.Teh
	{mso-style-name:Teh;
	mso-style-parent:Leh;
	mso-style-next:"Heading 1";
	margin:0in;
	margin-bottom:.0001pt;
	text-align:right;
	line-height:4.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.SbrLe, li.SbrLe, div.SbrLe
	{mso-style-name:SbrLe;
	mso-style-parent:Le;
	mso-style-next:Sbrp;
	margin-top:0in;
	margin-right:14.0pt;
	margin-bottom:0in;
	margin-left:14.0pt;
	margin-bottom:.0001pt;
	text-align:right;
	line-height:8.0pt;
	mso-pagination:widow-orphan lines-together;
	background:#FFFFBA;
	mso-shading:windowtext;
	mso-pattern:gray-40 yellow;
	border:none;
	mso-border-alt:solid white 1.5pt;
	padding:0in;
	mso-padding-alt:14.0pt 14.0pt 14.0pt 14.0pt;
	font-size:6.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.Tsyn, li.Tsyn, div.Tsyn
	{mso-style-name:Tsyn;
	mso-style-parent:Syn;
	margin-top:1.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	line-height:12.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	tab-stops:14.0pt 21.0pt 28.0pt 35.0pt 42.0pt 49.0pt 56.0pt 63.0pt 70.0pt 77.0pt 84.0pt 91.0pt 98.0pt 105.0pt 112.0pt 119.0pt 1.75in 133.0pt 140.0pt 147.0pt 154.0pt 161.0pt 168.0pt 175.0pt 182.0pt 189.0pt 196.0pt 203.0pt 210.0pt 217.0pt 224.0pt 231.0pt 238.0pt 245.0pt 3.5in 259.0pt 266.0pt 273.0pt 280.0pt 287.0pt 294.0pt 301.0pt 308.0pt 315.0pt 322.0pt 329.0pt 336.0pt 343.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
 /* Page Definitions */
@page
	{mso-facing-pages:yes;}
@page Section1
	{size:8.5in 11.0in;
	margin:-130.0pt 76.5pt -120.0pt 166.5pt;
	mso-header-margin:99.35pt;
	mso-footer-margin:.25in;
	mso-gutter-margin:21.0pt;
	mso-page-numbers:135;
	mso-title-page:yes;
	mso-even-header:url("./Chap_06_files/header.htm") eh1;
	mso-header:url("./Chap_06_files/header.htm") h1;
	mso-even-footer:url("./Chap_06_files/header.htm") ef1;
	mso-footer:url("./Chap_06_files/header.htm") f1;
	mso-first-header:url("./Chap_06_files/header.htm") fh1;
	mso-first-footer:url("./Chap_06_files/header.htm") ff1;
	mso-paper-source:1;}
div.Section1
	{page:Section1;}
@page Section2
	{size:8.5in 11.0in;
	margin:-130.0pt 76.5pt -120.0pt 166.5pt;
	mso-header-margin:99.35pt;
	mso-footer-margin:.25in;
	mso-gutter-margin:21.0pt;
	mso-columns:4 even 12.0pt;
	mso-title-page:yes;
	mso-even-header:url("./Chap_06_files/header.htm") eh1;
	mso-header:url("./Chap_06_files/header.htm") h1;
	mso-even-footer:url("./Chap_06_files/header.htm") ef1;
	mso-footer:url("./Chap_06_files/header.htm") f1;
	mso-first-header:url("./Chap_06_files/header.htm") fh1;
	mso-first-footer:url("./Chap_06_files/header.htm") ff1;
	mso-paper-source:1;}
div.Section2
	{page:Section2;}
@page Section3
	{size:8.5in 11.0in;
	margin:-127.0pt 76.5pt -115.0pt 166.5pt;
	mso-header-margin:99.35pt;
	mso-footer-margin:.25in;
	mso-gutter-margin:21.0pt;
	mso-title-page:yes;
	mso-even-header:url("./Chap_06_files/header.htm") eh1;
	mso-header:url("./Chap_06_files/header.htm") h1;
	mso-even-footer:url("./Chap_06_files/header.htm") ef3;
	mso-footer:url("./Chap_06_files/header.htm") f3;
	mso-first-header:url("./Chap_06_files/header.htm") fh3;
	mso-first-footer:url("./Chap_06_files/header.htm") ff3;
	mso-paper-source:1;}
div.Section3
	{page:Section3;}
-->
</style>
	</head>

	<body lang="EN-US" style="tab-interval:.2in">
		<div class="Section1">
			<p class="Cn" style="margin-left:0in">Chapter <span style='mso-field-code:"SEQ CHAPTER \\R 6"'>6</span></p>
			<div style="mso-element:frame;mso-element-wrap:no-wrap-beside">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" width="448" height="164">
					<tr>
						<td valign="top" align="left" height="164" style="padding-top:0in;padding-right:
  0in;padding-bottom:0in;padding-left:0in">
							<p class="Ch">Using Floating-Point and<br>
							Binary Coded Decimal Numbers</p>
						</td>
					</tr>
				</table>
			</div>
			<![if !supportTextWrap]><br clear="ALL">
			<![endif]>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;REALSW.DOC-1119&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">MASM requires different techniques for handling floating-point (real) numbers and binary coded decimal (BCD) numbers than for handling integers. You have two choices for working with real numbers<span style="letter-spacing:-1.75pt"> </span>&#151;<span style="letter-spacing:-1.75pt"> </span>a math coprocessor or emulation routines.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Coprocessors:defined&quot;<span style='mso-hide:none'> \z
&quot;REALSW.DOC-1001&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;80486 processor&quot;<span
style='mso-hide:none'> \z &quot;REALSW.DOC-1002&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;Math coprocessor&quot; \t
&quot;See Coprocessors&quot;<span style='mso-hide:none'> \z
&quot;REALSW.DOC-1003&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;8087 math coprocessor&quot;<span
style='mso-hide:none'> \z &quot;REALSW.DOC-1004&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;80287 math coprocessor&quot;<span
style='mso-hide:none'> \z &quot;REALSW.DOC-1005&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;80387 math coprocessor&quot;<span
style='mso-hide:none'> \z &quot;REALSW.DOC-1006&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Math coprocessors<span style="letter-spacing:-1.75pt"> </span>&#151;<span style="letter-spacing:-1.75pt"> </span>the 8087, 80287, and 80387 chips<span style="letter-spacing:-1.75pt"> </span>&#151;<span style="letter-spacing:-1.75pt"> </span>work with the main processor to handle real-number calculations. The 80486 processor performs<br>
			floating-point operations directly. All information in this chapter pertaining to the 80387 coprocessor applies to the 80486DX processor as well. It does not apply to the 80486SX, which does not provide an on-chip coprocessor.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;REALSW.DOC-1120&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">This chapter begins with a summary of the directives and formats of floating-point data that you need to allocate memory storage and initialize variables before you can work with floating-point numbers.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;REALSW.DOC-1121&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The chapter then explains how to use a math coprocessor for floating-point operations. It covers:</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;REALSW.DOC-1122&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>The architecture of the registers.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;REALSW.DOC-1123&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>The operands for the coprocessor instruction formats.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;REALSW.DOC-1124&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>The coordination of coprocessor and main processor memory access.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;REALSW.DOC-1125&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>The basic groups of coprocessor instructions<span style="letter-spacing:
-1.75pt"> </span>&#151;<span style="letter-spacing:-1.75pt"> </span>for loading and storing data, doing arithmetic calculations, and controlling program flow.</p>
			<p class="Le"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;REALSW.DOC-1126&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The next main section describes emulation libraries. The emulation routines provided with all Microsoft high-level languages enable you to use coprocessor instructions as though your computer had a math coprocessor. However, some coprocessor instructions are not handled by emulation, as this section explains.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;REALSW.DOC-1127&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Finally, because math coprocessor and emulation routines can also operate on BCD numbers, this chapter includes the instruction set for these numbers.</p>
			<h1 style="margin-left:0in">Using Floating-Point Numbers</h1>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;REALSW.DOC-1128&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Before using floating-point data in your program, you need to allocate the memory storage for the data. You can then initialize variables either as real numbers in decimal form or as encoded hexadecimals. The assembler stores allocated data in 10-byte IEEE format. This section covers floating-point declarations and floating-point data formats.</p>
			<h2 style="margin-left:0in">Declaring Floating-Point Variables and Constants</h2>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;REAL4 directive&quot;<span style='mso-hide:none'> \z
&quot;REALSW.DOC-1007&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;REAL8 directive&quot;<span
style='mso-hide:none'> \z &quot;REALSW.DOC-1008&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;REAL10 directive&quot;<span
style='mso-hide:none'> \z &quot;REALSW.DOC-1009&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Directives:floating-point&quot;<span
style='mso-hide:none'> \z &quot;REALSW.DOC-1010&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Directives:REAL4&quot;<span
style='mso-hide:none'> \z &quot;REALSW.DOC-1011&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Directives:REAL8&quot;<span
style='mso-hide:none'> \z &quot;REALSW.DOC-1012&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Directives:REAL10&quot;<span
style='mso-hide:none'> \z &quot;REALSW.DOC-1013&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">You can allocate real constants using the <b style="mso-bidi-font-weight:normal">REAL4</b>, <b style="mso-bidi-font-weight:
normal">REAL8</b>, and <b style="mso-bidi-font-weight:normal">REAL10</b> directives. These directives allocate the following floating-point numbers:</p>
			<table border="0" cellspacing="0" cellpadding="0" style="margin-left:.4pt;border-collapse:
 collapse;mso-padding-alt:0in 0in 0in 0in">
				<tr>
					<td width="78" valign="top" style="width:58.5pt;padding:0in 0in 0in 0in">
						<p class="Thf">Directive</p>
						<p class="Thf"></p>
					</td>
					<td width="386" valign="top" style="width:289.5pt;padding:0in 0in 0in 0in">
						<p class="Th">Size</p>
						<p class="Th"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="464" colspan="2" valign="top" style="width:348.0pt;padding:0in 0in 0in 0in">
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="78" valign="top" style="width:58.5pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">REAL4</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="386" valign="top" style="width:289.5pt;padding:0in 0in 0in 0in">
						<p class="Tp"><span style="font-size:9.0pt">Short (32-bit) real numbers</span></p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
				</tr>
				<tr>
					<td width="78" valign="top" style="width:58.5pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">REAL8</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="386" valign="top" style="width:289.5pt;padding:0in 0in 0in 0in">
						<p class="Tp"><span style="font-size:9.0pt">Long (64-bit) real numbers</span></p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="78" valign="top" style="width:58.5pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">REAL10</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="386" valign="top" style="width:289.5pt;padding:0in 0in 0in 0in">
						<p class="Tp"><span style="font-size:9.0pt">10-byte (80-bit) real numbers and BCD numbers</span></p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
			</table>
			<p class="Leh"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Variables:floating-point&quot;<span style='mso-hide:none'> \z
&quot;REALSW.DOC-1014&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Data types:real&quot;<span
style='mso-hide:none'> \z &quot;REALSW.DOC-1015&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Data types:floating-point&quot;<span
style='mso-hide:none'> \z &quot;REALSW.DOC-1016&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;Real numbers&quot; \t &quot;See
Floating-point&quot;<span style='mso-hide:none'> \z &quot;REALSW.DOC-1017&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE
&quot;Floating-point:variables:ranges&quot;<span style='mso-hide:none'> \z
&quot;REALSW.DOC-1018&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Floating-point:constants:syntax
for defining&quot;<span style='mso-hide:none'> \z &quot;REALSW.DOC-1019&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Table 6.1 lists the possible ranges for floating-point variables. The number of significant digits can vary in an arithmetic operation as the least-significant digit may be lost through rounding errors. This occurs regularly for short and long real numbers, so you should assume the lesser value of significant digits shown in Table 6.1. Ten-byte real numbers are much less susceptible to rounding errors for reasons described in the next section. However, under certain circumstances, 10-byte real operations can have a precision of only 18 digits.</p>
			<p class="Tt" style="tab-stops:348.05pt">Table 6.1<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>Ranges of Floating-Point Variables</p>
			<table border="0" cellspacing="0" cellpadding="0" style="margin-left:.4pt;border-collapse:
 collapse;mso-padding-alt:0in 0in 0in 0in">
				<tr>
					<td width="464" colspan="4" valign="top" style="width:348.05pt;padding:0in 0in 0in 0in">
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
				</tr>
				<tr>
					<td width="78" valign="top" style="width:58.5pt;padding:0in 0in 0in 0in">
						<p class="Thf"><br>
						Data Type</p>
						<p class="Thf"></p>
					</td>
					<td width="84" valign="top" style="width:63.0pt;padding:0in 0in 0in 0in">
						<p class="Th"><br>
						Bits</p>
						<p class="Th"></p>
					</td>
					<td width="96" valign="top" style="width:1.0in;padding:0in 0in 0in 0in">
						<p class="Th">Significant Digits</p>
						<p class="Th"></p>
					</td>
					<td width="206" valign="top" style="width:154.55pt;padding:0in 0in 0in 0in">
						<p class="Th"><br>
						Approximate Range</p>
						<p class="Th"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="464" colspan="4" valign="top" style="width:348.05pt;padding:0in 0in 0in 0in">
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="78" valign="top" style="width:58.5pt;padding:0in 0in 0in 0in">
						<p class="Tpf">Short real</p>
						<p class="Tpf"></p>
					</td>
					<td width="84" valign="top" style="width:63.0pt;padding:0in 0in 0in 0in">
						<p class="Tp">32</p>
						<p class="Tp"></p>
					</td>
					<td width="96" valign="top" style="width:1.0in;padding:0in 0in 0in 0in">
						<p class="Tp">6&#150;7</p>
						<p class="Tp"></p>
					</td>
					<td width="206" valign="top" style="width:154.55pt;padding:0in 0in 0in 0in">
						<p class="Tp">1.18 x 10<sup>-</sup><sup><span style="font-size:7.0pt">38</span></sup> to 3.40 x 10<sup><span style="font-size:7.0pt">38</span></sup></p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
				</tr>
				<tr>
					<td width="78" valign="top" style="width:58.5pt;padding:0in 0in 0in 0in">
						<p class="Tpf">Long real</p>
						<p class="Tpf"></p>
					</td>
					<td width="84" valign="top" style="width:63.0pt;padding:0in 0in 0in 0in">
						<p class="Tp">64</p>
						<p class="Tp"></p>
					</td>
					<td width="96" valign="top" style="width:1.0in;padding:0in 0in 0in 0in">
						<p class="Tp">15&#150;16</p>
						<p class="Tp"></p>
					</td>
					<td width="206" valign="top" style="width:154.55pt;padding:0in 0in 0in 0in">
						<p class="Tp">2.23 x 10<sup>-</sup><sup><span style="font-size:7.0pt">308</span></sup> to 1.79 x 10<sup><span style="font-size:7.0pt">308</span></sup></p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="78" valign="top" style="width:58.5pt;padding:0in 0in 0in 0in">
						<p class="Tpf">10-byte real</p>
						<p class="Tpf"></p>
					</td>
					<td width="84" valign="top" style="width:63.0pt;padding:0in 0in 0in 0in">
						<p class="Tp">80</p>
						<p class="Tp"></p>
					</td>
					<td width="96" valign="top" style="width:1.0in;padding:0in 0in 0in 0in">
						<p class="Tp">19</p>
						<p class="Tp"></p>
					</td>
					<td width="206" valign="top" style="width:154.55pt;padding:0in 0in 0in 0in">
						<p class="Tp">3.37 x 10<sup>-</sup><sup><span style="font-size:7.0pt">4932</span></sup> to 1.18 x 10<sup><span style="font-size:7.0pt">4932</span></sup></p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
			</table>
			<div style="border:none;border-top:solid windowtext .75pt;padding:1.0pt 0in 0in 0in">
				<p class="Te"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			</div>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;REALSW.DOC-1129&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">With versions of MASM prior to 6.0, the <b style="mso-bidi-font-weight:
normal">DD</b>,<b style="mso-bidi-font-weight:normal"> DQ</b>, and <b style="mso-bidi-font-weight:normal">DT </b>directives could allocate real constants. MASM 6.1 still supports these directives, but the variables are integers rather than floating-point values. Although this makes no difference in the assembly code, CodeView displays the values incorrectly.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;REALSW.DOC-1130&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">You can specify floating-point constants either as decimal constants or as encoded hexadecimal constants. You can express decimal real-number constants in the form:</p>
			<p class="index"><!--[if supportFields]><span style='font-family:Times;
letter-spacing:-1.5pt'><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;REALSW.DOC-1131&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='font-family:Times;letter-spacing:-1.5pt'><span style='mso-element:field-end'></span></span><![endif]-->
			</p>
			<p class="MsoNormal"><span style="font-family:Times;letter-spacing:-1.5pt">[</span><span style="font-family:Times">[</span>+ | &#150;<span style="font-family:Times;
letter-spacing:-1.5pt">]</span><span style="font-family:Times">]</span> <i style="mso-bidi-font-style:normal">integer</i><span style="font-family:Times;
letter-spacing:-1.5pt">[</span><span style="font-family:Times">[</span><i style="mso-bidi-font-style:normal">fraction</i><span style="font-family:Times;
letter-spacing:-1.5pt">]</span><span style="font-family:Times">]<span style="letter-spacing:-1.5pt">[</span>[</span><b style="mso-bidi-font-weight:
normal">E</b><span style="font-family:Times;letter-spacing:-1.5pt">[</span><span style="font-family:Times">[</span>+ | &#150;<span style="font-family:Times;
letter-spacing:-1.5pt">]</span><span style="font-family:Times">]</span><i style="mso-bidi-font-style:normal">exponent</i><span style="font-family:Times;
letter-spacing:-1.5pt">]</span><span style="font-family:Times">]</span></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Floating-point:constants:decimal form&quot;<span style='mso-hide:none'>
\z &quot;REALSW.DOC-1020&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">For example, the numbers <span style='font-size:9.5pt;
font-family:"Lucida Sans Typewriter"'>2.523E1</span> and <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>-3.6E-2</span> are written in the correct decimal format. You can use these numbers as initializers for real-number<br>
			variables.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;REALSW.DOC-1132&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The assembler always evaluates digits of real numbers as base 10. It converts real-number constants given in decimal format to a binary format. The sign, exponent, and decimal part of the real number are encoded as bit fields within the number.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Floating-point:constants:encoded hexadecimal format&quot;<span
style='mso-hide:none'> \z &quot;REALSW.DOC-1021&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;aa&quot; \z
&quot;REALSW.DOC-1133&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">You can also specify the encoded format directly with hexadecimal digits (0&#150;9 plus A&#150;F). The number must begin with a decimal digit (0&#150;9) and end with the real-number designator (R). It cannot be signed. For example, the hexadecimal number <span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>3F800000r</span> can serve as an initializer for a doubleword-sized variable.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Directives:REAL4&quot;<span style='mso-hide:none'> \z
&quot;REALSW.DOC-1022&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Directives:REAL8&quot;<span
style='mso-hide:none'> \z &quot;REALSW.DOC-1023&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Directives:REAL10&quot;<span
style='mso-hide:none'> \z &quot;REALSW.DOC-1024&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;REAL4 directive&quot;<span
style='mso-hide:none'> \z &quot;REALSW.DOC-1025&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;REAL8 directive&quot;<span
style='mso-hide:none'> \z &quot;REALSW.DOC-1026&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;REAL10 directive&quot;<span
style='mso-hide:none'> \z &quot;REALSW.DOC-1027&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The maximum range of exponent values and the number of digits required in the hexadecimal number depend on the directive. The number of digits for encoded numbers used with <b style="mso-bidi-font-weight:normal">REAL4</b>,<b style="mso-bidi-font-weight:normal"> REAL8</b>, and <b style="mso-bidi-font-weight:
normal">REAL10</b> must be 8, 16, and 20 digits, respectively. If the number has a leading zero, the number must be 9, 17, or 21 digits.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;REALSW.DOC-1134&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Examples of decimal constant and hexadecimal specifications are shown here:</p>
			<p class="Ex">; Real numbers<br>
			short<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>REAL4<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>25.23<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; IEEE format<br>
			double<span style="mso-spacerun: yes">&nbsp; </span>REAL8<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>2.523E1<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; IEEE format<br>
			tenbyte REAL10<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>2523.0E-2<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; 10-byte real format<br>
			<br>
			; Encoded as hexadecimals<br>
			ieeeshort<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>REAL4<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>3F800000r<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; 1.0 as IEEE short<br>
			ieeedouble<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>REAL8<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>3FF0000000000000r<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>; 1.0 as IEEE long<br>
			temporary<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>REAL10<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>3FFF8000000000000000r ; 1.0 as 10-byte<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>real<br style="mso-special-character:
line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Variables:floating-point&quot;<span style='mso-hide:none'> \z
&quot;REALSW.DOC-1028&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The section &#147;Storing Numbers in Floating-Point Format,&#148; following, explains the IEEE formats<span style="letter-spacing:-1.75pt"> </span>&#151;<span style="letter-spacing:-1.75pt"> </span>the way the assembler actually stores the data.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;TYPEDEF directive:aliases, created by&quot;<span style='mso-hide:none'>
\z &quot;REALSW.DOC-1029&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Pascal or C programmers may prefer to create language-specific <b style="mso-bidi-font-weight:normal">TYPEDEF</b> declarations, as illustrated in this example:</p>
			<p class="Ex">; C-language specific<br>
			float<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>TYPEDEF REAL4<br>
			double<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>TYPEDEF REAL8<br>
			long_double<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>TYPEDEF REAL10<br>
			; Pascal-language specific<br>
			SINGLE<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>TYPEDEF REAL4<br>
			DOUBLE<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>TYPEDEF REAL8<br>
			EXTENDED<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>TYPEDEF REAL10<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;REALSW.DOC-1135&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">For applications of <b style="mso-bidi-font-weight:normal">TYPEDEF</b>, see &#147;Defining Pointer Types with TYPEDEF,&#148; page 75.</p>
			<h2 style="margin-left:0in">Storing Numbers in Floating-Point Format</h2>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Floating-point:variables:IEEE format&quot;<span style='mso-hide:none'> \z
&quot;REALSW.DOC-1030&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE
&quot;Floating-point:variables:.MSFLOAT format&quot;<span style='mso-hide:none'>
\z &quot;REALSW.DOC-1031&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE
&quot;Floating-point:variables:Microsoft binary format&quot;<span
style='mso-hide:none'> \z &quot;REALSW.DOC-1032&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Variables:floating-point&quot;<span
style='mso-hide:none'> \z &quot;REALSW.DOC-1033&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;aa&quot; \z
&quot;REALSW.DOC-1136&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The assembler stores floating-point variables in the IEEE format. MASM 6.1 does not support<b style="mso-bidi-font-weight:normal"> .MSFLOAT</b> and Microsoft binary format, which are available in version 5.1 and earlier. Figure 6.1 illustrates the IEEE format for encoding short (4-byte), long (8-byte), and 10-byte real numbers. Although this figure places the most significant bit first for illustration, low bytes actually appear first in memory.</p>
			<p class="Art" style="margin-left:0in"><span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp; </span><span style='mso-field-code:"include M\:\\\\SLM\\\\SRC\\\\MASM61\\\\APPS\\\\ART\\\\mpchp06\.doc art_mp0601_eps  \\\\* mergeformat"'><a name="art_mp0601_eps"></a><a name="space_mp0601_eps"><span style="mso-bookmark:
art_mp0601_eps"></span></a><!--[if supportFields]><span style='mso-bookmark:
space_mp0601_eps'><span style='mso-bookmark:art_mp0601_eps'></span></span><span
style='mso-element:field-begin'></span><span style='mso-bookmark:space_mp0601_eps'><span
style='mso-bookmark:art_mp0601_eps'>IMPORT
M:\\SLM\\SRC\\MASM61\\APPS\\ART\\MP0601.EPS \* mergeformat<span
style='mso-element:field-separator'></span></span></span><![endif]-->
			<span style="mso-bookmark:space_mp0601_eps"><span style="mso-bookmark:art_mp0601_eps"><!--[if gte vml 1]><v:shapetype
 id="_x0000_t75" coordsize="21600,21600" o:spt="75" o:preferrelative="t"
 path="m@4@5l@4@11@9@11@9@5xe" filled="f" stroked="f">
 <v:stroke joinstyle="miter"/>
 <v:formulas>
  <v:f eqn="if lineDrawn pixelLineWidth 0"/>
  <v:f eqn="sum @0 1 0"/>
  <v:f eqn="sum 0 0 @1"/>
  <v:f eqn="prod @2 1 2"/>
  <v:f eqn="prod @3 21600 pixelWidth"/>
  <v:f eqn="prod @3 21600 pixelHeight"/>
  <v:f eqn="sum @0 0 1"/>
  <v:f eqn="prod @6 1 2"/>
  <v:f eqn="prod @7 21600 pixelWidth"/>
  <v:f eqn="sum @8 21600 0"/>
  <v:f eqn="prod @7 21600 pixelHeight"/>
  <v:f eqn="sum @10 21600 0"/>
 </v:formulas>
 <v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"/>
 <o:lock v:ext="edit" aspectratio="t"/>
</v:shapetype><v:shape id="_x0000_i1025" type="#_x0000_t75" style='width:318.75pt;
 height:417.75pt'>
 <v:imagedata src="./Chap_06_files/image001.wmz" o:href="file:///M:/SLM/SRC/MASM61/APPS/ART/MP0601.EPS"/>
</v:shape><![endif]-->
			<![if !vml]><img width="425" height="557" src="Chap_06_files/image002.gif" v:shapes="_x0000_i1025"><![endif]></span></span><!--[if supportFields]><span
style='mso-bookmark:space_mp0601_eps'><span style='mso-bookmark:art_mp0601_eps'></span></span><span
style='mso-element:field-end'></span><![endif]-->
			 <span style="mso-bookmark:
space_mp0601_eps"><span style="mso-bookmark:art_mp0601_eps"></span></span></span></p>
			<p class="Cap">Figure <!--[if supportFields]><span style='font-family:Times'><span
style='mso-element:field-begin'></span>SEQ chapter \c<span style='mso-element:
field-separator'></span></span><![endif]-->
			<span style="font-family:Times">6</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-end'></span></span><![endif]-->
			 <span style="font-family:Times">.</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-begin'></span>SEQ
figure<span style='mso-element:field-separator'></span></span><![endif]-->
			 <span style="font-family:Times">1</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-end'></span></span><![endif]-->
			 <span style="font-family:Helvetica-Narrow"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span></span>Encoding for Real Numbers in IEEE Format</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;Floating point:values:double precision&quot; \z
&quot;REALSW.DOC-1034&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;Floating point:values:single
precision&quot; \z &quot;REALSW.DOC-1035&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;Floating point:IEEE
format&quot; \z &quot;REALSW.DOC-1036&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;IEEE format&quot;<span
style='mso-hide:none'> \z &quot;REALSW.DOC-1037&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The following list explains how the parts of a real number are stored in the IEEE format. Each item in the list refers to an item in Figure 6.1.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;REALSW.DOC-1137&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>Sign bit (0 for positive or 1 for negative) in the upper bit of the first byte.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;REALSW.DOC-1138&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>Exponent in the next bits in sequence (8 bits for a short real number, 11 bits for a long real number, and 15 bits for a 10-byte real number).</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;REALSW.DOC-1139&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>The integer part of the significand in bit 63 for the 10-byte real format. By absorbing carry values, this bit allows 10-byte real operations to preserve precision to 19 digits. The integer part is always 1 in short and long real numbers; consequently, these formats do not provide a bit for the integer, since there is no point in storing it.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Exponent bias&quot;<span style='mso-hide:none'> \z
&quot;REALSW.DOC-1038&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Significand&quot;<span
style='mso-hide:none'> \z &quot;REALSW.DOC-1039&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>Decimal part of the significand in the remaining bits. The length is 23 bits for short real numbers, 52 bits for long real numbers, and 63 bits for 10-byte real numbers.</p>
			<p class="Le"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;REALSW.DOC-1140&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The exponent field represents a multiplier 2<sup><span style="font-size:8.0pt">n</span></sup>. To accommodate negative exponents (such as 2<sup><span style="font-size:8.0pt">-6</span></sup>), the value in the exponent field is biased; that is, the actual exponent is determined by subtracting the appropriate bias value from the value in the exponent field. For example, the bias for short real numbers is 127. If the value in the exponent field is 130, the exponent represents a value of 2<sup><span style="font-size:8.0pt">130-127</span></sup>, or 2<sup><span style="font-size:
8.0pt">3</span></sup>. The bias for long real numbers is 1,023. The bias for 10-byte real numbers is 16,383.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;REALSW.DOC-1141&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Once you have declared floating-point data for your program, you can use coprocessor or emulator instructions to access the data. The next section focuses on the coprocessor architecture, instructions, and operands required for floating-point operations.</p>
			<h1 style="margin-left:0in">Using a Math Coprocessor</h1>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Coprocessors:described&quot;<span style='mso-hide:none'> \z
&quot;REALSW.DOC-1040&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">When used with real numbers, packed BCD numbers, or long integers, coprocessors (the 8087, 80287, 80387, and 80486) calculate many times faster than the 8086-based processors. The coprocessor handles data with its own registers. The organization of these registers can be one of the four formats for using operands explained in &#147;Instruction and Operand Formats,&#148; later in this section.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;REALSW.DOC-1142&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">This section describes how the coprocessor transfers data to and from the coprocessor, coordinates processor and coprocessor operations, and controls program flow.</p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<h2 style="margin-left:0in">Coprocessor Architecture</h2>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Coprocessors:architecture&quot;<span style='mso-hide:none'> \z
&quot;REALSW.DOC-1041&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The coprocessor accesses memory as the CPU does, but it has its own data and control registers<a name="CurrentCell"></a><span style="letter-spacing:-1.75pt"> </span>&#151;<span style="letter-spacing:-1.75pt"> </span>eight data registers organized as a stack and seven control registers similar to the 8086 flag registers. The coprocessor&#146;s instruction set provides direct access to these registers.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Registers:coprocessor&quot;<span style='mso-hide:none'> \z
&quot;REALSW.DOC-1042&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Coprocessors:specifying&quot;<span
style='mso-hide:none'> \z &quot;REALSW.DOC-1043&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Coprocessors:data format in
registers&quot;<span style='mso-hide:none'> \z &quot;REALSW.DOC-1044&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The eight 80-bit data registers of the 8087-based coprocessors are organized as a stack, although they need not be used as a stack. As data items are pushed into the top register, previous data items move into higher-numbered registers, which are lower on the stack. Register 0 is the top of the stack; register 7 is the bottom. The syntax for specifying registers is:</p>
			<p class="Syn"><b style="mso-bidi-font-weight:normal">ST </b><span style="font-family:Times;letter-spacing:-1.5pt">[</span><span style="font-family:
Times">[</span>(<i style="mso-bidi-font-style:normal">number</i>)<span style="font-family:Times;letter-spacing:-1.5pt">]</span><span style="font-family:
Times">]<b style="mso-bidi-font-weight:normal"><span style="letter-spacing:
-1.5pt"><o:p></o:p></span></b></span></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;REALSW.DOC-1143&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The <i style="mso-bidi-font-style:normal"><span style='font-family:"Tms Rmn"'>number</span></i> must be a digit between 0 and 7 or a constant expression that evaluates to a number from 0 to 7. <b style="mso-bidi-font-weight:normal">ST</b> is another way to refer to <b style="mso-bidi-font-weight:normal">ST(0)</b>.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;REALSW.DOC-1144&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">All coprocessor data is stored in registers in the 10-byte real format. The registers and the register format are shown in Figure <span style='mso-field-code:"seq chapter \\c"'>6</span>.2.</p>
			<p class="Art" style="margin-left:0in"><span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp; </span><span style='mso-field-code:"include M\:\\\\SLM\\\\SRC\\\\MASM61\\\\APPS\\\\ART\\\\mpchp06\.doc art_mp0602_eps  \\\\* mergeformat"'><a name="art_mp0602_eps"></a><a name="space_mp0602_eps"><span style="mso-bookmark:
art_mp0602_eps"></span></a><!--[if supportFields]><span style='mso-bookmark:
space_mp0602_eps'><span style='mso-bookmark:art_mp0602_eps'></span></span><span
style='mso-element:field-begin'></span><span style='mso-bookmark:space_mp0602_eps'><span
style='mso-bookmark:art_mp0602_eps'>IMPORT
M:\\SLM\\SRC\\MASM61\\APPS\\ART\\MP0602.EPS \* mergeformat<span
style='mso-element:field-separator'></span></span></span><![endif]-->
			<span style="mso-bookmark:space_mp0602_eps"><span style="mso-bookmark:art_mp0602_eps"><!--[if gte vml 1]><v:shape
 id="_x0000_i1026" type="#_x0000_t75" style='width:270pt;height:182.25pt'>
 <v:imagedata src="./Chap_06_files/image003.wmz" o:href="file:///M:/SLM/SRC/MASM61/APPS/ART/MP0602.EPS"/>
</v:shape><![endif]-->
			<![if !vml]><img width="360" height="243" src="Chap_06_files/image004.gif" v:shapes="_x0000_i1026"><![endif]></span></span><!--[if supportFields]><span
style='mso-bookmark:space_mp0602_eps'><span style='mso-bookmark:art_mp0602_eps'></span></span><span
style='mso-element:field-end'></span><![endif]-->
			 <span style="mso-bookmark:
space_mp0602_eps"><span style="mso-bookmark:art_mp0602_eps"></span></span></span></p>
			<p class="Cap">Figure <!--[if supportFields]><span style='font-family:Times'><span
style='mso-element:field-begin'></span>SEQ chapter \c<span style='mso-element:
field-separator'></span></span><![endif]-->
			<span style="font-family:Times">6</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-end'></span></span><![endif]-->
			 <span style="font-family:Times">.</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-begin'></span>SEQ
figure<span style='mso-element:field-separator'></span></span><![endif]-->
			 <span style="font-family:Times">2</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-end'></span></span><![endif]-->
			 <span style="font-family:Helvetica-Narrow"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span></span>Coprocessor Data Registers</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;REALSW.DOC-1145&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Internally, all calculations are done on numbers of the same type. Since 10-byte real numbers have the greatest precision, lower-precision numbers are guaranteed not to lose precision as a result of calculations. The instructions that transfer values between the main memory and the coprocessor automatically convert numbers to and from the 10-byte real format.</p>
			<h2 style="margin-left:0in">Instruction and Operand Formats</h2>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Coprocessors:instructions:overview&quot;<span style='mso-hide:none'> \z
&quot;REALSW.DOC-1045&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Coprocessors:operand
formats:overview&quot;<span style='mso-hide:none'> \z
&quot;REALSW.DOC-1046&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Because of the stack organization of registers, you can consider registers either as elements on a stack or as registers much like 8086-family registers. Table <span style='mso-field-code:"seq chapter \\c"'>6</span>.2 lists the four main groups of coprocessor instructions and the general syntax for each. The names given to the instruction format reflect the way the instruction uses the coprocessor registers. The instruction operands are placed in the coprocessor data registers before the instruction executes.</p>
			<table border="0" cellspacing="0" cellpadding="0" style="margin-left:.4pt;border-collapse:
 collapse;mso-padding-alt:0in 0in 0in 0in">
				<tr>
					<td width="464" colspan="4" valign="top" style="width:347.95pt;padding:0in 0in 0in 0in">
						<p class="Tt">Table <span style='mso-field-code:"seq chapter \\c"'>6</span>.2<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Coprocessor Operand Formats</p>
						<p class="Tt"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="464" colspan="4" valign="top" style="width:347.95pt;padding:0in 0in 0in 0in">
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
				</tr>
				<tr>
					<td width="90" valign="top" style="width:67.55pt;padding:0in 0in 0in 0in">
						<p class="Thf">Instruction<br>
						Format</p>
						<p class="Thf"></p>
					</td>
					<td width="167" valign="top" style="width:125.05pt;padding:0in 0in 0in 0in">
						<p class="Th"><br>
						Syntax</p>
						<p class="Th"></p>
					</td>
					<td width="79" valign="top" style="width:59.4pt;padding:0in 0in 0in 0in">
						<p class="Th">Implied Operands</p>
						<p class="Th"></p>
					</td>
					<td width="128" valign="top" style="width:96.0pt;padding:0in 0in 0in 0in">
						<p class="Th"><br>
						Example</p>
						<p class="Th"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="464" colspan="4" valign="top" style="width:347.95pt;padding:0in 0in 0in 0in">
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="90" valign="top" style="width:67.55pt;padding:0in 0in 0in 0in">
						<p class="Tpf">Classical stack</p>
						<p class="Tpf"></p>
					</td>
					<td width="167" valign="top" style="width:125.05pt;padding:0in 0in 0in 0in">
						<p class="Tp"><b style="mso-bidi-font-weight:normal">F</b><i style="mso-bidi-font-style:
  normal">instruction</i></p>
						<p class="Tp"></p>
					</td>
					<td width="79" valign="top" style="width:59.4pt;padding:0in 0in 0in 0in">
						<p class="Tp">ST, ST(1)</p>
						<p class="Tp"></p>
					</td>
					<td width="128" valign="top" style="width:96.0pt;padding:0in 0in 0in 0in">
						<p class="Tex">fadd</p>
						<p class="Tex"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
				</tr>
				<tr>
					<td width="90" valign="top" style="width:67.55pt;padding:0in 0in 0in 0in">
						<p class="Tpf">Memory</p>
						<p class="Tpf"></p>
					</td>
					<td width="167" valign="top" style="width:125.05pt;padding:0in 0in 0in 0in">
						<p class="Tp"><b style="mso-bidi-font-weight:normal">F</b><i style="mso-bidi-font-style:
  normal">instruction memory</i></p>
						<p class="Tp"></p>
					</td>
					<td width="79" valign="top" style="width:59.4pt;padding:0in 0in 0in 0in">
						<p class="Tp">ST</p>
						<p class="Tp"></p>
					</td>
					<td width="128" valign="top" style="width:96.0pt;padding:0in 0in 0in 0in">
						<p class="Tex">fadd memloc</p>
						<p class="Tex"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="90" valign="top" style="width:67.55pt;padding:0in 0in 0in 0in">
						<p class="Tpf">Register</p>
						<p class="Tpf"></p>
					</td>
					<td width="167" valign="top" style="width:125.05pt;padding:0in 0in 0in 0in">
						<p class="Tp"><b style="mso-bidi-font-weight:normal">F</b><i style="mso-bidi-font-style:
  normal">instruction</i> <b style="mso-bidi-font-weight:normal">ST(</b><i style="mso-bidi-font-style:normal">num</i><b style="mso-bidi-font-weight:
  normal">), ST</b></p>
						<p class="Tp"><b style="mso-bidi-font-weight:normal">F</b><i style="mso-bidi-font-style:
  normal">instruction</i> <b style="mso-bidi-font-weight:normal">ST, ST(</b><i style="mso-bidi-font-style:normal">num</i><b style="mso-bidi-font-weight:
  normal">)</b></p>
						<p class="Tp"></p>
					</td>
					<td width="79" valign="top" style="width:59.4pt;padding:0in 0in 0in 0in">
						<p class="Tp"><span style="mso-spacerun: yes">&nbsp;</span>&#151;<br style="mso-special-character:
  line-break">
						<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
						<![endif]></p>
						<p class="Tp"></p>
					</td>
					<td width="128" valign="top" style="width:96.0pt;padding:0in 0in 0in 0in">
						<p class="Tex">fadd st(5), st<br>
						fadd st, st(3)</p>
						<p class="Tex"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="90" valign="top" style="width:67.55pt;padding:0in 0in 0in 0in">
						<p class="Tpf">Register pop</p>
						<p class="Tpf"></p>
					</td>
					<td width="167" valign="top" style="width:125.05pt;padding:0in 0in 0in 0in">
						<p class="Tp"><b style="mso-bidi-font-weight:normal">F</b><i style="mso-bidi-font-style:
  normal">instruction</i><b style="mso-bidi-font-weight:normal">P ST(</b><i style="mso-bidi-font-style:normal">num</i><b style="mso-bidi-font-weight:
  normal">), ST</b></p>
						<p class="Tp"></p>
					</td>
					<td width="79" valign="top" style="width:59.4pt;padding:0in 0in 0in 0in">
						<p class="Tp"><span style="mso-spacerun: yes">&nbsp;</span>&#151;</p>
						<p class="Tp"></p>
					</td>
					<td width="128" valign="top" style="width:96.0pt;padding:0in 0in 0in 0in">
						<p class="Tex">faddp st(4), st</p>
						<p class="Tex"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
			</table>
			<div style="border:none;border-top:solid windowtext .75pt;padding:1.0pt 0in 0in 0in">
				<p class="Te"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			</div>
			<p class="MsoNormal">You can easily recognize coprocessor instructions because, unlike all 8086-family instruction mnemonics, they start with the letter <b style="mso-bidi-font-weight:normal">F</b>. Coprocessor instructions can never have immediate operands and, with the exception of the <b style="mso-bidi-font-weight:
normal">FSTSW</b> instruction, they cannot have processor registers as operands.</p>
			<h3>Classical-Stack Format</h3>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Coprocessors:operand formats:classical stack&quot;<span style='mso-hide:
none'> \z &quot;REALSW.DOC-1047&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Instructions in the classical-stack format treat the coprocessor registers like items on a stack<span style="letter-spacing:-1.75pt"> </span>&#151;<span style="letter-spacing:-1.75pt"> </span>thus its name. Items are pushed onto or popped off the top elements of the stack. Since only the top item can be accessed on a traditional stack, there is no need to specify operands. The first (top) register (and the second, if the instruction needs two operands) is always assumed.</p>
			<p class="MsoNormal">ST (the top of the stack) is the source operand in coprocessor arithmetic operations. ST(1), the second register, is the destination. The result of the operation replaces the destination operand, and the source is popped off the stack. This leaves the result at the top of the stack.</p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<p class="MsoNormal">The following example illustrates the classical-stack format; Figure 6.3 shows the status of the register stack after each instruction.</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fld1<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Push 1 into first position<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fldpi<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Push pi into first position<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fadd<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Add pi and 1 and pop<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="Art" style="margin-left:0in"><span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp; </span><span style='mso-field-code:"include M\:\\\\SLM\\\\SRC\\\\MASM61\\\\APPS\\\\ART\\\\mpchp06\.doc art_mp0603_eps  \\\\* mergeformat"'><a name="art_mp0603_eps"></a><a name="space_mp0603_eps"><span style="mso-bookmark:
art_mp0603_eps"></span></a><!--[if supportFields]><span style='mso-bookmark:
space_mp0603_eps'><span style='mso-bookmark:art_mp0603_eps'></span></span><span
style='mso-element:field-begin'></span><span style='mso-bookmark:space_mp0603_eps'><span
style='mso-bookmark:art_mp0603_eps'>IMPORT
M:\\SLM\\SRC\\MASM61\\APPS\\ART\\MP0603.EPS \* mergeformat<span
style='mso-element:field-separator'></span></span></span><![endif]-->
			<span style="mso-bookmark:space_mp0603_eps"><span style="mso-bookmark:art_mp0603_eps"><!--[if gte vml 1]><v:shape
 id="_x0000_i1027" type="#_x0000_t75" style='width:332.25pt;height:81.75pt'>
 <v:imagedata src="./Chap_06_files/image005.wmz" o:href="file:///M:/SLM/SRC/MASM61/APPS/ART/MP0603.EPS"/>
</v:shape><![endif]-->
			<![if !vml]><img width="443" height="109" src="Chap_06_files/image006.gif" v:shapes="_x0000_i1027"><![endif]></span></span><!--[if supportFields]><span
style='mso-bookmark:space_mp0603_eps'><span style='mso-bookmark:art_mp0603_eps'></span></span><span
style='mso-element:field-end'></span><![endif]-->
			 <span style="mso-bookmark:
space_mp0603_eps"><span style="mso-bookmark:art_mp0603_eps"></span></span></span></p>
			<p class="Cap">Figure <!--[if supportFields]><span style='font-family:Times'><span
style='mso-element:field-begin'></span>SEQ chapter \c<span style='mso-element:
field-separator'></span></span><![endif]-->
			<span style="font-family:Times">6</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-end'></span></span><![endif]-->
			 <span style="font-family:Times">.</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-begin'></span>SEQ
figure<span style='mso-element:field-separator'></span></span><![endif]-->
			 <span style="font-family:Times">3</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-end'></span></span><![endif]-->
			 <span style="font-family:Helvetica-Narrow"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span></span>Status of the Register Stack</p>
			<h3>Memory Format</h3>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Coprocessors:operand formats:memory&quot;<span style='mso-hide:none'> \z
&quot;REALSW.DOC-1048&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Instructions that use the memory format, such as data transfer instructions, also treat coprocessor registers like items on a stack. However, with this format, items are pushed from memory onto the top element of the stack, or popped from the top element to memory. You must specify the memory operand.</p>
			<p class="MsoNormal">Some instructions that use the memory format specify how a memory operand is to be interpreted<span style="letter-spacing:-1.75pt"> </span>&#151;<span style="letter-spacing:-1.75pt"> </span>as an integer (<b style="mso-bidi-font-weight:
normal">I</b>) or as a binary coded decimal (<b style="mso-bidi-font-weight:
normal">B</b>). The letter <b style="mso-bidi-font-weight:normal">I</b> or <b style="mso-bidi-font-weight:normal">B</b> follows the initial <b style="mso-bidi-font-weight:normal">F</b> in the syntax. For example, <b style="mso-bidi-font-weight:normal">FILD</b> interprets its operand as an integer and <b style="mso-bidi-font-weight:normal">FBLD</b> interprets its operand as a BCD number. If the instruction name does not include a type letter, the instruction works on real numbers.</p>
			<p class="MsoNormal">You can also use memory operands in calculation instructions that operate on two values (see &#147;Using Coprocessor Instructions,&#148; later in this section). The memory operand is always the source. The stack top (ST) is always the implied destination.</p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<p class="MsoNormal">The result of the operation replaces the destination without changing its stack position, as shown in this example and in Figure 6.4:</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.DATA<br>
			m1<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>REAL4<span style="mso-spacerun:
yes">&nbsp; </span>1.0<br>
			m2<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>REAL4<span style="mso-spacerun:
yes">&nbsp; </span>2.0<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.CODE<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fld<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>m1<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Push m1 into first position<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fld<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>m2<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Push m2 into first position<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fadd<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>m1<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Add m2 to first position<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fstp<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>m1<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Pop first position into m1<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fst<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>m2<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Copy first position to m2<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="Art" style="margin-left:0in"><span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp; </span><span style='mso-field-code:"include M\:\\\\SLM\\\\SRC\\\\MASM61\\\\APPS\\\\ART\\\\mpchp06\.doc art_mp0604_eps  \\\\* mergeformat"'><a name="art_mp0604_eps"></a><a name="space_mp0604_eps"><span style="mso-bookmark:
art_mp0604_eps"></span></a><!--[if supportFields]><span style='mso-bookmark:
space_mp0604_eps'><span style='mso-bookmark:art_mp0604_eps'></span></span><span
style='mso-element:field-begin'></span><span style='mso-bookmark:space_mp0604_eps'><span
style='mso-bookmark:art_mp0604_eps'>IMPORT
M:\\SLM\\SRC\\MASM61\\APPS\\ART\\MP0604.EPS \* mergeformat<span
style='mso-element:field-separator'></span></span></span><![endif]-->
			<span style="mso-bookmark:space_mp0604_eps"><span style="mso-bookmark:art_mp0604_eps"><!--[if gte vml 1]><v:shape
 id="_x0000_i1028" type="#_x0000_t75" style='width:314.25pt;height:132pt'>
 <v:imagedata src="./Chap_06_files/image007.wmz" o:href="file:///M:/SLM/SRC/MASM61/APPS/ART/MP0604.EPS"/>
</v:shape><![endif]-->
			<![if !vml]><img width="419" height="176" src="Chap_06_files/image008.gif" v:shapes="_x0000_i1028"><![endif]></span></span><!--[if supportFields]><span
style='mso-bookmark:space_mp0604_eps'><span style='mso-bookmark:art_mp0604_eps'></span></span><span
style='mso-element:field-end'></span><![endif]-->
			 <span style="mso-bookmark:
space_mp0604_eps"><span style="mso-bookmark:art_mp0604_eps"></span></span></span></p>
			<p class="Cap">Figure <!--[if supportFields]><span style='font-family:Times'><span
style='mso-element:field-begin'></span>SEQ chapter \c<span style='mso-element:
field-separator'></span></span><![endif]-->
			<span style="font-family:Times">6</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-end'></span></span><![endif]-->
			 <span style="font-family:Times">.</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-begin'></span>SEQ
figure<span style='mso-element:field-separator'></span></span><![endif]-->
			 <span style="font-family:Times">4</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-end'></span></span><![endif]-->
			 <span style="font-family:Helvetica-Narrow"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span></span>Status of the Register Stack and Memory Locations</p>
			<h3>Register Format</h3>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Coprocessors:operand formats:register&quot;<span style='mso-hide:none'>
\z &quot;REALSW.DOC-1049&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Instructions that use the register format treat coprocessor registers as registers rather than as stack elements. Instructions that use this format require two register operands; one of them must be the stack top (ST).</p>
			<p class="MsoNormal">In the register format, specify all operands by name. The first operand is the destination; its value is replaced with the result of the operation. The second operand is the source; it is not affected by the operation. The stack positions of the operands do not change.</p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Instructions:FXCH&quot;<span style='mso-hide:none'> \z
&quot;REALSW.DOC-1050&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;FXCH instruction&quot;<span
style='mso-hide:none'> \z &quot;REALSW.DOC-1051&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The only instructions that use the register operand format are the <b style="mso-bidi-font-weight:normal">FXCH</b> instruction and arithmetic instructions for calculations on two values. With the <b style="mso-bidi-font-weight:normal">FXCH</b> instruction, the stack top is implied and need not be specified, as shown in this example and in Figure 6.5:</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fadd<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>st(1), st<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>; Add second position to first -<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>result goes in second position<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fadd<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>st, st(2)<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>; Add first position to third -<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>result goes in first position<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fxch<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>st(1)<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Exchange first and second positions<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="Art" style="margin-left:0in"><span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp; </span><span style='mso-field-code:"include M\:\\\\SLM\\\\SRC\\\\MASM61\\\\APPS\\\\ART\\\\mpchp06\.doc art_mp0605_eps  \\\\* mergeformat"'><a name="art_mp0605_eps"></a><a name="space_mp0605_eps"><span style="mso-bookmark:
art_mp0605_eps"></span></a><!--[if supportFields]><span style='mso-bookmark:
space_mp0605_eps'><span style='mso-bookmark:art_mp0605_eps'></span></span><span
style='mso-element:field-begin'></span><span style='mso-bookmark:space_mp0605_eps'><span
style='mso-bookmark:art_mp0605_eps'>IMPORT
M:\\SLM\\SRC\\MASM61\\APPS\\ART\\MP0605.EPS \* mergeformat<span
style='mso-element:field-separator'></span></span></span><![endif]-->
			<span style="mso-bookmark:space_mp0605_eps"><span style="mso-bookmark:art_mp0605_eps"><!--[if gte vml 1]><v:shape
 id="_x0000_i1029" type="#_x0000_t75" style='width:314.25pt;height:96pt'>
 <v:imagedata src="./Chap_06_files/image009.wmz" o:href="file:///M:/SLM/SRC/MASM61/APPS/ART/MP0605.EPS"/>
</v:shape><![endif]-->
			<![if !vml]><img width="419" height="128" src="Chap_06_files/image010.gif" v:shapes="_x0000_i1029"><![endif]></span></span><!--[if supportFields]><span
style='mso-bookmark:space_mp0605_eps'><span style='mso-bookmark:art_mp0605_eps'></span></span><span
style='mso-element:field-end'></span><![endif]-->
			 <span style="mso-bookmark:
space_mp0605_eps"><span style="mso-bookmark:art_mp0605_eps"></span></span></span></p>
			<p class="Cap">Figure <!--[if supportFields]><span style='font-family:Times'><span
style='mso-element:field-begin'></span>SEQ chapter \c<span style='mso-element:
field-separator'></span></span><![endif]-->
			<span style="font-family:Times">6</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-end'></span></span><![endif]-->
			 <span style="font-family:Times">.</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-begin'></span>SEQ
figure<span style='mso-element:field-separator'></span></span><![endif]-->
			 <span style="font-family:Times">5</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-end'></span></span><![endif]-->
			 <span style="font-family:Helvetica-Narrow"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span></span>Status of the Previously Initialized Register Stack</p>
			<h3>Register-Pop Format</h3>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Coprocessors:operand formats:register-pop&quot;<span style='mso-hide:
none'> \z &quot;REALSW.DOC-1052&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The register-pop format treats coprocessor registers as a modified stack. The source register must always be the stack top. Specify the destination with the register&#146;s name.</p>
			<p class="MsoNormal">Instructions with this format place the result of the operation into the destination operand, and the top pops off the stack. The register-pop format is used only for instructions for calculations on two values, as in this example and in Figure 6.6:</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>faddp<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>st(2), st ; Add first and third positions and pop -<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>first position destroyed;<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>third moves to second and holds result<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="Art" style="margin-left:0in"><span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp; </span><span style='mso-field-code:"include M\:\\\\SLM\\\\SRC\\\\MASM61\\\\APPS\\\\ART\\\\mpchp06\.doc art_mp0606_eps  \\\\* mergeformat"'><a name="art_mp0606_eps"></a><a name="space_mp0606_eps"><span style="mso-bookmark:
art_mp0606_eps"></span></a><!--[if supportFields]><span style='mso-bookmark:
space_mp0606_eps'><span style='mso-bookmark:art_mp0606_eps'></span></span><span
style='mso-element:field-begin'></span><span style='mso-bookmark:space_mp0606_eps'><span
style='mso-bookmark:art_mp0606_eps'>IMPORT
M:\\SLM\\SRC\\MASM61\\APPS\\ART\\MP0606.EPS \* mergeformat<span
style='mso-element:field-separator'></span></span></span><![endif]-->
			<span style="mso-bookmark:space_mp0606_eps"><span style="mso-bookmark:art_mp0606_eps"><!--[if gte vml 1]><v:shape
 id="_x0000_i1030" type="#_x0000_t75" style='width:138pt;height:96pt'>
 <v:imagedata src="./Chap_06_files/image011.wmz" o:href="file:///M:/SLM/SRC/MASM61/APPS/ART/MP0606.EPS"/>
</v:shape><![endif]-->
			<![if !vml]><img width="184" height="128" src="Chap_06_files/image012.gif" v:shapes="_x0000_i1030"><![endif]></span></span><!--[if supportFields]><span
style='mso-bookmark:space_mp0606_eps'><span style='mso-bookmark:art_mp0606_eps'></span></span><span
style='mso-element:field-end'></span><![endif]-->
			 <span style="mso-bookmark:
space_mp0606_eps"><span style="mso-bookmark:art_mp0606_eps"></span></span></span></p>
			<p class="Cap">Figure <!--[if supportFields]><span style='font-family:Times'><span
style='mso-element:field-begin'></span>SEQ chapter \c<span style='mso-element:
field-separator'></span></span><![endif]-->
			<span style="font-family:Times">6</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-end'></span></span><![endif]-->
			 <span style="font-family:Times">.</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-begin'></span>SEQ
figure<span style='mso-element:field-separator'></span></span><![endif]-->
			 <span style="font-family:Times">6</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-end'></span></span><![endif]-->
			 <span style="font-family:Helvetica-Narrow"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span></span>Status of the Already Initialized Register Stack</p>
			<h2 style="margin-left:0in">Coordinating Memory Access</h2>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Coprocessors:architecture&quot;<span style='mso-hide:none'> \z
&quot;REALSW.DOC-1053&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Coprocessors:memory
access&quot;<span style='mso-hide:none'> \z &quot;REALSW.DOC-1054&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The math coprocessor and main processor work simultaneously. However, since the coprocessor cannot handle device input or output, data originates in the main processor.</p>
			<p class="MsoNormal">The main processor and the coprocessor have their own registers, which are separate and inaccessible to each other. They exchange data through memory, since memory is available to both.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Coprocessors:steps for using&quot;<span style='mso-hide:none'> \z
&quot;REALSW.DOC-1055&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Coprocessors:memory
access&quot;<span style='mso-hide:none'> \z &quot;REALSW.DOC-1056&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">When using the coprocessor, follow these three steps:</p>
			<p class="Ln1" style="margin-left:22.0pt"><span style="mso-tab-count:1"></span>1.<span style="mso-tab-count:1">&nbsp; </span>Load data from memory to coprocessor registers.</p>
			<p class="Ln1" style="margin-left:22.0pt"><span style="mso-tab-count:1"></span>2.<span style="mso-tab-count:1">&nbsp; </span>Process the data.</p>
			<p class="Ln1" style="margin-left:22.0pt"><span style="mso-tab-count:1"></span>3.<span style="mso-tab-count:1">&nbsp; </span>Store the data from coprocessor registers back to memory.</p>
			<p class="Le"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<p class="MsoNormal">Step 2, processing the data, can occur while the main processor is handling other tasks. Steps 1 and 3 must be coordinated with the main processor so that the processor and coprocessor do not try to access the same memory at the same time; otherwise, problems of coordinating memory access can occur. Since the processor and coprocessor work independently, they may not finish working on memory in the order in which you give instructions. The two potential timing conflicts that can occur are handled in different ways.</p>
			<p class="MsoNormal">One timing conflict results from a coprocessor instruction following a processor instruction. The processor may have to wait until the coprocessor finishes if the next processor instruction requires the result of the coprocessor&#146;s calculation. You do not have to write your code to avoid this conflict, however. The assembler coordinates this timing automatically for the 8088 and 8086 processors, and the processor coordinates it automatically on the 80186&#150;80486 processors. This is the case shown in the first example that follows.</p>
			<p class="MsoNormal">Another conflict results from a processor instruction that accesses memory following a coprocessor instruction that accesses the same memory. The processor can try to load a variable that is still being used by the coprocessor. You need careful synchronization to control the timing, and this synchronization is not automatic on the 8087 coprocessor. For code to run correctly on the 8087, you must include <b style="mso-bidi-font-weight:normal">WAIT</b> or <b style="mso-bidi-font-weight:normal">FWAIT</b> (mnemonics for the same instruction) to ensure that the coprocessor finishes before the processor begins, as shown in the second example.</p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<p class="MsoNormal">In this situation, the processor does not generate the <b style="mso-bidi-font-weight:normal">FWAIT</b> instruction automatically.</p>
			<p class="Ex">; Processor instruction first - No wait needed<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>WORD PTR mem32[0], ax<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>; Load memory<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>WORD PTR mem32[2], dx<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fild<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>mem32<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Load to register<br>
			<br>
			; Coprocessor instruction first - Wait needed (for 8087)<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fist<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>mem32<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Store to memory<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fwait<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Wait until coprocessor<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>is done<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, WORD PTR mem32[0]<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>; Move to register<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>dx, WORD PTR mem32[2]<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="MsoNormal">When generating code for the 8087 coprocessor, the assembler automatically inserts a <b style="mso-bidi-font-weight:normal">WAIT </b>instruction before the coprocessor instruction. However, if you use the <b style="mso-bidi-font-weight:normal">.286</b> or <b style="mso-bidi-font-weight:
normal">.386 </b>directive, the compiler assumes that the coprocessor instructions are for the 80287 or 80387 and does not insert the <b style="mso-bidi-font-weight:normal">WAIT </b>instruction. If your code does not need to run on an 8086 or 8088 processor, you can make your programs smaller and more efficient by using the <b style="mso-bidi-font-weight:normal">.286</b> or <b style="mso-bidi-font-weight:normal">.386</b> directive.</p>
			<h2 style="margin-left:0in">Using Coprocessor Instructions</h2>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Coprocessors:instructions:described&quot;<span style='mso-hide:none'> \z
&quot;REALSW.DOC-1057&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The 8087 family of coprocessors has separate instructions for each of the following operations:</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;REALSW.DOC-1146&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>Loading and storing data</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;REALSW.DOC-1147&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>Doing arithmetic calculations</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;REALSW.DOC-1148&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>Controlling program flow</p>
			<p class="Le"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<p class="MsoNormal">The following sections explain the available instructions and show how to use them for each of these operations. For general syntax information, see &#147;Instruction and Operand Formats,&#148; earlier in this section.</p>
			<h3>Loading and Storing Data</h3>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Floating-point:operations&quot;<span style='mso-hide:none'> \z
&quot;REALSW.DOC-1058&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Data-transfer instructions copy data between main memory and the coprocessor registers or between different coprocessor registers. Two principles govern data transfers:</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Coprocessors:instructions:data transfer&quot;<span style='mso-hide:none'>
\z &quot;REALSW.DOC-1059&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>The choice of instruction determines whether a value in memory is considered an integer, a BCD number, or a real number. The value is always considered a 10-byte real number once transferred to the coprocessor.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;REALSW.DOC-1149&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="Lb1"><!--[if supportFields]><span style='mso-element:field-begin'></span>SYMBOL
117 \f &quot;MSIcons&quot; \s 9.5 \h <![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-tab-count:
1">&nbsp; </span>The size of the operand determines the size of a value in memory. Values in the coprocessor always take up 10 bytes.</p>
			<p class="Le"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<p class="MsoNormal">You can transfer data to stack registers using load commands. These commands push data onto the stack from memory or from coprocessor registers. Store commands remove data. Some store commands pop data off the register stack into memory or coprocessor registers; others simply copy the data without changing it on the stack.</p>
			<p class="MsoNormal">If you use constants as operands, you cannot load them directly into coprocessor registers. You must allocate memory and initialize a variable to a constant value. That variable can then be loaded by using one of the load instructions in the following list.</p>
			<p class="MsoNormal">The math coprocessor offers a few special instructions for loading certain constants. You can load 0, 1, pi, and several common logarithmic values directly. Using these instructions is faster and often more precise than loading the values from initialized variables.</p>
			<p class="MsoNormal">All instructions that load constants have the stack top as the implied destination operand. The constant to be loaded is the implied source operand.</p>
			<p class="MsoNormal">The coprocessor data area, or parts of it, can also be moved to memory and later loaded back. You may want to do this to save the current state of the coprocessor before executing a procedure. After the procedure ends, restore the previous status. Saving coprocessor data is also useful when you want to modify coprocessor behavior by writing certain data to main memory, operating on the data with 8086-family instructions, and then loading it back to the coprocessor data area.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Floating-point:instructions:data transfer&quot;<span style='mso-hide:
none'> \z &quot;REALSW.DOC-1060&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE
&quot;Coprocessors:instructions:arithmetic&quot;<span style='mso-hide:none'> \z
&quot;REALSW.DOC-1061&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Use the following instructions for transferring numbers to and from<br>
			registers:</p>
			<table border="0" cellspacing="0" cellpadding="0" style="margin-left:.4pt;border-collapse:
 collapse;mso-padding-alt:0in 0in 0in 0in">
				<tr>
					<td width="145" valign="top" style="width:108.45pt;padding:0in 0in 0in 0in">
						<p class="Thf">Instruction(s)</p>
						<p class="Thf"></p>
					</td>
					<td width="319" valign="top" style="width:239.55pt;padding:0in 0in 0in 0in">
						<p class="Th">Description</p>
						<p class="Th"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="464" colspan="2" valign="top" style="width:348.0pt;padding:0in 0in 0in 0in">
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="145" valign="top" style="width:108.45pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FLD</span></b>, <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">FST</span></b>, <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">FSTP</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="319" valign="top" style="width:239.55pt;padding:0in 0in 0in 0in">
						<p class="Tp">Loads and stores real numbers</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
				</tr>
				<tr>
					<td width="145" valign="top" style="width:108.45pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FILD</span></b>, <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">FIST</span></b>, <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">FISTP</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="319" valign="top" style="width:239.55pt;padding:0in 0in 0in 0in">
						<p class="Tp">Loads and stores binary integers</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="145" valign="top" style="width:108.45pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FBLD</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="319" valign="top" style="width:239.55pt;padding:0in 0in 0in 0in">
						<p class="Tp">Loads BCD</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="145" valign="top" style="width:108.45pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FBSTP</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="319" valign="top" style="width:239.55pt;padding:0in 0in 0in 0in">
						<p class="Tp">Stores BCD</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="145" valign="top" style="width:108.45pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FXCH</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="319" valign="top" style="width:239.55pt;padding:0in 0in 0in 0in">
						<p class="Tp">Exchanges register values</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="145" valign="top" style="width:108.45pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FLDZ</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="319" valign="top" style="width:239.55pt;padding:0in 0in 0in 0in">
						<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
  &quot;Instructions:FLDZ&quot;<span style='mso-hide:none'> \z
  &quot;REALSW.DOC-1062&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-begin'></span>XE &quot;FLDZ instruction&quot;<span
  style='mso-hide:none'> \z &quot;REALSW.DOC-1063&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						</p>
						<p class="Tp">Pushes 0 into ST</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="145" valign="top" style="width:108.45pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FLD1</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="319" valign="top" style="width:239.55pt;padding:0in 0in 0in 0in">
						<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
  &quot;Instructions:FLD1&quot;<span style='mso-hide:none'> \z
  &quot;REALSW.DOC-1064&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-begin'></span>XE &quot;FLD1 instruction&quot;<span
  style='mso-hide:none'> \z &quot;REALSW.DOC-1065&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						</p>
						<p class="Tp">Pushes 1 into ST</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="145" valign="top" style="width:108.45pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FLDPI</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="319" valign="top" style="width:239.55pt;padding:0in 0in 0in 0in">
						<p class="Tp">Pushes the value of pi into ST</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="145" valign="top" style="width:108.45pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FLDCW </span></b><i style="mso-bidi-font-style:normal">mem2byte</i></p>
						<p class="Tpf"></p>
					</td>
					<td width="319" valign="top" style="width:239.55pt;padding:0in 0in 0in 0in">
						<p class="Tp">Loads the control word into the coprocessor</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="145" valign="top" style="width:108.45pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">F</span></b><span style="font-family:Times;letter-spacing:-1.5pt">[</span><span style="font-family:Times">[</span><b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">N</span></b><b style="mso-bidi-font-weight:normal"><span style="font-family:Times;letter-spacing:-1.5pt">]</span></b><span style="font-family:Times">]</span><b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">STCW</span></b> <i style="mso-bidi-font-style:normal">mem2byte</i></p>
						<p class="Tpf"></p>
					</td>
					<td width="319" valign="top" style="width:239.55pt;padding:0in 0in 0in 0in">
						<p class="Tp">Stores the control word in memory</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="145" valign="top" style="width:108.45pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FLDENV </span></b><i style="mso-bidi-font-style:normal">mem14byte</i></p>
						<p class="Tpf"></p>
					</td>
					<td width="319" valign="top" style="width:239.55pt;padding:0in 0in 0in 0in">
						<p class="Tp">Loads environment from memory</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="145" valign="top" style="width:108.45pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">F</span></b><span style="font-family:Times;letter-spacing:-1.5pt">[</span><span style="font-family:Times">[</span><b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">N</span></b><span style="font-family:Times;
  letter-spacing:-1.5pt">]</span><span style="font-family:Times">]</span><b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">STENV</span></b> <i style="mso-bidi-font-style:normal">mem14byte</i></p>
						<p class="Tpf"></p>
					</td>
					<td width="319" valign="top" style="width:239.55pt;padding:0in 0in 0in 0in">
						<p class="Tp">Stores environment in memory</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="145" valign="top" style="width:108.45pt;padding:0in 0in 0in 0in">
						<p class="Thf">Instruction(s)</p>
						<p class="Thf"></p>
					</td>
					<td width="319" valign="top" style="width:239.55pt;padding:0in 0in 0in 0in">
						<p class="Th">Description</p>
						<p class="Th"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="464" colspan="2" valign="top" style="width:348.0pt;padding:0in 0in 0in 0in">
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="145" valign="top" style="width:108.45pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FRSTOR </span></b><i style="mso-bidi-font-style:normal">mem94byte</i></p>
						<p class="Tpf"></p>
					</td>
					<td width="319" valign="top" style="width:239.55pt;padding:0in 0in 0in 0in">
						<p class="Tp">Restores state from memory</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="145" valign="top" style="width:108.45pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">F</span></b><span style="font-family:Times;letter-spacing:-1.5pt">[</span><span style="font-family:Times">[</span><b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">N</span></b><span style="font-family:Times;
  letter-spacing:-1.5pt">]</span><span style="font-family:Times">]</span><b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">SAVE</span></b> <i style="mso-bidi-font-style:normal">mem94byte</i></p>
						<p class="Tpf"></p>
					</td>
					<td width="319" valign="top" style="width:239.55pt;padding:0in 0in 0in 0in">
						<p class="Tp">Saves state in memory</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="145" valign="top" style="width:108.45pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FLDL2E</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="319" valign="top" style="width:239.55pt;padding:0in 0in 0in 0in">
						<p class="Tp">Pushes the value of log<sub><span style="font-size:8.0pt">2</span></sub><sup><span style="font-size:8.0pt">e</span></sup> into ST</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="145" valign="top" style="width:108.45pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FLDL2T</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="319" valign="top" style="width:239.55pt;padding:0in 0in 0in 0in">
						<p class="Tp">Pushes log<sub><span style="font-size:8.0pt">2</span></sub><sup><span style="font-size:8.0pt">10</span></sup> into ST</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="145" valign="top" style="width:108.45pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FLDLG2</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="319" valign="top" style="width:239.55pt;padding:0in 0in 0in 0in">
						<p class="Tp">Pushes log<sub><span style="font-size:8.0pt">10</span></sub><sup><span style="font-size:8.0pt">2</span></sup> into ST</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="145" valign="top" style="width:108.45pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FLDLN2</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="319" valign="top" style="width:239.55pt;padding:0in 0in 0in 0in">
						<p class="Tp">Pushes log<sub><span style="font-size:8.0pt">e</span></sub><sup><span style="font-size:8.0pt">2</span></sup> into ST</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
			</table>
			<p class="Le"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<p class="MsoNormal">The following example and Figure 6.7 illustrate some of these instructions:</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.DATA<br>
			m1<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>REAL4<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>1.0<br>
			m2<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>REAL4<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>2.0<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.CODE<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fld<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>m1<span style="mso-spacerun: yes">&nbsp; </span><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;</span>; Push m1 into first item<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fld<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>st(2)<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>; Push third item into first<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fst<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>m2<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Copy first item to m2<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fxch<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>st(2)<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>; Exchange first and third items<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fstp<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>m1<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Pop first item into m1<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="Art" style="margin-left:0in"><span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp; </span><span style='mso-field-code:"include M\:\\\\SLM\\\\SRC\\\\MASM61\\\\APPS\\\\ART\\\\mpchp06\.doc art_mp0607_eps  \\\\* mergeformat"'><a name="art_mp0607_eps"></a><a name="space_mp0607_eps"><span style="mso-bookmark:
art_mp0607_eps"></span></a><!--[if supportFields]><span style='mso-bookmark:
space_mp0607_eps'><span style='mso-bookmark:art_mp0607_eps'></span></span><span
style='mso-element:field-begin'></span><span style='mso-bookmark:space_mp0607_eps'><span
style='mso-bookmark:art_mp0607_eps'>IMPORT
M:\\SLM\\SRC\\MASM61\\APPS\\ART\\MP0607.EPS \* mergeformat<span
style='mso-element:field-separator'></span></span></span><![endif]-->
			<span style="mso-bookmark:space_mp0607_eps"><span style="mso-bookmark:art_mp0607_eps"><!--[if gte vml 1]><v:shape
 id="_x0000_i1031" type="#_x0000_t75" style='width:321pt;height:206.25pt'>
 <v:imagedata src="./Chap_06_files/image013.wmz" o:href="file:///M:/SLM/SRC/MASM61/APPS/ART/MP0607.EPS"/>
</v:shape><![endif]-->
			<![if !vml]><img width="428" height="275" src="Chap_06_files/image014.gif" v:shapes="_x0000_i1031"><![endif]></span></span><!--[if supportFields]><span
style='mso-bookmark:space_mp0607_eps'><span style='mso-bookmark:art_mp0607_eps'></span></span><span
style='mso-element:field-end'></span><![endif]-->
			 <span style="mso-bookmark:
space_mp0607_eps"><span style="mso-bookmark:art_mp0607_eps"></span></span></span></p>
			<p class="Cap">Figure <!--[if supportFields]><span style='font-family:Times'><span
style='mso-element:field-begin'></span>SEQ chapter \c<span style='mso-element:
field-separator'></span></span><![endif]-->
			<span style="font-family:Times">6</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-end'></span></span><![endif]-->
			 <span style="font-family:Times">.</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-begin'></span>SEQ
figure<span style='mso-element:field-separator'></span></span><![endif]-->
			 <span style="font-family:Times">7</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-end'></span></span><![endif]-->
			 <span style="font-family:Helvetica-Narrow"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span></span>Status of the Register Stack:<span style="font-family:Helvetica-Narrow"> </span>Main Memory and Coprocessor</p>
			<h3>Doing Arithmetic Calculations</h3>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Coprocessors:instructions:arithmetic&quot;<span style='mso-hide:none'> \z
&quot;REALSW.DOC-1066&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE
&quot;Floating-point:instructions:arithmetic&quot;<span style='mso-hide:none'>
\z &quot;REALSW.DOC-1067&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Most of the coprocessor instructions for arithmetic operations have several forms, depending on the operand used. You do not need to specify the operand type in the</p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<p class="MsoNormal">instruction if both operands are stack registers, since register values are always 10-byte real numbers. In most of the arithmetic instructions listed here, the result replaces the destination register. The instructions include:</p>
			<table border="0" cellspacing="0" cellpadding="0" style="margin-left:.4pt;border-collapse:
 collapse;mso-padding-alt:0in 0in 0in 0in">
				<tr>
					<td width="77" valign="top" style="width:57.75pt;padding:0in 0in 0in 0in">
						<p class="Thf">Instruction</p>
						<p class="Thf"></p>
					</td>
					<td width="387" valign="top" style="width:290.25pt;padding:0in 0in 0in 0in">
						<p class="Th">Description</p>
						<p class="Th"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="464" colspan="2" valign="top" style="width:348.0pt;padding:0in 0in 0in 0in">
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="77" valign="top" style="width:57.75pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FADD</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="387" valign="top" style="width:290.25pt;padding:0in 0in 0in 0in">
						<p class="Tp">Adds the source and destination</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
				</tr>
				<tr>
					<td width="77" valign="top" style="width:57.75pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FSUB</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="387" valign="top" style="width:290.25pt;padding:0in 0in 0in 0in">
						<p class="Tp">Subtracts the source from the destination</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="77" valign="top" style="width:57.75pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FSUBR</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="387" valign="top" style="width:290.25pt;padding:0in 0in 0in 0in">
						<p class="Tp">Subtracts the destination from the source</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="77" valign="top" style="width:57.75pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FMUL</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="387" valign="top" style="width:290.25pt;padding:0in 0in 0in 0in">
						<p class="Tp">Multiplies the source and the destination</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="77" valign="top" style="width:57.75pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FDIV</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="387" valign="top" style="width:290.25pt;padding:0in 0in 0in 0in">
						<p class="Tp">Divides the destination by the source</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="77" valign="top" style="width:57.75pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FDIVR</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="387" valign="top" style="width:290.25pt;padding:0in 0in 0in 0in">
						<p class="Tp">Divides the source by the destination</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="77" valign="top" style="width:57.75pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FABS</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="387" valign="top" style="width:290.25pt;padding:0in 0in 0in 0in">
						<p class="Tp">Sets the sign of ST to positive</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="77" valign="top" style="width:57.75pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FCHS</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="387" valign="top" style="width:290.25pt;padding:0in 0in 0in 0in">
						<p class="Tp">Reverses the sign of ST</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="77" valign="top" style="width:57.75pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FRNDINT</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="387" valign="top" style="width:290.25pt;padding:0in 0in 0in 0in">
						<p class="Tp">Rounds ST to an integer</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="77" valign="top" style="width:57.75pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FSQRT</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="387" valign="top" style="width:290.25pt;padding:0in 0in 0in 0in">
						<p class="Tp">Replaces the contents of ST<b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt"> </span></b>with its square root</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="77" valign="top" style="width:57.75pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FSCALE</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="387" valign="top" style="width:290.25pt;padding:0in 0in 0in 0in">
						<p class="Tp">Multiplies the stack-top value by 2 to the power contained in ST(1)</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="77" valign="top" style="width:57.75pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FPREM</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="387" valign="top" style="width:290.25pt;padding:0in 0in 0in 0in">
						<p class="Tp">Calculates the remainder of ST divided by ST(1)</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
			</table>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Coprocessors:instructions:arithmetic&quot;<span style='mso-hide:none'> \z
&quot;REALSW.DOC-1068&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE
&quot;Floating-point:instructions:arithmetic&quot;<span style='mso-hide:none'>
\z &quot;REALSW.DOC-1069&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<h3>80387 Only<span style="mso-spacerun: yes">&nbsp; </span></h3>
			<table border="0" cellspacing="0" cellpadding="0" style="margin-left:.4pt;border-collapse:
 collapse;mso-padding-alt:0in 0in 0in 0in">
				<tr>
					<td width="79" valign="top" style="width:59.25pt;padding:0in 0in 0in 0in">
						<p class="Thf">Instruction</p>
						<p class="Thf"></p>
					</td>
					<td width="385" valign="top" style="width:288.75pt;padding:0in 0in 0in 0in">
						<p class="Th">Description</p>
						<p class="Th"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="464" colspan="2" valign="top" style="width:348.0pt;padding:0in 0in 0in 0in">
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="79" valign="top" style="width:59.25pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FSIN</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="385" valign="top" style="width:288.75pt;padding:0in 0in 0in 0in">
						<p class="Tp">Calculates the sine of the value in ST</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
				</tr>
				<tr>
					<td width="79" valign="top" style="width:59.25pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FCOS</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="385" valign="top" style="width:288.75pt;padding:0in 0in 0in 0in">
						<p class="Tp">Calculates the cosine of the value in ST</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="79" valign="top" style="width:59.25pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FSINCOS</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="385" valign="top" style="width:288.75pt;padding:0in 0in 0in 0in">
						<p class="Tp">Calculates the sine and cosine of the value in ST</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="79" valign="top" style="width:59.25pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FPREM1</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="385" valign="top" style="width:288.75pt;padding:0in 0in 0in 0in">
						<p class="Tp">Calculates the partial remainder by performing modulo division on the top two stack registers</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="79" valign="top" style="width:59.25pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FXTRACT</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="385" valign="top" style="width:288.75pt;padding:0in 0in 0in 0in">
						<p class="Tp">Breaks a number down into its exponent and mantissa and pushes the mantissa onto the register stack</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="79" valign="top" style="width:59.25pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">F2XM1</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="385" valign="top" style="width:288.75pt;padding:0in 0in 0in 0in">
						<p class="Tp">Calculates 2<sup>x</sup>&#150;1</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="79" valign="top" style="width:59.25pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FYL2X</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="385" valign="top" style="width:288.75pt;padding:0in 0in 0in 0in">
						<p class="Tp">Calculates <i style="mso-bidi-font-style:normal"><span style='font-family:"Tms Rmn"'>Y</span></i> <sub>*</sub> log<sub><span style="font-size:8.0pt">2</span></sub> <i style="mso-bidi-font-style:normal"><span style='font-family:"Tms Rmn"'>X</span></i></p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="79" valign="top" style="width:59.25pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FYL2XP1</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="385" valign="top" style="width:288.75pt;padding:0in 0in 0in 0in">
						<p class="Tp">Calculates <i style="mso-bidi-font-style:normal"><span style='font-family:"Tms Rmn"'>Y</span></i> <sub>*</sub> log<sub><span style="font-size:8.0pt">2</span></sub> (<i style="mso-bidi-font-style:normal"><span style='font-family:"Tms Rmn"'>X</span></i>+1)</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="79" valign="top" style="width:59.25pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FPTAN</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="385" valign="top" style="width:288.75pt;padding:0in 0in 0in 0in">
						<p class="Tp">Calculates the tangent of the value in ST</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="79" valign="top" style="width:59.25pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FPATAN</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="385" valign="top" style="width:288.75pt;padding:0in 0in 0in 0in">
						<p class="Tp">Calculates the arctangent of the ratio <i style="mso-bidi-font-style:
  normal"><span style='font-family:"Tms Rmn"'>Y</span></i><span style='font-family:"Tms Rmn"'>/<i style="mso-bidi-font-style:normal">X</i></span></p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="79" valign="top" style="width:59.25pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">F</span></b><span style="font-family:Times;letter-spacing:-1.5pt">[</span><span style="font-family:Times">[</span><b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">N</span></b><span style="font-family:Times;
  letter-spacing:-1.5pt">]</span><span style="font-family:Times">]</span><b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">INIT</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="385" valign="top" style="width:288.75pt;padding:0in 0in 0in 0in">
						<p class="Tp">Resets the coprocessor and restores all the default conditions in the control and status words</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="79" valign="top" style="width:59.25pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">F</span></b><span style="font-family:Times;letter-spacing:-1.5pt">[</span><span style="font-family:Times">[</span><b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">N</span></b><span style="font-family:Times;
  letter-spacing:-1.5pt">]</span><span style="font-family:Times">]</span><b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">CLEX</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="385" valign="top" style="width:288.75pt;padding:0in 0in 0in 0in">
						<p class="Tp">Clears all exception flags and the busy flag of the status word</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="79" valign="top" style="width:59.25pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FINCSTP</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="385" valign="top" style="width:288.75pt;padding:0in 0in 0in 0in">
						<p class="Tp">Adds 1 to the stack pointer in the status word</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="79" valign="top" style="width:59.25pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FDECSTP</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="385" valign="top" style="width:288.75pt;padding:0in 0in 0in 0in">
						<p class="Tp">Subtracts 1 from the stack pointer in the status word</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="79" valign="top" style="width:59.25pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FFREE</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="385" valign="top" style="width:288.75pt;padding:0in 0in 0in 0in">
						<p class="Tp">Marks the specified register as empty</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
			</table>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<p class="MsoNormal">The following example illustrates several arithmetic instructions. The code solves quadratic equations, but does no error checking and fails for some values because it attempts to find the square root of a negative number. Both Help and the MATH.ASM sample file show a complete version of this procedure. The complete form uses the <b style="mso-bidi-font-weight:
normal">FTST</b> (Test for Zero) instruction to check for a negative number or 0 before calculating the square root.</p>
			<p class="Ex" style="page-break-after:auto"><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.DATA<br>
			a<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>REAL4<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>3.0<br>
			b<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>REAL4<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>7.0<br>
			cc<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>REAL4<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>2.0<br>
			posx<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>REAL4<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>0.0<br>
			negx<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>REAL4<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>0.0<br>
			<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.CODE<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			; Solve quadratic equation - no error checking<br>
			; The formula is: -b +/- squareroot(b<sup>2</sup> - 4ac) / (2a)<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fld1<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Get constants 2 and 4<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fadd<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>st,st<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; 2 at bottom<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fld<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>st<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Copy it<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fmul<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>a<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; = 2a<br>
			<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fmul<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>st(1),st<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>; = 4a<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fxch<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Exchange<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fmul<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>cc<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; = 4ac<br>
			<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fld<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>b<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Load b<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fmul<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>st,st<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; = b<sup>2</sup><br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fsubr<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; = b<sup>2</sup> - 4ac<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Negative value here produces error<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fsqrt<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; = square root(b<sup>2</sup> - 4ac)<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fld<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>b<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Load b<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fchs<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Make it negative<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fxch<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Exchange<br>
			<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fld<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>st<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Copy square root<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fadd<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>st,st(2)<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>; Plus version = -b + root(b<sup>2</sup> - 4ac)<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fxch<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Exchange<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fsubp<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>st(2),st<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>; Minus version = -b - root(b<sup>2</sup> - 4ac)<br>
			<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fdiv<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>st,st(2)<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>; Divide plus version<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fstp<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>posx<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Store it<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fdivr<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Divide minus version<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fstp<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>negx<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Store it<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Coprocessors:instructions:program control&quot;<span style='mso-hide:
none'> \z &quot;REALSW.DOC-1070&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Floating-point:instructions:program
control&quot;<span style='mso-hide:none'> \z &quot;REALSW.DOC-1071&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<h3>Controlling Program Flow<span style="mso-spacerun: yes">&nbsp; </span></h3>
			<p class="MsoNormal">The math coprocessor has several instructions that set control flags in the status word. The 8087-family control flags can be used with conditional jumps to direct program flow in the same way that 8086-family flags are used. Since the coprocessor does not have jump instructions, you must transfer the status word to memory so that the flags can be used by 8086-family instructions.</p>
			<p class="MsoNormal">An easy way to use the status word with conditional jumps is to move its upper byte into the lower byte of the processor flags, as shown in this example:</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fstsw<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>mem16<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Store status word in memory<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fwait<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Make sure coprocessor is done<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, mem16<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Move to AX<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>sahf<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Store upper word in flags<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="MsoNormal">The <b style="mso-bidi-font-weight:normal">SAHF</b> (Store AH into Flags) instruction in this example transfers AH into the low bits of the flags register.</p>
			<p class="MsoNormal">You can save several steps by loading the status word directly to AX on the 80287 with the <b style="mso-bidi-font-weight:normal">FSTSW</b> and <b style="mso-bidi-font-weight:normal">FNSTSW</b> instructions. This is the only case in which data can be transferred directly between processor and coprocessor registers, as shown in this example:</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fstsw<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>ax<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="MsoNormal">The coprocessor control flags and their relationship to the status word are described in &#147;Control Registers,&#148; following.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Coprocessors:instructions:program control&quot;<span style='mso-hide:
none'> \z &quot;REALSW.DOC-1072&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE
&quot;Floating-point:instructions:program control&quot;<span style='mso-hide:
none'> \z &quot;REALSW.DOC-1073&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The 8087-family coprocessors provide several instructions for comparing operands and testing control flags. All these instructions compare the stack top (ST) to a source operand, which may either be specified or implied as ST(1).</p>
			<p class="MsoNormal">The compare instructions affect the C3, C2, and C0 control flags, but not the C1 flag. Table <span style='mso-field-code:"seq chapter \\c"'>6</span>.3 shows the flags&#146; settings for each possible result of a comparison or test.</p>
			<table border="0" cellspacing="0" cellpadding="0" style="margin-left:.4pt;border-collapse:
 collapse;mso-padding-alt:0in 0in 0in 0in">
				<tr>
					<td width="464" colspan="5" valign="top" style="width:347.95pt;padding:0in 0in 0in 0in">
						<p class="Tt">Table <span style='mso-field-code:"seq chapter \\c"'>6</span>.3<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Control-Flag Settings After Comparison or Test</p>
						<p class="Tt"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="464" colspan="5" valign="top" style="width:347.95pt;padding:0in 0in 0in 0in">
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
				</tr>
				<tr>
					<td width="102" valign="top" style="width:76.25pt;padding:0in 0in 0in 0in">
						<p class="Thf">After FCOM</p>
						<p class="Thf"></p>
					</td>
					<td width="208" valign="top" style="width:155.75pt;padding:0in 0in 0in 0in">
						<p class="Th">After FTEST</p>
						<p class="Th"></p>
					</td>
					<td width="52" valign="top" style="width:38.65pt;padding:0in 0in 0in 0in">
						<p class="Th">C3</p>
						<p class="Th"></p>
					</td>
					<td width="52" valign="top" style="width:38.65pt;padding:0in 0in 0in 0in">
						<p class="Th">C2</p>
						<p class="Th"></p>
					</td>
					<td width="52" valign="top" style="width:38.65pt;padding:0in 0in 0in 0in">
						<p class="Th">C0</p>
						<p class="Th"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="464" colspan="5" valign="top" style="width:347.95pt;padding:0in 0in 0in 0in">
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="102" valign="top" style="width:76.25pt;padding:0in 0in 0in 0in">
						<p class="Tpf">ST &gt; <i style="mso-bidi-font-style:normal"><span style='font-family:"Tms Rmn"'>source</span></i></p>
						<p class="Tpf"></p>
					</td>
					<td width="208" valign="top" style="width:155.75pt;padding:0in 0in 0in 0in">
						<p class="Tp">ST is positive</p>
						<p class="Tp"></p>
					</td>
					<td width="52" valign="top" style="width:38.65pt;padding:0in 0in 0in 0in">
						<p class="Tp">0</p>
						<p class="Tp"></p>
					</td>
					<td width="52" valign="top" style="width:38.65pt;padding:0in 0in 0in 0in">
						<p class="Tp">0</p>
						<p class="Tp"></p>
					</td>
					<td width="52" valign="top" style="width:38.65pt;padding:0in 0in 0in 0in">
						<p class="Tp">0</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
				</tr>
				<tr>
					<td width="102" valign="top" style="width:76.25pt;padding:0in 0in 0in 0in">
						<p class="Tpf">ST &lt; <i style="mso-bidi-font-style:normal"><span style='font-family:"Tms Rmn"'>source</span></i></p>
						<p class="Tpf"></p>
					</td>
					<td width="208" valign="top" style="width:155.75pt;padding:0in 0in 0in 0in">
						<p class="Tp">ST is negative</p>
						<p class="Tp"></p>
					</td>
					<td width="52" valign="top" style="width:38.65pt;padding:0in 0in 0in 0in">
						<p class="Tp">0</p>
						<p class="Tp"></p>
					</td>
					<td width="52" valign="top" style="width:38.65pt;padding:0in 0in 0in 0in">
						<p class="Tp">0</p>
						<p class="Tp"></p>
					</td>
					<td width="52" valign="top" style="width:38.65pt;padding:0in 0in 0in 0in">
						<p class="Tp">1</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="102" valign="top" style="width:76.25pt;padding:0in 0in 0in 0in">
						<p class="Tpf">ST = <i style="mso-bidi-font-style:normal"><span style='font-family:"Tms Rmn"'>source</span></i></p>
						<p class="Tpf"></p>
					</td>
					<td width="208" valign="top" style="width:155.75pt;padding:0in 0in 0in 0in">
						<p class="Tp">ST is 0</p>
						<p class="Tp"></p>
					</td>
					<td width="52" valign="top" style="width:38.65pt;padding:0in 0in 0in 0in">
						<p class="Tp">1</p>
						<p class="Tp"></p>
					</td>
					<td width="52" valign="top" style="width:38.65pt;padding:0in 0in 0in 0in">
						<p class="Tp">0</p>
						<p class="Tp"></p>
					</td>
					<td width="52" valign="top" style="width:38.65pt;padding:0in 0in 0in 0in">
						<p class="Tp">0</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="102" valign="top" style="width:76.25pt;padding:0in 0in 0in 0in">
						<p class="Tpf">Not comparable</p>
						<p class="Tpf"></p>
					</td>
					<td width="208" valign="top" style="width:155.75pt;padding:0in 0in 0in 0in">
						<p class="Tp">ST is NAN or projective infinity</p>
						<p class="Tp"></p>
					</td>
					<td width="52" valign="top" style="width:38.65pt;padding:0in 0in 0in 0in">
						<p class="Tp">1</p>
						<p class="Tp"></p>
					</td>
					<td width="52" valign="top" style="width:38.65pt;padding:0in 0in 0in 0in">
						<p class="Tp">1</p>
						<p class="Tp"></p>
					</td>
					<td width="52" valign="top" style="width:38.65pt;padding:0in 0in 0in 0in">
						<p class="Tp">1</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
			</table>
			<div style="border:none;border-top:solid windowtext .75pt;padding:1.0pt 0in 0in 0in">
				<p class="Te"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			</div>
			<p class="MsoNormal">Variations on the compare instructions allow you to pop the stack once or twice and to compare integers and zero. For each instruction, the stack top is always the implied destination operand. If you do not give an operand, ST(1) is the<br>
			implied source. With some compare instructions, you can specify the source as<br>
			a memory or register operand.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Coprocessors:instructions:program control&quot;<span style='mso-hide:
none'> \z &quot;REALSW.DOC-1074&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE
&quot;Floating-point:instructions:program control&quot;<span style='mso-hide:
none'> \z &quot;REALSW.DOC-1075&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">All instructions summarized in the following list have implied operands: either ST as a single-destination operand or ST as the destination and ST(1) as the source. Each instruction in the list has implied operands. Some instructions have a wait version and a no-wait version. The no-wait versions have <b style="mso-bidi-font-weight:normal">N</b> as the second letter. The instructions for comparing and testing flags include:</p>
			<table border="0" cellspacing="0" cellpadding="0" style="margin-left:.4pt;border-collapse:
 collapse;mso-padding-alt:0in 0in 0in 0in">
				<tr>
					<td width="161" valign="top" style="width:120.55pt;padding:0in 0in 0in 0in">
						<p class="Thf">Instruction</p>
						<p class="Thf"></p>
					</td>
					<td width="303" valign="top" style="width:227.45pt;padding:0in 0in 0in 0in">
						<p class="Th">Description</p>
						<p class="Th"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="464" colspan="2" valign="top" style="width:348.0pt;padding:0in 0in 0in 0in">
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="161" valign="top" style="width:120.55pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FCOM</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="303" valign="top" style="width:227.45pt;padding:0in 0in 0in 0in">
						<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
  &quot;Instructions:FCOM&quot;<span style='mso-hide:none'> \z
  &quot;REALSW.DOC-1076&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-begin'></span>XE &quot;FCOM instruction&quot;<span
  style='mso-hide:none'> \z &quot;REALSW.DOC-1077&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						</p>
						<p class="Tp">Compares the stack top to the source. The<br>
						source and destination are unaffected by the comparison.</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
				</tr>
				<tr>
					<td width="161" valign="top" style="width:120.55pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FTST</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="303" valign="top" style="width:227.45pt;padding:0in 0in 0in 0in">
						<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
  &quot;Instructions:FTST&quot;<span style='mso-hide:none'> \z
  &quot;REALSW.DOC-1078&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-begin'></span>XE &quot;FTST instruction&quot;<span
  style='mso-hide:none'> \z &quot;REALSW.DOC-1079&quot;</span><![endif]-->
						<!--[if supportFields]><span
  style='mso-element:field-end'></span><![endif]-->
						</p>
						<p class="Tp">Compares ST to 0. <a name="TempTable"></a></p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="161" valign="top" style="width:120.55pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FCOMP</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="303" valign="top" style="width:227.45pt;padding:0in 0in 0in 0in">
						<p class="Tp">Compares the stack top to the source and then pops the stack.</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="161" valign="top" style="width:120.55pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FUCOM</span></b>, <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">FUCOMP</span></b>, <b style="mso-bidi-font-weight:
  normal"><span style="font-size:9.0pt">FUCOMPP</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="303" valign="top" style="width:227.45pt;padding:0in 0in 0in 0in">
						<p class="Tp">Compares the source to ST and sets the condition codes of the status word according to the result (80386/486 only).</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="161" valign="top" style="width:120.55pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">F</span></b><span style="font-family:Times;letter-spacing:-1.5pt">[</span><span style="font-family:Times">[</span><b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">N</span></b><span style="font-family:Times;
  letter-spacing:-1.5pt">]</span><span style="font-family:Times">]</span><b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">STSW</span></b> <i style="mso-bidi-font-style:normal">mem2byte</i></p>
						<p class="Tpf"></p>
					</td>
					<td width="303" valign="top" style="width:227.45pt;padding:0in 0in 0in 0in">
						<p class="Tp">Stores the status word in memory.</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="161" valign="top" style="width:120.55pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FXAM</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="303" valign="top" style="width:227.45pt;padding:0in 0in 0in 0in">
						<p class="Tp">Sets the value of the control flags based on the type of the number in ST.</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="161" valign="top" style="width:120.55pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FPREM</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="303" valign="top" style="width:227.45pt;padding:0in 0in 0in 0in">
						<p class="Tp">Finds a correct remainder for large operands. It uses the C2 flag to indicate whether the remainder returned is partial (C2 is set) or complete (C2 is clear). If the bit is set, the operation should be repeated. It also returns the least-significant three bits of the quotient in C0, C3, and C1.</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="161" valign="top" style="width:120.55pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FNOP</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="303" valign="top" style="width:227.45pt;padding:0in 0in 0in 0in">
						<p class="Tp">Copies the stack top onto itself, thus padding the executable file and taking up processing time without having any effect on registers or memory.</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="161" valign="top" style="width:120.55pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FDISI</span></b>, <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">FNDISI</span></b>, <b style="mso-bidi-font-weight:
  normal"><span style="font-size:9.0pt">FENI</span></b>, <b style="mso-bidi-font-weight:
  normal"><span style="font-size:9.0pt">FNENI</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="303" valign="top" style="width:227.45pt;padding:0in 0in 0in 0in">
						<p class="Tp">Enables or disables interrupts (8087 only).</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="161" valign="top" style="width:120.55pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">FSETPM</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="303" valign="top" style="width:227.45pt;padding:0in 0in 0in 0in">
						<p class="Tp">Sets protected mode. Requires a <b style="mso-bidi-font-weight:
  normal"><span style="font-size:9.0pt">.286P</span></b> or <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">.386P</span></b> directive (80287, 80387, and 80486 only).</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
			</table>
			<p class="Le"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<p class="MsoNormal" style="page-break-after:avoid">The following example illustrates some of these instructions. Notice how conditional blocks are used to enhance 80287 code.</p>
			<p class="Ex" style="page-break-after:auto"><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.DATA<br>
			down<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>REAL4<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>10.35<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Sides of a rectangle<br>
			across<span style="mso-spacerun: yes">&nbsp; </span>REAL4<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>13.07<br>
			diamtr<span style="mso-spacerun: yes">&nbsp; </span>REAL4<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>12.93<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Diameter of a circle<br>
			status<span style="mso-spacerun: yes">&nbsp; </span>WORD<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>?</p>
			<p class="Ex">P287<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>EQU<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>(@Cpu AND 00111y)<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.CODE<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			; Get area of rectangle<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fld<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>across<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>; Load one side<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fmul<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>down<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Multiply by the other<br>
			<br>
			; Get area of circle:<span style="mso-spacerun: yes">&nbsp; </span>Area = PI * (D/2)2<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fld1<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Load one and<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fadd<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>st, st<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>double it to get constant 2<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fdivr<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>diamtr<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>; Divide diameter to get radius<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fmul<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>st, st<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>; Square radius<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fldpi<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Load pi<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fmul<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Multiply it<br>
			<br>
			; Compare area of circle and rectangle<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fcompp<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Compare and throw both away<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>IF<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>p287<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fstsw<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>ax<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; (For 287+, skip memory)<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>ELSE<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fnstsw<span style="mso-spacerun:
yes">&nbsp; </span>status<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>; Load from coprocessor to memory<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, status ; Transfer memory to register<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>ENDIF<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>sahf<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Transfer AH to flags register<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>jp<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>nocomp<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>; If parity set, can't compare<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>jz<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>same<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; If zero set, they're the same<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>jc<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>rectangle<span style="mso-spacerun: yes">&nbsp; </span>; If carry set, rectangle is bigger<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>jmp<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>circle<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>else circle is bigger<br>
			<br>
			nocomp:<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Error handler<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			same:<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Both equal<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			rectangle:<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Rectangle bigger<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="mso-spacerun:
yes">&nbsp;</span>.<br>
			circle:<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Circle bigger<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Coprocessors:instructions:program control&quot;<span style='mso-hide:
none'> \z &quot;REALSW.DOC-1080&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE
&quot;Floating-point:instructions:program control&quot;<span style='mso-hide:
none'> \z &quot;REALSW.DOC-1081&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe Instructions:floating-point \t
&quot;See Floating-point, instructions&quot;<span style='mso-hide:none'> \z
&quot;REALSW.DOC-1082&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Additional instructions for the 80387/486 are <b style="mso-bidi-font-weight:normal">FLDENVD</b> and <b style="mso-bidi-font-weight:
normal">FLDENVW</b> for loading the environment; <b style="mso-bidi-font-weight:
normal">FNSTENVD</b>, <b style="mso-bidi-font-weight:normal">FNSTENVW</b>, <b style="mso-bidi-font-weight:normal">FSTENVD</b>, and <b style="mso-bidi-font-weight:
normal">FSTENVW</b> for storing the environment state; <b style="mso-bidi-font-weight:
normal">FNSAVED</b>, <b style="mso-bidi-font-weight:normal">FNSAVEW</b>, <b style="mso-bidi-font-weight:normal">FSAVED</b>, and <b style="mso-bidi-font-weight:
normal">FSAVEW</b> for saving the coprocessor state; and <b style="mso-bidi-font-weight:
normal">FRSTORD</b> and <b style="mso-bidi-font-weight:normal">FRSTORW</b> for restoring the coprocessor state.</p>
			<p class="MsoNormal">The size of the code segment, not the operand size, determines the number of bytes loaded or stored with these instructions. The instructions ending with <b style="mso-bidi-font-weight:normal">W</b> store the 16-bit form of the control register data, and the instructions ending with <b style="mso-bidi-font-weight:normal">D</b> store the 32-bit form. For example, in 16-bit mode <b style="mso-bidi-font-weight:normal">FSAVEW</b> saves the 16-bit control register data. If you need to store the 32-bit form of the control register data, use <b style="mso-bidi-font-weight:normal">FSAVED</b>.</p>
			<h3>Control Registers</h3>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Coprocessors:control registers&quot;<span style='mso-hide:none'> \z
&quot;REALSW.DOC-1083&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Some of the flags of the seven 16-bit control registers control coprocessor operations, while others maintain the current status of the coprocessor. In this sense, they are much like the 8086-family flags registers (see Figure 6.8).</p>
			<p class="Art" style="margin-left:0in"><span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp; </span><span style='mso-field-code:"include M\:\\\\SLM\\\\SRC\\\\MASM61\\\\APPS\\\\ART\\\\mpchp06\.doc art_mp0608_eps  \\\\* mergeformat"'><a name="art_mp0608_eps"></a><a name="space_mp0608_eps"><span style="mso-bookmark:
art_mp0608_eps"></span></a><!--[if supportFields]><span style='mso-bookmark:
space_mp0608_eps'><span style='mso-bookmark:art_mp0608_eps'></span></span><span
style='mso-element:field-begin'></span><span style='mso-bookmark:space_mp0608_eps'><span
style='mso-bookmark:art_mp0608_eps'>IMPORT
M:\\SLM\\SRC\\MASM61\\APPS\\ART\\MP0608.EPS \* mergeformat<span
style='mso-element:field-separator'></span></span></span><![endif]-->
			<span style="mso-bookmark:space_mp0608_eps"><span style="mso-bookmark:art_mp0608_eps"><!--[if gte vml 1]><v:shape
 id="_x0000_i1032" type="#_x0000_t75" style='width:141.75pt;height:155.25pt'>
 <v:imagedata src="./Chap_06_files/image015.wmz" o:href="file:///M:/SLM/SRC/MASM61/APPS/ART/MP0608.EPS"/>
</v:shape><![endif]-->
			<![if !vml]><img width="189" height="207" src="Chap_06_files/image016.gif" v:shapes="_x0000_i1032"><![endif]></span></span><!--[if supportFields]><span
style='mso-bookmark:space_mp0608_eps'><span style='mso-bookmark:art_mp0608_eps'></span></span><span
style='mso-element:field-end'></span><![endif]-->
			 <span style="mso-bookmark:
space_mp0608_eps"><span style="mso-bookmark:art_mp0608_eps"></span></span></span></p>
			<p class="Cap">Figure <!--[if supportFields]><span style='font-family:Times'><span
style='mso-element:field-begin'></span>SEQ chapter \c<span style='mso-element:
field-separator'></span></span><![endif]-->
			<span style="font-family:Times">6</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-end'></span></span><![endif]-->
			 <span style="font-family:Times">.</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-begin'></span>SEQ
figure<span style='mso-element:field-separator'></span></span><![endif]-->
			 <span style="font-family:Times">8</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-end'></span></span><![endif]-->
			 <span style="font-family:Helvetica-Narrow"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span></span>Coprocessor Control Registers</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Coprocessors:status word register&quot;<span style='mso-hide:none'> \z
&quot;REALSW.DOC-1084&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The status word register is the only commonly used control register. (The others are used mostly by systems programmers.) The format of the status word register is shown in Figure 6.9, which shows how the coprocessor control flags align with the processor flags. C3 overwrites the zero flag, C2 overwrites the parity flag, and C0 overwrites the carry flag. C1 overwrites an undefined bit, so it cannot be used directly with conditional jumps, although you can use the <b style="mso-bidi-font-weight:normal">TEST</b> instruction to</p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<p class="MsoNormal">check C1 in memory or in a register. The status word register also overwrites the sign and auxiliary-carry flags, so you cannot count on their being unchanged after the operation.</p>
			<p class="Art" style="margin-left:0in"><span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp; </span><span style='mso-field-code:"include M\:\\\\SLM\\\\SRC\\\\MASM61\\\\APPS\\\\ART\\\\mpchp06\.doc art_mp0609_eps  \\\\* mergeformat"'><a name="art_mp0609_eps"></a><a name="space_mp0609_eps"><span style="mso-bookmark:
art_mp0609_eps"></span></a><!--[if supportFields]><span style='mso-bookmark:
space_mp0609_eps'><span style='mso-bookmark:art_mp0609_eps'></span></span><span
style='mso-element:field-begin'></span><span style='mso-bookmark:space_mp0609_eps'><span
style='mso-bookmark:art_mp0609_eps'>IMPORT
M:\\SLM\\SRC\\MASM61\\APPS\\ART\\MP0609.EPS \* mergeformat<span
style='mso-element:field-separator'></span></span></span><![endif]-->
			<span style="mso-bookmark:space_mp0609_eps"><span style="mso-bookmark:art_mp0609_eps"><!--[if gte vml 1]><v:shape
 id="_x0000_i1033" type="#_x0000_t75" style='width:126.75pt;height:123.75pt'>
 <v:imagedata src="./Chap_06_files/image017.wmz" o:href="file:///M:/SLM/SRC/MASM61/APPS/ART/MP0609.EPS"/>
</v:shape><![endif]-->
			<![if !vml]><img width="169" height="165" src="Chap_06_files/image018.gif" v:shapes="_x0000_i1033"><![endif]></span></span><!--[if supportFields]><span
style='mso-bookmark:space_mp0609_eps'><span style='mso-bookmark:art_mp0609_eps'></span></span><span
style='mso-element:field-end'></span><![endif]-->
			 <span style="mso-bookmark:
space_mp0609_eps"><span style="mso-bookmark:art_mp0609_eps"></span></span></span></p>
			<p class="Cap">Figure <!--[if supportFields]><span style='font-family:Times'><span
style='mso-element:field-begin'></span>SEQ chapter \c<span style='mso-element:
field-separator'></span></span><![endif]-->
			<span style="font-family:Times">6</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-end'></span></span><![endif]-->
			 <span style="font-family:Times">.</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-begin'></span>SEQ
figure<span style='mso-element:field-separator'></span></span><![endif]-->
			 <span style="font-family:Times">9</span><!--[if supportFields]><span
style='font-family:Times'><span style='mso-element:field-end'></span></span><![endif]-->
			 <span style="font-family:Helvetica-Narrow"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span></span>Coprocessor and Processor Control Flags</p>
			<h1 style="margin-left:0in">Using An Emulator Library</h1>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Emulator libraries&quot;<span style='mso-hide:none'> \z
&quot;REALSW.DOC-1085&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Floating-point:emulation&quot;<span
style='mso-hide:none'> \z &quot;REALSW.DOC-1086&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;OPTION directive:EMULATOR&quot;<span
style='mso-hide:none'> \z &quot;REALSW.DOC-1087&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;/Fpi command-line option,
ML&quot;<span style='mso-hide:none'> \z &quot;REALSW.DOC-1088&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Libraries:emulator&quot;<span
style='mso-hide:none'> \z &quot;REALSW.DOC-1089&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">If you do not have a math coprocessor or an 80486 processor, you can do most floating-point operations by writing assembly-language procedures and accessing an emulator from a high-level language. All Microsoft high-level languages come with emulator libraries for all memory models.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;ML:Command-line options:/Fpi&quot;<span style='mso-hide:none'> \z
&quot;REALSW.DOC-1090&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;EMULATOR argument, OPTION
directive&quot;<span style='mso-hide:none'> \z &quot;REALSW.DOC-1091&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">To use emulator functions, first write your assembly-language procedure using coprocessor instructions. Then assemble the module with the /FPi option and link it with your high-level<span style="letter-spacing:-1.75pt"> </span>&#150;<span style="letter-spacing:-1.75pt"> </span>language modules. You can enter options in the Programmer&#146;s WorkBench (PWB) environment, or you can use the <b style="mso-bidi-font-weight:normal">OPTION</b> <b style="mso-bidi-font-weight:normal">EMULATOR</b> in your source code.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;OPTION directive:emulation mode&quot;<span style='mso-hide:none'> \z
&quot;REALSW.DOC-1092&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">In emulation mode, the assembler generates instructions for the linker that the Microsoft emulator can use. The form of the <b style="mso-bidi-font-weight:normal">OPTION</b> directive in the following example tells the assembler to use emulation mode. This option (introduced in Chapter 1) can be defined only once in a module.</p>
			<p class="Ex">OPTION EMULATOR<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;Floating-point:emulation&quot; \z &quot;REALSW.DOC-1093&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;Emulator libraries&quot; \z
&quot;REALSW.DOC-1094&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>xe &quot;/Cx command-line option,
ML&quot; \z &quot;REALSW.DOC-1095&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">You can use emulator functions in a stand-alone assembler program by assembling with the /Cx command-line option and linking with the appropriate emulator library. The following fragment outlines a small-model program that contains floating-point instructions served by an emulator:</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.MODEL<span style="mso-spacerun: yes">&nbsp; </span>small, c<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>OPTION<span style="mso-spacerun:
yes">&nbsp; </span>EMULATOR<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>PUBLIC<span style="mso-spacerun:
yes">&nbsp; </span>main<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.CODE<br>
			main:<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Program entry point must<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.STARTUP<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>have name 'main'<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>.<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fadd<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>st, st<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Floating-point instructions<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fldpi<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>emulated<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Floating-point:instructions:not emulated (list)&quot;<span
style='mso-hide:none'> \z &quot;REALSW.DOC-1096&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Emulator libraries do not allow for all of the coprocessor instructions. The following floating-point instructions are not emulated:</p>
		</div>
		<span style='font-size:10.5pt;mso-bidi-font-size:10.0pt;font-family:"Times New Roman";
mso-fareast-font-family:"Times New Roman";mso-ansi-language:EN-US;mso-fareast-language:
EN-US;mso-bidi-language:AR-SA'><br clear="all" style="page-break-before:auto;
mso-break-type:section-break">
		</span>
		<div class="Section2">
			<p class="Lmc"><b style="mso-bidi-font-weight:normal">FBLD<br>
			FBSTP<br>
			FCOS<br>
			FDECSTP<br>
			FINCSTP<br>
			FINIT<br>
			FLDENV<br>
			FNOP<br>
			FPREM1<br>
			FRSTOR<br>
			FRSTORW<br>
			FRSTORD<br>
			FSAVE<br>
			FSAVEW<br>
			FSAVED<br>
			FSETPM<br>
			FSIN<br>
			FSINCOS<br>
			FSTENV<br>
			FUCOM<br>
			FUCOMP<br>
			FUCOMPP<br>
			FXTRACT<o:p></o:p></b></p>
		</div>
		<span style='font-size:10.5pt;mso-bidi-font-size:10.0pt;font-family:"Times New Roman";
mso-fareast-font-family:"Times New Roman";mso-ansi-language:EN-US;mso-fareast-language:
EN-US;mso-bidi-language:AR-SA'><br clear="all" style="page-break-before:auto;
mso-break-type:section-break">
		</span>
		<div class="Section3">
			<p class="Le"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<p class="MsoNormal">For information about writing assembly-language procedures for high-level languages, see Chapter 12, &#147;Mixed-Language Programming.&#148;</p>
			<h1 style="margin-left:0in">Using Binary Coded Decimal Numbers</h1>
			<p class="MsoNormal">Binary coded decimal (BCD) numbers allow calculations on large numbers without rounding errors. This characteristic makes BCD numbers a common choice for monetary calculations. Although BCDs can represent integers of any precision, the 8087-based coprocessors accommodate BCD numbers only in the range &plusmn;999,999,999,999,999,999.</p>
			<p class="MsoNormal">This section explains how to define BCD numbers, how to access them with a math coprocessor or emulator, and how to perform simple BCD calculations on the main processor.</p>
			<h2 style="margin-left:0in"><a name="BeginSelect"></a>Defining BCD Constants and Variables</h2>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Binary Coded Decimals:defining&quot;<span style='mso-hide:none'> \z
&quot;REALSW.DOC-1097&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Data types:Binary Coded
Decimals&quot;<span style='mso-hide:none'> \z &quot;REALSW.DOC-1098&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Unpacked BCD numbers are made up of bytes containing a single decimal digit in the lower 4 bits of each byte. Packed BCD numbers are made up of bytes containing two decimal digits: one in the upper 4 bits and one in the lower 4 bits. The leftmost digit holds the sign (0 for positive, 1 for negative).</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;REALSW.DOC-1150&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Packed BCD numbers are encoded in the 8087 coprocessor&#146;s packed BCD format. They can be up to 18 digits long, packed two digits per byte. The assembler zero-pads BCDs initialized with fewer than 18 digits. Digit 20 is the sign bit, and digit 19 is reserved.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Integers:Binary Coded Decimals (BCD)&quot;<span style='mso-hide:none'> \z
&quot;REALSW.DOC-1099&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Directives:TBYTE&quot;<span
style='mso-hide:none'> \z &quot;REALSW.DOC-1100&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;TBYTE directive&quot;<span
style='mso-hide:none'> \z &quot;REALSW.DOC-1101&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">When you define an integer constant with the<b style="mso-bidi-font-weight:normal"> TBYTE</b> directive and the current radix is decimal (<span style='font-size:9.5pt;font-family:"Lucida Sans Typewriter"'>t</span>), the assembler interprets the number as a packed BCD number.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;REALSW.DOC-1151&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The syntax for specifying packed BCDs is the same as for other integers.</p>
			<p class="Ex">pos1<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>TBYTE<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>1234567890<span style="mso-spacerun: yes">&nbsp; </span>; Encoded as 00000000001234567890h<br>
			neg1<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>TBYTE<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>-1234567890 ; Encoded as 80000000001234567890h<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;REALSW.DOC-1152&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Unpacked BCD numbers are stored one digit to a byte, with the value in the lower<br>
			4 bits. They can be defined using the <b style="mso-bidi-font-weight:normal">BYTE</b> directive. For example, an unpacked BCD number could be defined and initialized as follows:</p>
			<p class="Ex">unpackedr<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>BYTE<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>1,5,8,2,5,2,9<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>; Initialized to 9,252,851<br>
			unpackedf<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>BYTE<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>9,2,5,2,8,5,1<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>; Initialized to 9,252,851<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;REALSW.DOC-1153&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">As these two lines show, you can arrange digits backward or forward, depending on how you write the calculation routines that handle the numbers.</p>
			<h2 style="margin-left:0in">BCD Calculations on a Coprocessor</h2>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Binary Coded Decimals:calculating with&quot;<span style='mso-hide:none'>
\z &quot;REALSW.DOC-1102&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Binary Coded
Decimals:instructions for&quot;<span style='mso-hide:none'> \z
&quot;REALSW.DOC-1103&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">As the previous section explains, BCDs differ from other numbers only in the way a program stores them in memory. Internally, a math coprocessor does not distinguish BCD integers from any other type. The coprocessor can load, calculate, and store packed BCD integers up to 18 digits long.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;REALSW.DOC-1154&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The coprocessor instruction</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fbld<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>bcd1<br style="mso-special-character:
line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;REALSW.DOC-1155&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">pushes the packed BCD number at <span style='font-size:9.5pt;
font-family:"Lucida Sans Typewriter"'>bcd1</span> onto the coprocessor stack. When your code completes calculations on the number, place the result back into memory in BCD format with the instruction</p>
			<p class="Ex"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>fbstp<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>bcd1<br style="mso-special-character:
line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;REALSW.DOC-1156&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">which discards the variable from the stack top.</p>
			<h2 style="margin-left:0in">BCD Calculations on the Main Processor</h2>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Binary Coded Decimals:calculating with&quot;<span style='mso-hide:none'>
\z &quot;REALSW.DOC-1104&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Binary Coded
Decimals:unpacked&quot;<span style='mso-hide:none'> \z
&quot;REALSW.DOC-1105&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Binary Coded
Decimals:instructions for&quot;<span style='mso-hide:none'> \z
&quot;REALSW.DOC-1106&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The 8086-family of processors can perform simple arithmetic operations on BCD integers, but only one digit at a time. The main processor, like the coprocessor, operates internally on the number&#146;s binary value. It requires additional code to translate the binary result back into BCD format.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;REALSW.DOC-1157&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The main processor provides instructions specifically designed to translate to and from BCD format. These instructions are called &#147;ASCII-adjust&#148; and &#147;decimal-adjust&#148; instructions. They get their names from Intel mnemonics that use the term &#147;ASCII&#148; to refer to unpacked BCD numbers and &#147;decimal&#148; to refer to packed BCD numbers.</p>
			<h3>Unpacked BCD Numbers</h3>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;AAM instruction&quot;<span style='mso-hide:none'> \z
&quot;REALSW.DOC-1107&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;AAD instruction&quot;<span
style='mso-hide:none'> \z &quot;REALSW.DOC-1108&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Unpacked BCD numbers&quot;<span
style='mso-hide:none'> \z &quot;REALSW.DOC-1109&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">When a calculation using two one-digit values produces a two-digit result, the instructions <b style="mso-bidi-font-weight:normal">AAA</b>, <b style="mso-bidi-font-weight:normal">AAS</b>, <b style="mso-bidi-font-weight:
normal">AAM</b>, and <b style="mso-bidi-font-weight:normal">AAD</b> place the first digit in AL and the second in<span style="font-size:9.0pt"> </span>AH. If the digit in AL needs to carry to or borrow from the digit in AH, the instructions set the carry and auxiliary carry flags. The four ASCII-adjust instructions for unpacked BCDs are:</p>
			<table border="0" cellspacing="0" cellpadding="0" style="margin-left:.4pt;border-collapse:
 collapse;mso-padding-alt:0in 0in 0in 0in">
				<tr>
					<td width="77" valign="top" style="width:57.5pt;padding:0in 0in 0in 0in">
						<p class="Thf">Instruction</p>
						<p class="Thf"></p>
					</td>
					<td width="387" valign="top" style="width:290.5pt;padding:0in 0in 0in 0in">
						<p class="Th">Description</p>
						<p class="Th"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="464" colspan="2" valign="top" style="width:348.0pt;padding:0in 0in 0in 0in">
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
						<div style="border:none;border-top:solid windowtext .75pt;padding:0in 0in 0in 0in">
							<p class="Tr"></p>
						</div>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="77" valign="top" style="width:57.5pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">AAA</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="387" valign="top" style="width:290.5pt;padding:0in 0in 0in 0in">
						<p class="Tp">Adjusts after an addition operation.</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"><b style="mso-bidi-font-weight:normal"><o:p></o:p></b></p>
				</tr>
				<tr>
					<td width="77" valign="top" style="width:57.5pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">AAS</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="387" valign="top" style="width:290.5pt;padding:0in 0in 0in 0in">
						<p class="Tp">Adjusts after a subtraction operation.</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="77" valign="top" style="width:57.5pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">AAM</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="387" valign="top" style="width:290.5pt;padding:0in 0in 0in 0in">
						<p class="Tp">Adjusts after a multiplication operation. Always use with <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">MUL</span></b>, not with <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">IMUL</span></b>.</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
				<tr>
					<td width="77" valign="top" style="width:57.5pt;padding:0in 0in 0in 0in">
						<p class="Tpf"><b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">AAD</span></b></p>
						<p class="Tpf"></p>
					</td>
					<td width="387" valign="top" style="width:290.5pt;padding:0in 0in 0in 0in">
						<p class="Tp">Adjusts before a division operation. Unlike other BCD instructions, <b style="mso-bidi-font-weight:normal"><span style="font-size:
  9.0pt">AAD</span></b> converts a BCD value to a binary value before the operation. After the operation, use <b style="mso-bidi-font-weight:normal"><span style="font-size:9.0pt">AAM</span></b> to adjust the quotient. The remainder is lost. If you need the remainder, save it in another register before adjusting the quotient. Then move it back to AL and adjust if necessary.</p>
						<p class="Tp"></p>
					</td>
					<p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt;line-height:
  normal"></p>
				</tr>
			</table>
			<p class="Le"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Unpacked BCD numbers&quot;<span style='mso-hide:none'> \z
&quot;REALSW.DOC-1110&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">For processor arithmetic on unpacked BCD numbers, you must do the 8-bit arithmetic calculations on each digit separately, and assign the result to the AL register. After each operation, use the corresponding BCD instruction to adjust the result. The ASCII-adjust instructions do not take an operand and always work on the value in the AL register.</p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;REALSW.DOC-1158&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">The following examples show how to use each of these instructions in BCD addition, subtraction, multiplication, and division.</p>
			<p class="Ex">; To add 9 and 3 as BCDs:<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, 9<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Load 9<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>bx, 3<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>and 3 as unpacked BCDs<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>add<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>al, bl<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Add 09h and 03h to get 0Ch<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>aaa<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Adjust 0Ch in AL to 02h,<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>increment AH to 01h, set carry<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Result 12 (unpacked BCD in AX)<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="Ex">; To subtract 4 from 13:<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, 103h<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>; Load 13<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>bx, 4<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>and 4 as unpacked BCDs<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>sub<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>al, bl<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Subtract 4 from 3 to get FFh (-1)<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>aas<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Adjust 0FFh in AL to 9,<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>decrement AH to 0, set carry<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Result 9 (unpacked BCD in AX)<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="Ex">; To multiply 9 times 3:<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, 903h<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>; Load 9 and 3 as unpacked BCDs<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mul<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ah<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Multiply 9 and 3 to get 1Bh<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>aam<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Adjust 1Bh in AL<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>to get 27 (unpacked BCD in AX)<br>
			<br>
			; To divide 25 by 2:<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, 205h<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>; Load 25<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>bl, 2<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>and 2 as unpacked BCDs<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>aad<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Adjust 0205h in AX<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>to get 19h in AX<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>div<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>bl<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Divide by 2 to get<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>quotient 0Ch in AL<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>remainder 1 in AH<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>aam<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Adjust 0Ch in AL<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>to 12 (unpacked BCD in AX)<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>(remainder destroyed)<br style="mso-special-character:
line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;REALSW.DOC-1159&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">If you process multidigit BCD numbers in loops, each digit is processed and adjusted in turn.</p>
			<h3>Packed BCD Numbers</h3>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Binary Coded Decimals:packed&quot;<span style='mso-hide:none'> \z
&quot;REALSW.DOC-1111&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Binary Coded
Decimals:packed&quot;<span style='mso-hide:none'> \z
&quot;REALSW.DOC-1112&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Binary Coded Decimals:instructions
for&quot;<span style='mso-hide:none'> \z &quot;REALSW.DOC-1113&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Binary Coded
Decimals:calculating with&quot;<span style='mso-hide:none'> \z
&quot;REALSW.DOC-1114&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Packed BCD numbers are made up of bytes containing two decimal digits: one in the upper 4 bits and one in the lower 4 bits. The 8086-family processors provide instructions for adjusting packed BCD numbers after addition and subtraction. You must write your own routines to adjust for multiplication and division.</p>
			<div style="mso-element:frame;mso-element-wrap:around;mso-element-top:0in;
mso-height-rule:exactly">
				<table cellspacing="0" cellpadding="0" hspace="0" vspace="0" align="left">
					<tr>
						<td valign="top" align="left" style="padding-top:0in;padding-right:9.0pt;
  padding-bottom:0in;padding-left:9.0pt">
							<p class="Pb" style="margin-left:0in;mso-element:frame;mso-element-wrap:around;
  mso-element-top:0in;mso-height-rule:exactly"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
						</td>
					</tr>
				</table>
			</div>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;REALSW.DOC-1160&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">For processor calculations on packed BCD numbers, you must do the 8-bit arithmetic calculations on each byte separately, placing the result in the AL register. After each operation, use the corresponding decimal-adjust instruction to adjust the result. The decimal-adjust instructions do not take an operand and always work on the value in the AL register.</p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>XE
&quot;Instructions:DAA&quot;<span style='mso-hide:none'> \z
&quot;REALSW.DOC-1115&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;Instructions:DAS&quot;<span
style='mso-hide:none'> \z &quot;REALSW.DOC-1116&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-begin'></span>XE &quot;DAA instruction&quot;<span
style='mso-hide:none'> \z &quot;REALSW.DOC-1117&quot;</span><![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			<a name="bmXETemp"></a><a name="FindXETemp1"><span style="mso-bookmark:bmXETemp"></span></a><!--[if supportFields]><span
style='mso-bookmark:FindXETemp1'><span style='mso-bookmark:bmXETemp'></span></span><span
style='mso-element:field-begin'></span><span style='mso-bookmark:FindXETemp1'><span
style='mso-bookmark:bmXETemp'>XE &quot;DAS instruction&quot;</span></span><span
style='mso-bookmark:FindXETemp1'><span style='mso-bookmark:bmXETemp'><span
style='mso-hide:none'> \z &quot;REALSW.DOC-1118&quot;</span></span></span><![endif]-->
			<span style="mso-bookmark:FindXETemp1"><span style="mso-bookmark:bmXETemp"></span></span><!--[if supportFields]><span
style='mso-bookmark:FindXETemp1'><span style='mso-bookmark:bmXETemp'></span></span><span
style='mso-element:field-end'></span><![endif]-->
			<span style="mso-bookmark:
FindXETemp1"><span style="mso-bookmark:bmXETemp"></span></span></p>
			<p class="MsoNormal"><a name="FindXETemp">The 8086-family processors provide the instructions <b style="mso-bidi-font-weight:normal">DAA</b> (Decimal Adjust after Addition) and <b style="mso-bidi-font-weight:normal">DAS</b> (Decimal Adjust after Subtraction) for adjusting packed BCD numbers after addition and subtraction. </a></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;REALSW.DOC-1161&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">These examples use <b style="mso-bidi-font-weight:normal">DAA</b> and <b style="mso-bidi-font-weight:normal">DAS</b> to add and subtract BCDs.</p>
			<p class="Ex">;To add 88 and 33:<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, 8833h<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>; Load 88 and 33 as packed BCDs<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>add<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>al, ah<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Add 88 and 33 to get 0BBh<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>daa<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Adjust 0BBh to 121 (packed BCD:)<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>1 in carry and 21 in AL<br>
			<br>
			;To subtract 38 from 83:<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>mov<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>ax, 3883h<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>; Load 83 and 38 as packed BCDs<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>sub<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>al, ah<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Subtract 38 from 83 to get 04Bh<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>das<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Adjust 04Bh to 45 (packed BCD:)<br>
			<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>;<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>0 in carry and 45 in AL<br style="mso-special-character:line-break">
			<![if !supportLineBreakNewLine]><br style="mso-special-character:line-break">
			<![endif]></p>
			<p class="index"><!--[if supportFields]><span style='mso-element:field-begin'></span>xe
&quot;aa&quot; \z &quot;REALSW.DOC-1162&quot;<![endif]-->
			<!--[if supportFields]><span
style='mso-element:field-end'></span><![endif]-->
			</p>
			<p class="MsoNormal">Unlike the ASCII-adjust instructions, the decimal-adjust instructions never affect AH. The assembler sets the auxiliary carry flag if the digit in the lower 4 bits carries to or borrows from the digit in the upper 4 bits, and it sets the carry flag if the digit in the upper 4 bits needs to carry to or borrow from another byte.</p>
			<p class="index"><a name="bkEntry"></a><!--[if supportFields]><span
style='mso-bookmark:bkEntry'></span><span style='mso-element:field-begin'></span><span
style='mso-bookmark:bkEntry'>xe &quot;aa&quot; \z &quot;REALSW.DOC-1163&quot;</span><![endif]-->
			<span style="mso-bookmark:bkEntry"></span><!--[if supportFields]><span
style='mso-bookmark:bkEntry'></span><span style='mso-element:field-end'></span><![endif]-->
			<span style="mso-bookmark:bkEntry"></span></p>
			<p class="MsoNormal">Multidigit BCD numbers are usually processed in loops. Each byte is processed and adjusted in turn.</p>
			<p class="MsoNormal"><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>
		</div>
	</body>

</html>
